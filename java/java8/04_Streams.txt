


stream：只能操作一次，



函数式编程，如果有表达式只有一行，可以把{}、return省略。

一、Stream
	1、Stream<T> filter(Predicate<? super T> predicate)：拦截用于判断。
		* 传入的是一个Predicate实体，Predicate是一个被@FunctionalInterface修饰的接口，所以filter支持函数式编程。
		  Predicate中有一个boolean test(T t)方法。
		
		
		
	2、<R> Stream<R> map(Function<? super T, ? extends R> mapper);
		* 将函数依次作用到序列的每个元素，并把结果作为新的数组流返回。新生成的Stream只包含Function<T, R>转换生成的元素。
		* 需要传入一个Function<T, R>接口的实例，Function<T, R>是一个被@FunctionalInterface修饰的接口，其内部的方法是R apply(T t);
		* Function<入参类型，返回值类型>。
	
	
	
	3、IntStream mapToInt(ToIntFunction<? super T> mapper);
		* 需要出入ToIntFunction<T>接口实例，ToIntFunction<T>是被@FunctionalInterface修饰的接口，其内部方法为int applyAsInt(T value)。
		  applyAsInt(..)返回的是int。
		* 注意mapToInt返回的是一个IntStream，其有一些特有的方法。 
	
	
		
	4、LongStream mapToLong(ToLongFunction<? super T> mapper);
		* 和IntStream mapToInt(ToIntFunction<? super T> mapper)方法类似，可以参考。
	
	
	5、DoubleStream mapToDouble(ToDoubleFunction<? super T> mapper);
		* 和IntStream mapToInt(ToIntFunction<? super T> mapper)方法类似，可以参考。
		
		
	6、<R> Stream<R> flatMap(Function<? super T, ? extends Stream<? extends R>> mapper)
		* flatMap会把其每个元素转换得到的是Stream对象，会把子Stream中的元素压缩到父集合中；可以用于处理集合包集合。
	
	
	7、 LongStream flatMapToLong(Function<? super T, ? extends LongStream> mapper);
		* flatMap的变种。
		
	8、DoubleStream flatMapToDouble(Function<? super T, ? extends DoubleStream> mapper);
		* flatMap的变种。
		
	9、distinct()
		* 去重
		
	10、of()
		* 产生stream。
		
	11、forEach(Consumer<? super T> action)
		
		
	12、allMatch(Predicate<? super T> predicate)
		* 判断所有元素是否满足给定条件，只要有一个不满足就返回false。
		
	13、anyMatch(Predicate<? super T> predicate)
		* 只有有一个反正，就返回true
		
	14、noMatch(Predicate<? super T> predicate)
		* 没有一个元素满足，返回true。
		
	
二、注意
	1、map(..)和flatMap(..)的区别。
		map：处理普通集合
		flatMap：处理集合包集合。
	


#####################################################################
#################			     原理解析			#################
#####################################################################
三、StreamSupport
	1、说明
		StreamSupport：底层使用的工具类，用于创建和操作Stream。
		
	2、方法。
		/**
		 *
		 *
		 *
		 */
		public static <T> Stream<T> stream(Spliterator<T> spliterator, boolean parallel) {
			Objects.requireNonNull(spliterator);
			return new ReferencePipeline.Head<>(spliterator, StreamOpFlag.fromCharacteristics(spliterator), parallel);
		}
	
