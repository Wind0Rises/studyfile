refresh()方法的第三步骤。
	prepareBeanFactory(beanFactory)：准备BeanFactory的过程。

现在的重心转移到BeanFactory上 === DefaultListableBeanFactory

其中非常重要的一条线。
AliasRegistry（接口管理aliases的）
	SimpleAliasRegistry（普通bean的注册，维护着一个Map<String, String> aliasMap集合。）

	SingletonBeanRegistry（接口）单例Bean的注册
		DefaultSingletonBeanRegistry（类的注册共享实例。允许注册单例实例，这个类主要服务BeanFactory）默认单例Bean注册的实现。
			FactoryBeanRegistrySupport
				AbstractBeanFactory
					AbstractAutowireCapableBeanFactory
						DefaultListableBeanFactory 


##########  总结：
		beanPostProcessors：ApplicationContextAwareProcessor、ApplicationListenerDetector
		propertyEditorRegistrars：ResourceEditorRegistrar
		ignoredDependencyInterfaces：EnvironmentAware、EmbeddedValueResolverAware、ResourceLoaderAware、ApplicationEventPublisherAware、MessageSourceAware、ApplicationContextAware
		resolvableDependencies：BeanFactory、ResourceLoader、ApplicationEventPublisher、ApplicationContext
		manualSingletonNames：environment、systemProperties、systemEnvironment

DefaultSingletonBeanRegistry
	// 缓存单例对象。key-->bean name;vaule-->bean instance
	private final Map<String, Object> singletonObjects = new ConcurrentHashMap<String, Object>(256);

	// 缓存单例工厂。key-->bean name;vaule-->ObjectFactory
	private final Map<String, ObjectFactory<?>> singletonFactories = new HashMap<String, ObjectFactory<?>>(16);

	// 缓存已经存在的更早的单例对象。key-->bean name;vaule-->bean instanc
	private final Map<String, Object> earlySingletonObjects = new HashMap<String, Object>(16);

	// 保存已经注册的单例，set保存注册的bean name
	private final Set<String> registeredSingletons = new LinkedHashSet<String>(256);

	// 保存当前创建的Bean name
	private final Set<String> singletonsCurrentlyInCreation = Collections.newSetFromMap(new ConcurrentHashMap<String, Boolean>(16));

	// 从当前创建中排出的Bean name
	private final Set<String> inCreationCheckExclusions = Collections.newSetFromMap(new ConcurrentHashMap<String, Boolean>(16));

	// 存放异常出现的相关的原因的集合
	private Set<Exception> suppressedExceptions;

	// 指示我们目前是否在销毁单例中
	private boolean singletonsCurrentlyInDestruction = false;

	// 存放一次性bean的缓存.key-->bean name;vaule-->bean instance
	private final Map<String, Object> disposableBeans = new LinkedHashMap<String, Object>();

	// 外部bean与被包含在外部bean的所有内部bean集合包含关系的缓存
	private final Map<String, Set<String>> containedBeanMap = new ConcurrentHashMap<String, Set<String>>(16);

	// 指定bean与依赖指定bean的所有bean的依赖关系的缓存
	private final Map<String, Set<String>> dependentBeanMap = new ConcurrentHashMap<String, Set<String>>(64);

	// 指定bean与创建这个bean所需要依赖的所有bean的依赖关系的缓存
	private final Map<String, Set<String>> dependenciesForBeanMap = new ConcurrentHashMap<String, Set<String>>(64);


FactoryBeanRegistrySupport	
	// FactoryBeans创建的单例对象的缓存。key-->bean name;vaule-->bean instance
	private final Map<String, Object> factoryBeanObjectCache = new ConcurrentHashMap<String, Object>(16);


AbstractBeanFactory
	// 父Bean Factory。用于支持bean的继承
	private BeanFactory parentBeanFactory;

	/** ClassLoader to resolve bean class names with, if necessary */
	// classLoader
	private ClassLoader beanClassLoader = ClassUtils.getDefaultClassLoader();

	/** ClassLoader to temporarily resolve bean class names with, if necessary */
	private ClassLoader tempClassLoader;

	// 是否缓存Bean metadate或者没有访问重新建立
	private boolean cacheBeanMetadata = true;

	// 定义Bean Definition中的值的表达式策略。
	private BeanExpressionResolver beanExpressionResolver;

	// 使用Spring ConversionService而不是PropertyEditors
	private ConversionService conversionService;

	// 自定义PropertyEditorRegistrars以应用于此工厂的bean
	private final Set<PropertyEditorRegistrar> propertyEditorRegistrars = new LinkedHashSet<PropertyEditorRegistrar>(4);

	// 自定义PropertyEditors以应用于此工厂的bean
	private final Map<Class<?>, Class<? extends PropertyEditor>> customEditors = new HashMap<Class<?>, Class<? extends PropertyEditor>>(4);

	// 要使用的自定义TypeConverter，请覆盖默认的PropertyEditor机制
	private TypeConverter typeConverter;

	/** String resolvers to apply e.g. to annotation attribute values */
	private final List<StringValueResolver> embeddedValueResolvers = new LinkedList<StringValueResolver>();

	// 要在createBean中应用的BeanPostProcessors
	private final List<BeanPostProcessor> beanPostProcessors = new ArrayList<BeanPostProcessor>();

	// 指示是否已注册任何InstantiationAwareBeanPostProcessors
	private boolean hasInstantiationAwareBeanPostProcessors;

	// 指示是否已注册任何DestructionAwareBeanPostProcessors
	private boolean hasDestructionAwareBeanPostProcessors;

	// 从范围标识符String映射到相应的Scope
	private final Map<String, Scope> scopes = new LinkedHashMap<String, Scope>(8);

	// 使用SecurityManager运行时使用的安全上下文
	private SecurityContextProvider securityContextProvider;

	// 从bean名称映射到合并的RootBeanDefinition
	private final Map<String, RootBeanDefinition> mergedBeanDefinitions = new ConcurrentHashMap<String, RootBeanDefinition>(256);

	// 已经创建至少一次的bean的名称
	private final Set<String> alreadyCreated = Collections.newSetFromMap(new ConcurrentHashMap<String, Boolean>(256));

	// 当前正在创建的bean的名称
	private final ThreadLocal<Object> prototypesCurrentlyInCreation = new NamedThreadLocal<Object>("Prototype beans currently in creation");

AbstractAutowireCapableBeanFactory
	/** Strategy for creating bean instances */
	private InstantiationStrategy instantiationStrategy = new CglibSubclassingInstantiationStrategy();

	/** Resolver strategy for method parameter names */
	private ParameterNameDiscoverer parameterNameDiscoverer = new DefaultParameterNameDiscoverer();

	// 是否自动尝试解析bean之间的循环引用
	private boolean allowCircularReferences = true;

	// 是否在循环引用的情况下使用注入原始bean实例，即使注入的bean最终被包装。
	private boolean allowRawInjectionDespiteWrapping = false;
	
	// 忽略依赖检查和自动注入的依赖类型。
	private final Set<Class<?>> ignoredDependencyTypes = new HashSet<Class<?>>();

	// 忽略依赖检查和自动注入的依赖接口。
	private final Set<Class<?>> ignoredDependencyInterfaces = new HashSet<Class<?>>();

	// 未完成的FactoryBean实例的缓存。key-->FactoryBean name.value-->FactoryBean name
	private final Map<String, BeanWrapper> factoryBeanInstanceCache = new ConcurrentHashMap<String, BeanWrapper>(16);

	// 已过滤的PropertyDescriptors的缓存。bean Class -> PropertyDescriptor array
	private final ConcurrentMap<Class<?>, PropertyDescriptor[]> filteredPropertyDescriptorsCache = new ConcurrentHashMap<Class<?>, PropertyDescriptor[]>(256);


AbstractApplicationContext
	// 从序列化ID映射到Factory instance
	private static final Map<String, Reference<DefaultListableBeanFactory>> serializableFactories = new ConcurrentHashMap<String, Reference<DefaultListableBeanFactory>>(8);

	// 是否允许使用相同名称重新注册不同的定义
	private boolean allowBeanDefinitionOverriding = true;

	// 是否允许eager class加载，即使对于lazy-init bean也是如此
	private boolean allowEagerClassLoading = true;

	// 可选的OrderComparator，用于依赖列表和数组
	private Comparator<Object> dependencyComparator;

	// 用于检查bean definition是否为autowire候选解析器
	private AutowireCandidateResolver autowireCandidateResolver = new SimpleAutowireCandidateResolver();

	// 从依赖类型映射到相应的自动装配值
	private final Map<Class<?>, Object> resolvableDependencies = new ConcurrentHashMap<Class<?>, Object>(16);

	// key  -->  beanName  value -->  BeanDifinition
	private final Map<String, BeanDefinition> beanDefinitionMap = new ConcurrentHashMap<String, BeanDefinition>(256);

	// 单例和非单例bean name的映射，由依赖类型键入
	private final Map<Class<?>, String[]> allBeanNamesByType = new ConcurrentHashMap<Class<?>, String[]>(64);

	// 单列 key  -->  dependency type   value -->  bean names
	private final Map<Class<?>, String[]> singletonBeanNamesByType = new ConcurrentHashMap<Class<?>, String[]>(64);

	// 注册顺序中的bean definition名称列表
	private volatile List<String> beanDefinitionNames = new ArrayList<String>(256);

	// 按注册顺序保存单例Bean name，在注册表中
	private volatile Set<String> manualSingletonNames = new LinkedHashSet<String>(16);

	// 在冻结配置的情况下缓存的bean定义名称数组
	private volatile String[] frozenBeanDefinitionNames;

	// 是否可以为所有bean缓存bean定义元数据
	private volatile boolean configurationFrozen = false;


######################### 第三步开始  #################################
#########################  设置BeanFactory中的属性值  ##########
location：AbstractApplicationContext。
protected void prepareBeanFactory(ConfigurableListableBeanFactory beanFactory) {
	
	// 告诉内部BeanFactory使用Context的类加载器。
	beanFactory.setBeanClassLoader(getClassLoader());

	// ??? 是否使用策略模式 ???
	// 设置表达式解析器(解析bean定义中的一些表达式)
	beanFactory.setBeanExpressionResolver(new StandardBeanExpressionResolver(beanFactory.getBeanClassLoader()));

	// 添加属性编辑注册器(注册属性编辑器)，属性编辑器实际上是属性的类型转换器，
    // 因为bean的属性配置都是字符串类型的 实例化的时候要将这些属性转换为实际类型 
	beanFactory.addPropertyEditorRegistrar(new ResourceEditorRegistrar(this, getEnvironment()));

	// 引用--》https://www.jianshu.com/p/5836d3d6dc72
	// 使用上下文回调配置工程。添加Bean的后置处理器。
	// 添加BeanPostProcessor(Bean后置处理器)：ApplicationContextAwareProcessor
    // 在Bean初始化之前，调用ApplicationContextAwareProcessor的postProcessBeforeInitialization
    // 处理所有的Aware接口，进行如下操作：
    // 如果bean实现了EnvironmentAware接口，调用bean.setEnvironment()，
    // 如果bean实现了EmbeddedValueResolverAware接口，调用bean.setEmbeddedValueResolver
    // 如果bean实现了ResourceLoaderAware接口，调用bean.setResourceLoader
    // 如果bean实现了ApplicationEventPublisherAware接口，调用bean.setApplicationEventPublisher
    // 如果bean实现了MessageSourceAware接口，调用bean.setMessageSource
    // 如果bean实现了ApplicationContextAware接口，调用bean.setApplicationContext
	// 也就是说ApplicationContextAwareProcessor是Aware实现的基础，这个类继承了BeanPostProcessor
	beanFactory.addBeanPostProcessor(new ApplicationContextAwareProcessor(this));

	// 取消ResourceLoaderAware、ApplicationEventPublisherAware、MessageSourceAware、ApplicationContextAware、EnvironmentAware这5个接口的自动注入。
	// 因为ApplicationContextAwareProcessor把这5个接口的实现工作做了
	beanFactory.ignoreDependencyInterface(EnvironmentAware.class);
	beanFactory.ignoreDependencyInterface(EmbeddedValueResolverAware.class);
	beanFactory.ignoreDependencyInterface(ResourceLoaderAware.class);
	beanFactory.ignoreDependencyInterface(ApplicationEventPublisherAware.class);
	beanFactory.ignoreDependencyInterface(MessageSourceAware.class);
	beanFactory.ignoreDependencyInterface(ApplicationContextAware.class);

    // 注册可以解析的依赖关系，当注入的类型为dependencyType的时候，注入autowiredValue。注入类型与注入值的关系存储在map中。
	// BeanFactory接口未在普通factory.MessageSource中注册为可解析类型，并将其注册（并找到用于自动装配）作为bean。
	// 设置几个自动装配的特殊规则
	// 使用相应的自动装配值--注册特殊依赖关系类型。这适用于应该是  可自动操作但在工厂中未定义为bean的工厂引用：例如 ApplicationContext类型的依赖关系解析为bean所在的ApplicationContext实例
	beanFactory.registerResolvableDependency(BeanFactory.class, beanFactory);
	beanFactory.registerResolvableDependency(ResourceLoader.class, this);
	beanFactory.registerResolvableDependency(ApplicationEventPublisher.class, this);
	beanFactory.registerResolvableDependency(ApplicationContext.class, this);

	// 添加BeanPostProcessor(后置处理器)：ApplicationListenerDetector
    // 在Bean初始化后检查是否实现了ApplicationListener接口,
    // 是则加入当前的applicationContext的applicationListeners列表
	beanFactory.addBeanPostProcessor(new ApplicationListenerDetector(this));

	// Detect a LoadTimeWeaver and prepare for weaving, if found.
	注入一些其它信息的bean，比如environment、systemProperties等

	// 检测到LoadTimeWeaver并准备编织（如果找到）。
	if (beanFactory.containsBean(LOAD_TIME_WEAVER_BEAN_NAME)) {
		beanFactory.addBeanPostProcessor(new LoadTimeWeaverAwareProcessor(beanFactory));
		// Set a temporary ClassLoader for type matching.
		beanFactory.setTempClassLoader(new ContextTypeMatchClassLoader(beanFactory.getBeanClassLoader()));
	}

	// 注册默认的 “环境” Bean
	if (!beanFactory.containsLocalBean(ENVIRONMENT_BEAN_NAME)) {
		beanFactory.registerSingleton(ENVIRONMENT_BEAN_NAME, getEnvironment());
	}
	if (!beanFactory.containsLocalBean(SYSTEM_PROPERTIES_BEAN_NAME)) {
		beanFactory.registerSingleton(SYSTEM_PROPERTIES_BEAN_NAME, getEnvironment().getSystemProperties());
	}
	if (!beanFactory.containsLocalBean(SYSTEM_ENVIRONMENT_BEAN_NAME)) {
		beanFactory.registerSingleton(SYSTEM_ENVIRONMENT_BEAN_NAME, getEnvironment().getSystemEnvironment());
	}
}

// List<BeanPostProcessor> beanPostProcessors,添加后置处理器
location：AbstractBeanFactory
public void addBeanPostProcessor(BeanPostProcessor beanPostProcessor) {
	Assert.notNull(beanPostProcessor, "BeanPostProcessor must not be null");
	// 移除旧的
	this.beanPostProcessors.remove(beanPostProcessor);
	// 添加的
	this.beanPostProcessors.add(beanPostProcessor);
	if (beanPostProcessor instanceof InstantiationAwareBeanPostProcessor) {
		this.hasInstantiationAwareBeanPostProcessors = true;
	}
	if (beanPostProcessor instanceof DestructionAwareBeanPostProcessor) {
		this.hasDestructionAwareBeanPostProcessors = true;
	}
}

// 注册单例Bean。	
location：DefaultListableBeanFactory
public void registerSingleton(String beanName, Object singletonObject) throws IllegalStateException {
	super.registerSingleton(beanName, singletonObject);

	if (hasBeanCreationStarted()) {
		// Cannot modify startup-time collection elements anymore (for stable iteration)
		synchronized (this.beanDefinitionMap) {
			if (!this.beanDefinitionMap.containsKey(beanName)) {	
				// 获取已经注册的单例的 Bean name
				Set<String> updatedSingletons = new LinkedHashSet<String>(this.manualSingletonNames.size() + 1);
				updatedSingletons.addAll(this.manualSingletonNames);
				// 注册。
				updatedSingletons.add(beanName);
				this.manualSingletonNames = updatedSingletons;
			}
		}
	} else {
		// 认证启动注册阶段。
		if (!this.beanDefinitionMap.containsKey(beanName)) {
			// 添加注册
			this.manualSingletonNames.add(beanName);
		}
	}

	clearByTypeCache();
}

// 注册过程。
location：DefaultSingletonBeanFactory
public void registerSingleton(String beanName, Object singletonObject) throws IllegalStateException {
	Assert.notNull(beanName, "'beanName' must not be null");
	// 加锁
	synchronized (this.singletonObjects) {
		// 判断注册单例Bean集合时候存在。
		Object oldObject = this.singletonObjects.get(beanName);
		if (oldObject != null) {
			throw new IllegalStateException("Could not register object [" + singletonObject + "] under bean name '" + beanName + "': there is already object [" + oldObject + "] bound");
		}
		// 添加到缓存中。
		addSingleton(beanName, singletonObject);
	}
}

location：DefaultSingleton
protected void addSingleton(String beanName, Object singletonObject) {
	synchronized (this.singletonObjects) {
		// 在注册单例缓存中新增对应的Bean
		this.singletonObjects.put(beanName, (singletonObject != null ? singletonObject : NULL_OBJECT));

		// 从singletonFactories移除。
		this.singletonFactories.remove(beanName);

		// 从已经早期注册的Bean中移除
		this.earlySingletonObjects.remove(beanName);

		// 保存已经注册Bean的name
		this.registeredSingletons.add(beanName);
	}
}

// 用相应的自动装配值注册特殊依赖关系类型。在Factory中这适用于Factory/Context引用，但是不允许可以自动装配的但是没有定义的bean。
// 注意：在普通的BeanFactory中没有注册这样的默认类型，甚至不是BeanFactory接口本身。
location：DefaultSingletonBeanFactory
public void registerResolvableDependency(Class<?> dependencyType, Object autowiredValue) {
	Assert.notNull(dependencyType, "Dependency type must not be null");
	if (autowiredValue != null) {
		
		//  !autowiredValue(autowiredValue是否是ObjectFactory || autowiredValue是否是实例)
		if (!(autowiredValue instanceof ObjectFactory || dependencyType.isInstance(autowiredValue))) {
			throw new IllegalArgumentException("Value [" + autowiredValue + "] does not implement specified dependency type [" + dependencyType.getName() + "]");
		}
		
		// 添加到
		this.resolvableDependencies.put(dependencyType, autowiredValue);
	}
}


// 注册单例Bean
location：DefaultListableBeanFactory
public void registerSingleton(String beanName, Object singletonObject) throws IllegalStateException {
		// 调用父的注册方法
		super.registerSingleton(beanName, singletonObject);

		// 判断是否已经开始进行初始化操作了。
		if (hasBeanCreationStarted()) {

			//	上锁
			synchronized (this.beanDefinitionMap) {
				// ！ 判断是否注册有对应的BeanDefinition
				if (!this.beanDefinitionMap.containsKey(beanName)) {
					
					// 进行
					Set<String> updatedSingletons = new LinkedHashSet<String>(this.manualSingletonNames.size() + 1);
					updatedSingletons.addAll(this.manualSingletonNames);
					updatedSingletons.add(beanName);
					this.manualSingletonNames = updatedSingletons;
				}
			}
		} else {
			// Still in startup registration phase
			if (!this.beanDefinitionMap.containsKey(beanName)) {
				this.manualSingletonNames.add(beanName);
			}
		}

		clearByTypeCache();
	}

// 注册单例Bean
location：DefaultSingletonBeanRegistry
public void registerSingleton(String beanName, Object singletonObject) throws IllegalStateException {
	Assert.notNull(beanName, "'beanName' must not be null");
	synchronized (this.singletonObjects) {
		// 获取以注册的单例Bean
		Object oldObject = this.singletonObjects.get(beanName);
		if (oldObject != null) {
			throw new IllegalStateException("Could not register object [" + singletonObject + "] under bean name '" + beanName + "': there is already object [" + oldObject + "] bound");
		}
		
		// 加入以注册的单例Bean
		addSingleton(beanName, singletonObject);
	}
}

// 判断是否有已经创建的Bean了
protected boolean hasBeanCreationStarted() {
	return !this.alreadyCreated.isEmpty();
}

// 清理。
private void clearByTypeCache() {
	this.allBeanNamesByType.clear();
	this.singletonBeanNamesByType.clear();
}