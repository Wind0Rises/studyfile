/**
 * 【创建的整体的流程】
 * 		1、SmartInstantiationAwareBeanPostProcessor#determineCandidateConstructors();				| 	实例化对象模块	
 * 		2、通过反射创建对应Bean Definition的实例。													| 	实例化对象模块
 *
 *
 * 		3、MergedBeanDefinitionPostProcessor#postProcessMergedBeanDefinition()
 *		
 * 		
 * 		4、InstantiationAwareBeanPostProcessor的postProcessAfterInstantiation(..)					|	设置属性模块   			【自动注入操作在这个模块进行的？？？？】
 * 		5、设置对象的属性。																			|  	设置属性模块
 *
 *
 * 		6、调用各种Aware接口方法、BeanNameAware、ClassLoaderAware、BeanFactoryAware					| 	初始化阶段
 * 		7、BeanPostProcessor#postProcessBeforeInitializing()方法									| 	初始化阶段
 * 		8、InitializingBean#afterPropertiesSet()方法。												| 	初始化阶段
 *		9、调用init-method的方法																	| 	初始化阶段
 * 		10、BeanPostProcessor#postProcessAfterInitializing()										| 	初始化阶段
 * 
 */
location：AbstractAutowireCapableBeanFactory
protected Object doCreateBean(final String beanName, final RootBeanDefinition mbd, final Object[] args)throws BeanCreationException {

	BeanWrapper instanceWrapper = null;
	
	/**
	 * factoryBeanInstanceCache：为已经完成的FactoryBean实例缓存， 
	 * key：FactoryBean-name   
	 * value：BeanWrapper
	 *
	 */
	if (mbd.isSingleton()) {
		instanceWrapper = this.factoryBeanInstanceCache.remove(beanName);
	}
	
	/**
	 * ##########################################################################
	 * #       创建Bean对象，并构建BeanWrapper对象保证Bean对象。				#
	 * #       在创建Bean对象之前会调用SmartInstantiationAwareBeanPostProcessor	#
	 * #       的determineCandidateConstructors()方法							#
	 * ##########################################################################
	 */
	if (instanceWrapper == null) {
		instanceWrapper = createBeanInstance(beanName, mbd, args);
	}
	
	
	final Object bean = (instanceWrapper != null ? instanceWrapper.getWrappedInstance() : null);
	Class<?> beanType = (instanceWrapper != null ? instanceWrapper.getWrappedClass() : null);
	mbd.resolvedTargetType = beanType;

	
	synchronized (mbd.postProcessingLock) {
		if (!mbd.postProcessed) {
			try {
				
				/**
				 * 调用MergedBeanDefinitionPostProcessor的postProcessMergedBeanDefinition()方法
				 */
				applyMergedBeanDefinitionPostProcessors(mbd, beanType, beanName);
				
			} catch (Throwable ex) {
				throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Post-processing of merged bean definition failed", ex);
			}
			
			mbd.postProcessed = true;
		}
	}
	

	// 是否是单例模式  【并且】  是否允许循环引用  【并且】  是否是当前正在创建的Bean。
	boolean earlySingletonExposure = (mbd.isSingleton() && this.allowCircularReferences && isSingletonCurrentlyInCreation(beanName));
	
	
	if (earlySingletonExposure) {
		if (logger.isDebugEnabled()) {
			logger.debug("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
		}
		
		addSingletonFactory(beanName, new ObjectFactory<Object>() {
			@Override
			public Object getObject() throws BeansException {
				/**
				 * 不会调用SmartInstantiationAwareBeanPostProcessor类的getEarlyBeanReference()方法。
				 */
				return getEarlyBeanReference(beanName, mbd, bean);
			}
		});
	}
	
	

	Object exposedObject = bean;
	try {
		/**
		 * ☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆
		 * ☆               设置属性，这个要重点看                    	☆
		 * ☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆
		 */
		populateBean(beanName, mbd, instanceWrapper);
		
		
		if (exposedObject != null) {
		
		
			/**
			 * ☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆
			 * ☆              		初始化操作，重点	                 ☆
			 * ☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆
			 */
			exposedObject = initializeBean(beanName, exposedObject, mbd);
			
			
		}
	} catch (Throwable ex) {
		if (ex instanceof BeanCreationException && beanName.equals(((BeanCreationException) ex).getBeanName())) {
			throw (BeanCreationException) ex;
		}
		else {
			throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Initialization of bean failed", ex);
		}
	}

	if (earlySingletonExposure) {
	
		/**
		 * 获取给定的Bean name获取已经注册的单例Bean。
		 * SmartInstantiationAwareBeanPostProcessor：调用SmartInstantiationAwareBeanPostProcessor类的getEarlyBeanReference()方法。
		 */
		Object earlySingletonReference = getSingleton(beanName, false);
		
		if (earlySingletonReference != null) {
		
			if (exposedObject == bean) {
				exposedObject = earlySingletonReference;
				
			
			// allowRawInjectionDespiteWrapping：默认为false 【并且】  是否有依赖。
			} else if (!this.allowRawInjectionDespiteWrapping && hasDependentBean(beanName)) {
				
				// 获取依赖的Bean name。
				String[] dependentBeans = getDependentBeans(beanName);
				Set<String> actualDependentBeans = new LinkedHashSet<String>(dependentBeans.length);
				
				for (String dependentBean : dependentBeans) {
					/**
					 *   这里不太明白。
					 */
					if (!removeSingletonIfCreatedForTypeCheckOnly(dependentBean)) {
						actualDependentBeans.add(dependentBean);
					}
				}
				
				if (!actualDependentBeans.isEmpty()) {
					throw new BeanCurrentlyInCreationException(beanName, "Bean with name '" + beanName + "' has been injected into other beans [");
				}
			}
		}
	}
	
	
	try {
		registerDisposableBeanIfNecessary(beanName, bean, mbd);
	} catch (BeanDefinitionValidationException ex) {
		throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Invalid destruction signature", ex);
	}

	return exposedObject;
}




/**
 * 构建一个BeanWrapper对象。
 * 
 * 为指定的Bean创建一个新的实例，可以通过适合的实例化策略；工厂方法、构造函数自动装配、或者简单的实例化。
 */
location：AbstractAutowireCapableBeanFactory
protected BeanWrapper createBeanInstance(String beanName, RootBeanDefinition mbd, Object[] args) {
	// 获取Bean的名称。
	Class<?> beanClass = resolveBeanClass(mbd, beanName);

	// beanClass.getModifiers()：获取Class的修饰符【public class CustomClassName】
	if (beanClass != null && !Modifier.isPublic(beanClass.getModifiers()) && !mbd.isNonPublicAccessAllowed()) {
		throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Bean class isn't public, and non-public access not allowed: " + beanClass.getName());
	}

	
	/**
	 * 通过工厂方法创建Bean。
	 */
	if (mbd.getFactoryMethodName() != null)  {
		return instantiateUsingFactoryMethod(beanName, mbd, args);
	}

	boolean resolved = false;
	boolean autowireNecessary = false;
	
	
	if (args == null) {
		synchronized (mbd.constructorArgumentLock) {
			if (mbd.resolvedConstructorOrFactoryMethod != null) {
				resolved = true;
				autowireNecessary = mbd.constructorArgumentsResolved;
			}
		}
	}
	if (resolved) {
		if (autowireNecessary) {
			return autowireConstructor(beanName, mbd, null, null);
		}
		else {
			return instantiateBean(beanName, mbd);
		}
	}

	/**
	 * 调用SmartInstantiationAwareBeanPostProcessor的determineCandidateConstructors(..)方法。
	 */ 
	Constructor<?>[] ctors = determineConstructorsFromBeanPostProcessors(beanClass, beanName);
	
	
	if (ctors != null || mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_CONSTRUCTOR || mbd.hasConstructorArgumentValues() || !ObjectUtils.isEmpty(args))  {
		return autowireConstructor(beanName, mbd, ctors, args);
	}

	/**
	 * ######################################################################
	 * #                    初始化没有特殊处理的Bean，						#
	 * #                    通过反射创建对应Bean的实例						#
	 * ######################################################################
	 */
	return instantiateBean(beanName, mbd);
}



/**
 * 调用SmartInstantiationAwareBeanPostProcessor的determineCandidateConstructors方法。
 */
location：AbstractAutowireCapableBeanFactory
protected Constructor<?>[] determineConstructorsFromBeanPostProcessors(@Nullable Class<?> beanClass, String beanName) throws BeansException {

	if (beanClass != null && hasInstantiationAwareBeanPostProcessors()) {
		for (BeanPostProcessor bp : getBeanPostProcessors()) {
			if (bp instanceof SmartInstantiationAwareBeanPostProcessor) {
				SmartInstantiationAwareBeanPostProcessor ibp = (SmartInstantiationAwareBeanPostProcessor) bp;
				Constructor<?>[] ctors = ibp.determineCandidateConstructors(beanClass, beanName);
				if (ctors != null) {
					return ctors;
				}
			}
		}
	}
	return null;
}


/**
 * 创建BeanWrapper并初始化，这个有创建对象的过程。
 */
location：AbstractAutowireCapableBeanFactory
protected BeanWrapper instantiateBean(final String beanName, final RootBeanDefinition mbd) {
	try {
	
		Object beanInstance;
		final BeanFactory parent = this;
			
		if (System.getSecurityManager() != null) {
			beanInstance = AccessController.doPrivileged(new PrivilegedAction<Object>() {
				@Override
				public Object run() {
					
					/**
					 * getInstantiationStrategy():获取到CglibSubclassingInstantiationStrategy()实例对象。
					 */
					return getInstantiationStrategy().instantiate(mbd, beanName, parent);
				}
			}, getAccessControlContext());
		} else {
		
			/**
			 * getInstantiationStrategy():获取到CglibSubclassingInstantiationStrategy()实例对象。
			 */
			beanInstance = getInstantiationStrategy().instantiate(mbd, beanName, parent);
		}
		
		// 创建BeanWrapper并初始化。
		BeanWrapper bw = new BeanWrapperImpl(beanInstance);
		initBeanWrapper(bw);
		
		
		return bw;
	} catch (Throwable ex) {
		throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Instantiation of bean failed", ex);
	}
}


/**
 * CglibSubclassingInstantiationStrategy
 * 		SimpleInstantiationStrategy
 * 				InstantiationStrategy（接口）
 * 
 * 通过Reflect或Cglib创建对象。
 */ 
location：AbstractAutowireCapableBeanFactory
public Object instantiate(RootBeanDefinition bd, String beanName, BeanFactory owner) {
	// 是否有方法覆盖。
	if (bd.getMethodOverrides().isEmpty()) {
	
		Constructor<?> constructorToUse;
		synchronized (bd.constructorArgumentLock) {
			// 获取构造函数
			constructorToUse = (Constructor<?>) bd.resolvedConstructorOrFactoryMethod;
			
			
			// 如果未获取到构造函数，使用特殊方法创建。
			if (constructorToUse == null) {
				final Class<?> clazz = bd.getBeanClass();
				if (clazz.isInterface()) {
					throw new BeanInstantiationException(clazz, "Specified class is an interface");
				}
				try {
					if (System.getSecurityManager() != null) {
						constructorToUse = AccessController.doPrivileged(new PrivilegedExceptionAction<Constructor<?>>() {
							@Override
							public Constructor<?> run() throws Exception {
								return clazz.getDeclaredConstructor((Class[]) null);
							}
						});
					} else {
						constructorToUse =	clazz.getDeclaredConstructor((Class[]) null);
					}
					
					bd.resolvedConstructorOrFactoryMethod = constructorToUse;
				} catch (Throwable ex) {
					throw new BeanInstantiationException(clazz, "No default constructor found", ex);
				}
			}
		}
		
		// ☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆
		// ☆            通过Reflect创建对象☆				   ☆
		// ☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆
		return BeanUtils.instantiateClass(constructorToUse);
	}
	else {
		// ☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆
		// ☆            通过Cglib创建对象☆				   ☆
		// ☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆
		return instantiateWithMethodInjection(bd, beanName, owner);
	}
}



/**
 * 
 * 执行SmartInstantiationAwareBeanPostProcessor的getEarlyBeanReference方法。
 */
location：AbstractAutowireCapableBeanFactory
protected Object getEarlyBeanReference(String beanName, RootBeanDefinition mbd, Object bean) {
	Object exposedObject = bean;
	
	if (bean != null && !mbd.isSynthetic() && hasInstantiationAwareBeanPostProcessors()) {
		for (BeanPostProcessor bp : getBeanPostProcessors()) {
			if (bp instanceof SmartInstantiationAwareBeanPostProcessor) {
				SmartInstantiationAwareBeanPostProcessor ibp = (SmartInstantiationAwareBeanPostProcessor) bp;
				exposedObject = ibp.getEarlyBeanReference(exposedObject, beanName);
				if (exposedObject == null) {
					return null;
				}
			}
		}
	}
	return exposedObject;
}



/**
 *
 */
location：AbstractAutowireCapableBeanFactory
protected void populateBean(String beanName, RootBeanDefinition mbd, BeanWrapper bw) {

	// 获取对应的Bean Definition对应的属性值。
	PropertyValues pvs = mbd.getPropertyValues();

	if (bw == null) {
		if (!pvs.isEmpty()) {
			throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Cannot apply property values to null instance");
		} else {
			return;
		}
	}

	// 在设置属性之前，让所有InstantiationAwareBeanPostProcessors都有机会修改Bean的状态。 
	boolean continueWithPropertyPopulation = true;
	
	// isSynthetic()：默认返回false。
	if (!mbd.isSynthetic() && hasInstantiationAwareBeanPostProcessors()) {
		for (BeanPostProcessor bp : getBeanPostProcessors()) {
			if (bp instanceof InstantiationAwareBeanPostProcessor) {
				/**
				 * 调用InstantiationAwareBeanPostProcessor的postProcessAfterInstantiation(..)：方法
				 */
				InstantiationAwareBeanPostProcessor ibp = (InstantiationAwareBeanPostProcessor) bp;
				if (!ibp.postProcessAfterInstantiation(bw.getWrappedInstance(), beanName)) {
					continueWithPropertyPopulation = false;
					break;
				}
			}
		}
	}

	if (!continueWithPropertyPopulation) {
		return;
	}

	// 判断注入的类型，如果注入类型为byName或者是byType。
	if (mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_BY_NAME || mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_BY_TYPE) {
		
		MutablePropertyValues newPvs = new MutablePropertyValues(pvs);
		
		// 通过名称进行自动依赖注入。
		if (mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_BY_NAME) {
			autowireByName(beanName, mbd, bw, newPvs);
		}

		// 通过类型进行自动依赖注入。
		if (mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_BY_TYPE) {
			autowireByType(beanName, mbd, bw, newPvs);
		}

		pvs = newPvs;
	}

	boolean hasInstAwareBpps = hasInstantiationAwareBeanPostProcessors();
	boolean needsDepCheck = (mbd.getDependencyCheck() != RootBeanDefinition.DEPENDENCY_CHECK_NONE);

	if (hasInstAwareBpps || needsDepCheck) {
		PropertyDescriptor[] filteredPds = filterPropertyDescriptorsForDependencyCheck(bw, mbd.allowCaching);
		if (hasInstAwareBpps) {
			for (BeanPostProcessor bp : getBeanPostProcessors()) {
				if (bp instanceof InstantiationAwareBeanPostProcessor) {
					InstantiationAwareBeanPostProcessor ibp = (InstantiationAwareBeanPostProcessor) bp;
					pvs = ibp.postProcessPropertyValues(pvs, filteredPds, bw.getWrappedInstance(), beanName);
					if (pvs == null) {
						return;
					}
				}
			}
		}
		if (needsDepCheck) {
			checkDependencies(beanName, mbd, filteredPds, pvs);
		}
	}

	applyPropertyValues(beanName, mbd, bw, pvs);
}





/**
 * ######################################################
 * #					初始化操作						#
 * ######################################################
 */
location：AbstractAutowireCapableBeanFactory
protected Object initializeBean(final String beanName, final Object bean, RootBeanDefinition mbd) {
	/**
	 * ☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆
	 * ☆					    	  Aware对应的Bean调用对应的Aware的方法。			 					☆
	 * ☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆
	 */
	if (System.getSecurityManager() != null) {
		AccessController.doPrivileged(new PrivilegedAction<Object>() {
			@Override
			public Object run() {
				invokeAwareMethods(beanName, bean);
				return null;
			}
		}, getAccessControlContext());
	} else {
		invokeAwareMethods(beanName, bean);
	}


	/**
	 * ☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆
	 * ☆				BeanPostProcessor类的postProcessBeforeInitializing()方法								☆
	 * ☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆
	 */
	Object wrappedBean = bean;
	if (mbd == null || !mbd.isSynthetic()) {
		wrappedBean = applyBeanPostProcessorsBeforeInitialization(wrappedBean, beanName);
	}


	/**
	 * ☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆
	 * ☆							先调用InitializeingBean的afterPropertiesSet(..)方法、									☆
	 * ☆									在调用init-method设置的初始化方法。												☆
	 * ☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆
	 */
	try {
		invokeInitMethods(beanName, wrappedBean, mbd);
	} catch (Throwable ex) {
		throw new BeanCreationException((mbd != null ? mbd.getResourceDescription() : null), beanName, "Invocation of init method failed", ex);
	}

	/**
	 * ☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆
	 * ☆				BeanPostProcessor类的postProcessAfterInitializing()方法					 			 	☆
	 * ☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆
	 */
	if (mbd == null || !mbd.isSynthetic()) {
		wrappedBean = applyBeanPostProcessorsAfterInitialization(wrappedBean, beanName);
	}
	return wrappedBean;
}

/**
 * 如果给你的Bean是Aware接口的实例，则调用对应的具体的Aware方法。
 */
location：AbstractAutowireCapableBeanFactory
private void invokeAwareMethods(final String beanName, final Object bean) {
	if (bean instanceof Aware) {
		if (bean instanceof BeanNameAware) {
			((BeanNameAware) bean).setBeanName(beanName);
		}
		if (bean instanceof BeanClassLoaderAware) {
			((BeanClassLoaderAware) bean).setBeanClassLoader(getBeanClassLoader());
		}
		if (bean instanceof BeanFactoryAware) {
			((BeanFactoryAware) bean).setBeanFactory(AbstractAutowireCapableBeanFactory.this);
		}
	}
}

/**
 * 调用BeanPostProcessor对应的postProcessBeforeInitialization(..)方法。
 */
location：AbstractAutowireCapableBeanFactory
public Object applyBeanPostProcessorsBeforeInitialization(Object existingBean, String beanName) throws BeansException {

	Object result = existingBean;
	for (BeanPostProcessor beanProcessor : getBeanPostProcessors()) {
		result = beanProcessor.postProcessBeforeInitialization(result, beanName);
		if (result == null) {
			return result;
		}
	}
	return result;
}


/**
 * 如果这个Bean实现类InitializingBean方法，这个时候就调用InitializingBean的afterPropertiesSet。
 * 然后在调用自己的定义的init-method方法。
 */
location：AbstractAutowireCapableBeanFactory
protected void invokeInitMethods(String beanName, final Object bean, RootBeanDefinition mbd) throws Throwable {

	boolean isInitializingBean = (bean instanceof InitializingBean);
	
	
	/**
	 * 调用InitializingBean的afterPropertiesSet()方法。
	 */
	if (isInitializingBean && (mbd == null || !mbd.isExternallyManagedInitMethod("afterPropertiesSet"))) {
		
		if (logger.isDebugEnabled()) {
			logger.debug("Invoking afterPropertiesSet() on bean with name '" + beanName + "'");
		}
		
		
		if (System.getSecurityManager() != null) {
			try {
				AccessController.doPrivileged(new PrivilegedExceptionAction<Object>() {
					@Override
					public Object run() throws Exception {
						((InitializingBean) bean).afterPropertiesSet();
						return null;
					}
				}, getAccessControlContext());
			} catch (PrivilegedActionException pae) {
				throw pae.getException();
			}
		} else {
			((InitializingBean) bean).afterPropertiesSet();
		}
	}

	if (mbd != null) {
		String initMethodName = mbd.getInitMethodName();
		if (initMethodName != null && !(isInitializingBean && "afterPropertiesSet".equals(initMethodName)) && !mbd.isExternallyManagedInitMethod(initMethodName)) {
			invokeCustomInitMethod(beanName, bean, mbd);
		}
	}
}


/**
 * 调用init-method定义的方法。
 */
location：AbstractAutowireCapableBeanFactory
protected void invokeCustomInitMethod(String beanName, final Object bean, RootBeanDefinition mbd) throws Throwable {
	/**
	 * 获取init-method定义的方法名。
	 */
	String initMethodName = mbd.getInitMethodName();
	
	/**
	 * 获取对应的方法。
	 */
	final Method initMethod = (mbd.isNonPublicAccessAllowed() ? BeanUtils.findMethod(bean.getClass(), initMethodName) : ClassUtils.getMethodIfAvailable(bean.getClass(), initMethodName));
	
	if (initMethod == null) {
		if (mbd.isEnforceInitMethod()) {
			throw new BeanDefinitionValidationException("Couldn't find an init method named '" + initMethodName + "' on bean with name '" + beanName + "'");
		} else {
			if (logger.isDebugEnabled()) {
				logger.debug("No default init method named '" + initMethodName + "' found on bean with name '" + beanName + "'");
			}
			return;
		}
	}

	if (logger.isDebugEnabled()) {
		logger.debug("Invoking init method  '" + initMethodName + "' on bean with name '" + beanName + "'");
	}

	/**
	 * 通过反射调用对应的方法。
	 */
	if (System.getSecurityManager() != null) {
		AccessController.doPrivileged(new PrivilegedExceptionAction<Object>() {
			@Override
			public Object run() throws Exception {
				ReflectionUtils.makeAccessible(initMethod);
				return null;
			}
		});
		try {
			AccessController.doPrivileged(new PrivilegedExceptionAction<Object>() {
				@Override
				public Object run() throws Exception {
					initMethod.invoke(bean);
					return null;
				}
			}, getAccessControlContext());
		} catch (PrivilegedActionException pae) {
			InvocationTargetException ex = (InvocationTargetException) pae.getException();
			throw ex.getTargetException();
		}
	} else {
		try {
			ReflectionUtils.makeAccessible(initMethod);
			initMethod.invoke(bean);
		}
		catch (InvocationTargetException ex) {
			throw ex.getTargetException();
		}
	}
}

/**
 * 获取已经注册到单例Bean通过给定的Bean name.
 */
location：DefaultSingletonBeanRegistry
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
	Object singletonObject = this.singletonObjects.get(beanName);
	
	if (singletonObject == null && isSingletonCurrentlyInCreation(beanName)) {
		
		synchronized (this.singletonObjects) {
			singletonObject = this.earlySingletonObjects.get(beanName);
			if (singletonObject == null && allowEarlyReference) {
				ObjectFactory<?> singletonFactory = this.singletonFactories.get(beanName);
				if (singletonFactory != null) {
					singletonObject = singletonFactory.getObject();
					this.earlySingletonObjects.put(beanName, singletonObject);
					this.singletonFactories.remove(beanName);
				}
			}
		}
		
	}
	
	return (singletonObject != NULL_OBJECT ? singletonObject : null);
}


/**
 *
 */
location：AbstractBeanFactory
protected void registerDisposableBeanIfNecessary(String beanName, Object bean, RootBeanDefinition mbd) {
	AccessControlContext acc = (System.getSecurityManager() != null ? getAccessControlContext() : null);
	
	// 是否不是prototype。		给定的bean是否需要在关闭时销毁。
	if (!mbd.isPrototype() && requiresDestruction(bean, mbd)) {
		
		if (mbd.isSingleton()) {
			registerDisposableBean(beanName, new DisposableBeanAdapter(bean, beanName, mbd, getBeanPostProcessors(), acc));
		} else {
			Scope scope = this.scopes.get(mbd.getScope());
			if (scope == null) {
				throw new IllegalStateException("No Scope registered for scope name '" + mbd.getScope() + "'");
			}
			
			scope.registerDestructionCallback(beanName, new DisposableBeanAdapter(bean, beanName, mbd, getBeanPostProcessors(), acc));
		}
	}
}


/**
 *  单例Bena -- 保存起来。
 */
location：DefaultSingletonBeanRegistry
public void registerDisposableBean(String beanName, DisposableBean bean) {
	synchronized (this.disposableBeans) {
		this.disposableBeans.put(beanName, bean);
	}
}

/**
 *  
 */
location：DisposableBeanAdapter
public DisposableBeanAdapter(Object bean, String beanName, RootBeanDefinition beanDefinition, List<BeanPostProcessor> postProcessors, AccessControlContext acc) {

	Assert.notNull(bean, "Disposable bean must not be null");
	this.bean = bean;
	this.beanName = beanName;
	this.invokeDisposableBean = (this.bean instanceof DisposableBean && !beanDefinition.isExternallyManagedDestroyMethod("destroy"));
	this.nonPublicAccessAllowed = beanDefinition.isNonPublicAccessAllowed();
	this.acc = acc;
	String destroyMethodName = inferDestroyMethodIfNecessary(bean, beanDefinition);
	
	if (destroyMethodName != null && !(this.invokeDisposableBean && "destroy".equals(destroyMethodName)) && !beanDefinition.isExternallyManagedDestroyMethod(destroyMethodName)) {
		this.destroyMethodName = destroyMethodName;
		this.destroyMethod = determineDestroyMethod();
		if (this.destroyMethod == null) {
			if (beanDefinition.isEnforceDestroyMethod()) {
				throw new BeanDefinitionValidationException("Couldn't find a destroy method named '" + destroyMethodName + "' on bean with name '" + beanName + "'");
			}
		} else {
			Class<?>[] paramTypes = this.destroyMethod.getParameterTypes();
			if (paramTypes.length > 1) {
				throw new BeanDefinitionValidationException("Method '" + destroyMethodName + "' of bean '" + beanName + "' has more than one parameter - not supported as destroy method");
			}
			else if (paramTypes.length == 1 && boolean.class != paramTypes[0]) {
				throw new BeanDefinitionValidationException("Method '" + destroyMethodName + "' of bean '" + beanName + "' has a non-boolean parameter - not supported as destroy method");
			}
		}
	}
	
	this.beanPostProcessors = filterPostProcessors(postProcessors, bean);
}

/**
 *  
 */
location：DisposableBeanAdapter
private List<DestructionAwareBeanPostProcessor> filterPostProcessors(List<BeanPostProcessor> processors, Object bean) {
	List<DestructionAwareBeanPostProcessor> filteredPostProcessors = null;
	if (!CollectionUtils.isEmpty(processors)) {
		filteredPostProcessors = new ArrayList<DestructionAwareBeanPostProcessor>(processors.size());
		
		for (BeanPostProcessor processor : processors) {
			if (processor instanceof DestructionAwareBeanPostProcessor) {
				DestructionAwareBeanPostProcessor dabpp = (DestructionAwareBeanPostProcessor) processor;
				try {
					if (dabpp.requiresDestruction(bean)) {
						filteredPostProcessors.add(dabpp);
					}
				} catch (AbstractMethodError err) {
					filteredPostProcessors.add(dabpp);
				}
			}
		}
		
	}
	return filteredPostProcessors;
}