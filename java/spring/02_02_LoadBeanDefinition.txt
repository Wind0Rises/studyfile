【spring 4.3.12】


refresh()：第二部分
	obtainFreshBeanFactory()：获取一个新的BeanFactory，这里有加载资源的过程，并解析为Bean Definition。
	

	
	
一、重要的内容。
	1、加载BeanDefinition过程：
		。创建对应的BeanDefinitionReader【XmlBeanDefinitionReader、PropertiesBeanDefinitionReader、GroovyBeanDefinitionReader】，接着设置Reader的属性，
			然后初始化Reader【空的方法，可以扩展】，最后加载。首先获取需要加载的配置文件，获取文件的Resources；遍历加载对应的Resources。转换为EncodedResource。
			获取对应xml文件的Document对象。
		
		。注册过程：
			1)、获取xml文件对应的输入流，并解析对应的Document的对象。
						【衍生问题？1：xml是如何解析的?】
						
						
			2)、注册过程。解析过程发生在DefaultBeanDefinitionDocumentReader类中，
					判断对应的Element是否是默认的命名空间。------ 如果是默认的     ---》  三种【import、alias、bean】三种element处理过程，【beans】进行递归。 
														   ------ 如果不是默认的   ---》  获取响应的element所对应的命名空间，并创建NamespaceHandler，然后进行解析。
														   
			3)、<bean>的解析过程?
				首先根据className、parent、classLoader创建对应BeanDefinition，并设置attribute、metaElement、propriety等等。
				接着生成BeanName并构建BeanDefinitionHolder对象，如果需要装饰AbstractBeanDefinition进行装饰操作。
				然后把BeanDefinition注册到BeanDefinitionRegistry（DefaultListableBeanFactory)中。
				


判断这个ApplicationContext的实例是否有BeanFactory，如果有则销毁BeanFactory中的Bean和缓存。【具体清理哪些对象？】把ApplicationContext中的BeanFactory设置为null。
然后创建一个新的DefaultListableBeanFactory。然后加载BeanDefinition。


二、重要的类：

	XmlBeanDefinitionReader中包含BeanDefinitionDocumentReader。BeanDefinitionDocumentReader中包含BeanDefinitionParserDelegate；
	BeanDefinitionParserDelegate是一个中间层，可以通过BeanDefinitionParserDelegate获取各个命名空间对应的Handler。真正操作的是这些Handler。


	相关类：
		XmlBeanDefinitionReader：XML Bean Definition的Bean Definition读取器。将实际的XML文档读取委托给BeanDefinitionDocumentReader接口的实现。
			XML Bean Definition的Bean Definition读取器。将实际的XML文档读取委托给BeanDefinitionDocumentReader接口的实现。其中包含XmlReaderContext
			实例属性。

		BeanDefinitionDocumentReader：加载BeanDefinition的主要流程，就像一个前置处理，主要的步骤都在这里，（加载文件..等）在这个类中会构建
			BeanDefinitionParserDelegate这个类。
		
		BeanDefinitionParserDelegate：实际就是一个代理，一个中间层。其可以通过命名空间获取对应Handler，处理都是这些handler。

	
	传输类：
		XmlReaderContext
			属性：
				XmlBeanDefinitionReader reader;
				NamespaceHandlerResolver namespaceHandlerResolver; 用于通过命名空间获取对应的Handler。
		
		
		ParserContext：
			属性：
				XmlReaderContext readerContext;
				BeanDefinitionParserDelegate delegate;
				BeanDefinition containingBeanDefinition;
				Stack<ComponentDefinition> containingComponents = new Stack<ComponentDefinition>();


二、源码
			
/**
 * 获取刷新的BeanFactory
 */
location：AbstractApplicationContext
protected ConfigurableListableBeanFactory obtainFreshBeanFactory() {
	refreshBeanFactory();
	
	// 获取上一步初始化过的BeanFactory。
	ConfigurableListableBeanFactory beanFactory = getBeanFactory();
	if (logger.isDebugEnabled()) {
		logger.debug("Bean factory for " + getDisplayName() + ": " + beanFactory);
	}
	return beanFactory;
}

/**
 * 刷新BeanFactory
 * 什么情况下回去找GenericApplicationContext??
 */
location：AbstractRefreshableApplicationContext
protected final void refreshBeanFactory() throws BeansException {
	// 判断是否已经存在BeanFactory
	if (hasBeanFactory()) {
		// 如果已经存在BeanFactory销毁Bean并关闭BeanFactory。
		destroyBeans();
		closeBeanFactory();
	}
	
	try {
		// 创建【DefaultListableBeanFactory】实例。
		DefaultListableBeanFactory beanFactory = createBeanFactory();
		// 设置BeanFactory的ID
		beanFactory.setSerializationId(getId());
		
		// 设置allowBeanDefinitionOverriding（是否允许覆盖注册）和allowCircularReferences（是否允许循环引用）
		customizeBeanFactory(beanFactory);
		
		// 加载BeanDefinition【这是一个很重要的过程】
		loadBeanDefinitions(beanFactory);
		
		// 把初始化成功的BeanFactory复制给AbstractApplicationContext中变量BeanFactory。
		synchronized (this.beanFactoryMonitor) {
			this.beanFactory = beanFactory;
		}
	} catch (IOException ex) {
		throw new ApplicationContextException("I/O error parsing bean definition source for " + getDisplayName(), ex);
	}
}

/**
 * 创建DefaultListableBeanFactory的实例，
 */
location：DefaultListableBeanFactory
protected DefaultListableBeanFactory createBeanFactory() {
	// 注意DefaultListableBeanFactory对象的初始化过程。初始化getInternalParentBeanFactory()为null
	// DefaultListableBeanFactory的初始化过程是什么样的。
	return new DefaultListableBeanFactory(getInternalParentBeanFactory());
}

/**
 * 创建DefaultListableBeanFactory的实例，
 */
location：DefaultListableBeanFactory
protected void customizeBeanFactory(DefaultListableBeanFactory beanFactory) {

	// allowBeanDefinitionOverriding：是否允许覆盖注册。
	if (this.allowBeanDefinitionOverriding != null) {
		beanFactory.setAllowBeanDefinitionOverriding(this.allowBeanDefinitionOverriding);
	}
	
	// allowCircularReferences是否循环应用。
	if (this.allowCircularReferences != null) {
		beanFactory.setAllowCircularReferences(this.allowCircularReferences);
	}
}


#######################################################################################
#                                        加载过程开始                                 #
#######################################################################################

/**
 *	BeanDefinitionReader（接口）
 *			AbstractBeanDefinitionReader
 *						PropertiesBeanDefinitionReader
 *						XmlBeanDefinitionReader
 *						GroovyBeanDefinitionReader
 *
 */
location：XmlWebApplicationContext
protected void loadBeanDefinitions(DefaultListableBeanFactory beanFactory) throws BeansException, IOException {
	/**
	 * 为BeanFactory创建一个新的XmlBeanDefinitionReader实例  ==========    XmlBeanDefinitionReader中包含DefaultListableBeanFactory
	 * XmlBeanDefinitionReader：用于XML Bean Definition。将实际的XML文档读取委托给BeanDefinitionDocumentReader接口的实现。
	 */
	XmlBeanDefinitionReader beanDefinitionReader = new XmlBeanDefinitionReader(beanFactory);

	// 用这个Context资源加载环境配置beanDefinitionReader。getEnvironment是获取XmlWebApplicationContext的环境。
	beanDefinitionReader.setEnvironment(getEnvironment());
	beanDefinitionReader.setResourceLoader(this);
	beanDefinitionReader.setEntityResolver(new ResourceEntityResolver(this));

	// 初始化beanDefinitionReader，允许子类提供自定义初始化的reader然后继续加载实际的beanDefinition ￥可进行拓展￥
	initBeanDefinitionReader(beanDefinitionReader);
	
	// 加载过程BeanDefinition
	loadBeanDefinitions(beanDefinitionReader);
}



/**
 * 加载BeanDefinition
 */
location：XmlWebApplicationContext。
protected void loadBeanDefinitions(XmlBeanDefinitionReader reader) throws IOException {
	// 获取加载的资源。
	String[] configLocations = getConfigLocations();
	
	if (configLocations != null) {
		for (String configLocation : configLocations) {
			reader.loadBeanDefinitions(configLocation);
		}
	}
}	

/**
 * 获取加载资源的路径。
 */
location：AbstractRefreshWebApplicationContext
public String[] getConfigLocations() {
	return super.getConfigLocations();
}
		    ||
			\/

/**
 * configLocations就是web.xml配置的contextConfigLocation参数
 */
location：AbstractRefreshableConfigApplicationContext			
protected String[] getConfigLocations() {
	return (this.configLocations != null ? this.configLocations : getDefaultConfigLocations());
}	


/**
 * 加载过程BeanDefinition
 */
location：AbstractBeanDefinitionReader
public int loadBeanDefinitions(String location) throws BeanDefinitionStoreException {
	return loadBeanDefinitions(location, null);
}	

/**
 *  初始化BeanDefinitionReader把XmlWebApplicationContext赋值给resourceLoader
 */
location：AbstractBeanDefinitionReader
public int loadBeanDefinitions(String location, Set<Resource> actualResources) throws BeanDefinitionStoreException {

	// 获取初始化BeanDefinitionReader的resourceLoader。这里为XmlWebApplicationContext实例。
	ResourceLoader resourceLoader = getResourceLoader();

	if (resourceLoader == null) {
		throw new BeanDefinitionStoreException("Cannot import bean definitions from location [" + location + "]: no ResourceLoader available");
	}

	// 判断是否是ResourcePatternResolver子类，XmlWebApplicationContext是其子类
	if (resourceLoader instanceof ResourcePatternResolver) {
		// Resource pattern matching available.
		try {
			// 获取所有需要加载资源的所有资源路径
			Resource[] resources = ((ResourcePatternResolver) resourceLoader).getResources(location);
			
			// 【重点】loadCount初始化总数。
			int loadCount = loadBeanDefinitions(resources);

			// actualResources是否为null。判断是否处理完成。
			if (actualResources != null) {
				for (Resource resource : resources) {
					actualResources.add(resource);
				}
			}

			if (logger.isDebugEnabled()) {
				logger.debug("Loaded " + loadCount + " bean definitions from location pattern [" + location + "]");
			}
			
			// 返回加载的加载的BeanDefinition的个数。
			return loadCount;
			
		} catch (IOException ex) {
			throw new BeanDefinitionStoreException(
					"Could not resolve bean definition resource pattern [" + location + "]", ex);
		}
	} else {
		// 只能通过绝对URL加载单个资源。
		Resource resource = resourceLoader.getResource(location);
		int loadCount = loadBeanDefinitions(resource);
		
		if (actualResources != null) {
			actualResources.add(resource);
		}
		
		if (logger.isDebugEnabled()) {
			logger.debug("Loaded " + loadCount + " bean definitions from location [" + location + "]");
		}
		
		return loadCount;
	}
}

/**
 *
 */
location：AbstractApplicationContext
public Resource[] getResources(String locationPattern) throws IOException {
	return this.resourcePatternResolver.getResources(locationPattern);
}
			||
			\/

/**
 * 通过路径，加载资源的过程。
 */
location：PathMathingResourcePatternResolver
public Resource[] getResources(String locationPattern) throws IOException {
	Assert.notNull(locationPattern, "Location pattern must not be null");
	// 判断是否是“classpath*：”开头
	if (locationPattern.startsWith(CLASSPATH_ALL_URL_PREFIX)) {
		// 判断是否使用通配符了
		if (getPathMatcher().isPattern(locationPattern.substring(CLASSPATH_ALL_URL_PREFIX.length()))) {
			// 处理
			return findPathMatchingResources(locationPattern);
		} else {
			return findAllClassPathResources(locationPattern.substring(CLASSPATH_ALL_URL_PREFIX.length()));
		}
	} else {
		int prefixEnd = (locationPattern.startsWith("war:") ? locationPattern.indexOf("*/") + 1 : locationPattern.indexOf(":") + 1);
		if (getPathMatcher().isPattern(locationPattern.substring(prefixEnd))) {
			return findPathMatchingResources(locationPattern);
		} else {
			return new Resource[] {getResourceLoader().getResource(locationPattern)};
		}
	}
}

/**
 * 把所有可以匹配的Resource找出来
 */
location：PathMathingResourcePatternResolver
protected Resource[] findPathMatchingResources(String locationPattern) throws IOException {
	// 获取配置文件路径
	String rootDirPath = determineRootDir(locationPattern);
	// 通配符的文件名
	String subPattern = locationPattern.substring(rootDirPath.length());
	// 加载所有资源路径
	Resource[] rootDirResources = getResources(rootDirPath);
	Set<Resource> result = new LinkedHashSet<Resource>(16);
	for (Resource rootDirResource : rootDirResources) {
		// 参数是什么返回什么
		rootDirResource = resolveRootDirResource(rootDirResource);
		// 获取URL
		URL rootDirURL = rootDirResource.getURL();
		
		// 初始化时为null
		if (equinoxResolveMethod != null) {
			if (rootDirURL.getProtocol().startsWith("bundle")) {
				rootDirURL = (URL) ReflectionUtils.invokeMethod(equinoxResolveMethod, null, rootDirURL);
				rootDirResource = new UrlResource(rootDirURL);
			}
		}
		// 不同的处理方式
		if (rootDirURL.getProtocol().startsWith(ResourceUtils.URL_PROTOCOL_VFS)) {
			result.addAll(VfsResourceMatchingDelegate.findMatchingResources(rootDirURL, subPattern, getPathMatcher()));
		} else if (ResourceUtils.isJarURL(rootDirURL) || isJarResource(rootDirResource)) {
			result.addAll(doFindPathMatchingJarResources(rootDirResource, rootDirURL, subPattern));
		} else {
			// 获取所有的匹配的文件
			result.addAll(doFindPathMatchingFileResources(rootDirResource, subPattern));
		}
	}
	
	if (logger.isDebugEnabled()) {
		logger.debug("Resolved location pattern [" + locationPattern + "] to resources " + result);
	}
	
	return result.toArray(new Resource[result.size()]);
}

/**
 * 获取配置文件路径
 */
location：PathMathingResourcePatternResolver
protected String determineRootDir(String location) {
	int prefixEnd = location.indexOf(":") + 1;
	int rootDirEnd = location.length();
	while (rootDirEnd > prefixEnd && getPathMatcher().isPattern(location.substring(prefixEnd, rootDirEnd))) {
		rootDirEnd = location.lastIndexOf('/', rootDirEnd - 2) + 1;
	}
	if (rootDirEnd == 0) {
		rootDirEnd = prefixEnd;
	}
	return location.substring(0, rootDirEnd);
}

/**
 *
 */
location：PathMathingResourcePatternResolver
protected Resource[] findAllClassPathResources(String location) throws IOException {
	String path = location;
	// 判断是否是不是“/”开始的，如果是的话，去除第一个“/”继续执行，所有classpath*:后面写不写“/”没有影响。
	if (path.startsWith("/")) {
		path = path.substring(1);
	}
	// 返回给定路径下的资源集合
	Set<Resource> result = doFindAllClassPathResources(path);
	if (logger.isDebugEnabled()) {
		logger.debug("Resolved classpath location [" + location + "] to resources " + result);
	}
	return result.toArray(new Resource[result.size()]);
}

/**
 *
 */获取所有的给定路径的所有资源。
location：PathMathingResourcePatternResolver
protected Set<Resource> doFindAllClassPathResources(String path) throws IOException {
	Set<Resource> result = new LinkedHashSet<Resource>(16);

	// 获取XmlWebApplicationContext的ClassLoader
	ClassLoader cl = getClassLoader();

	// 根据ClassLoader获取给定更目录下的URL
	Enumeration<URL> resourceUrls = (cl != null ? cl.getResources(path) : ClassLoader.getSystemResources(path));
	while (resourceUrls.hasMoreElements()) {
		URL url = resourceUrls.nextElement();
		result.add(convertClassLoaderURL(url));
	}
	
	if ("".equals(path)) {
		// 上述结果可能不完整，即仅包含文件系统引用。 我们需要指向类路径上的每个jar文件的指针.
		addAllClassLoaderJarRoots(cl, result);
	}
	return result;
}

/**
 * 获取的获取所有的匹配的文件 rootDirResource  subPattern：*.xml
 */
location：
protected Set<Resource> doFindPathMatchingFileResources(Resource rootDirResource, String subPattern) throws IOException {

	File rootDir;
	try {
		rootDir = rootDirResource.getFile().getAbsoluteFile();
	} catch (IOException ex) {
		if (logger.isWarnEnabled()) {
			logger.warn("Cannot search for matching files underneath " + rootDirResource + " because it does not correspond to a directory in the file system", ex);
		}
		return Collections.emptySet();
	}
	return doFindMatchingFileSystemResources(rootDir, subPattern);
}

/**
 *
 */
location：
protected Set<Resource> doFindMatchingFileSystemResources(File rootDir, String subPattern) throws IOException {
	if (logger.isDebugEnabled()) {
		logger.debug("Looking for matching resources in directory tree [" + rootDir.getPath() + "]");
	}
	
	// 获取所有匹配的文件
	Set<File> matchingFiles = retrieveMatchingFiles(rootDir, subPattern);
	Set<Resource> result = new LinkedHashSet<Resource>(matchingFiles.size());
	
	// 封装（转换格式）
	for (File file : matchingFiles) {
		result.add(new FileSystemResource(file));
	}
	return result;
}


/**
 * 通过给定文件路径和通配符，检索匹配的文件
 */
location：
protected Set<File> retrieveMatchingFiles(File rootDir, String pattern) throws IOException {
	// 判断文件是否存在
	if (!rootDir.exists()) {
		if (logger.isDebugEnabled()) {
			logger.debug("Skipping [" + rootDir.getAbsolutePath() + "] because it does not exist");
		}
		return Collections.emptySet();
	}
	
	// 判断可是文件夹
	if (!rootDir.isDirectory()) {
		// Complain louder if it exists but is no directory.
		if (logger.isWarnEnabled()) {
			logger.warn("Skipping [" + rootDir.getAbsolutePath() + "] because it does not denote a directory");
		}
		return Collections.emptySet();
	}
	
	// 判断是否可读
	if (!rootDir.canRead()) {
		if (logger.isWarnEnabled()) {
			logger.warn("Cannot search for matching files underneath directory [" + rootDir.getAbsolutePath() + "] because the application is not allowed to read the directory");
		}
		return Collections.emptySet();
	}
	String fullPattern = StringUtils.replace(rootDir.getAbsolutePath(), File.separator, "/");
	if (!pattern.startsWith("/")) {
		fullPattern += "/";
	}
	// 替换\ 为 / 
	fullPattern = fullPattern + StringUtils.replace(pattern, File.separator, "/");
	Set<File> result = new LinkedHashSet<File>(8);
	// 获取文件夹下的所有匹配的文件
	doRetrieveMatchingFiles(fullPattern, rootDir, result);
	return result;
}

/**
 * 获取给定文件夹下给定文件名的所有文件
 */
location：
protected void doRetrieveMatchingFiles(String fullPattern, File dir, Set<File> result) throws IOException {
	if (logger.isDebugEnabled()) {
		logger.debug("Searching directory [" + dir.getAbsolutePath() + "] for files matching pattern [" + fullPattern + "]");
	}
	// 获取文件夹下的所有文件。
	File[] dirContents = dir.listFiles();
	// 判断是否有文件
	if (dirContents == null) {
		if (logger.isWarnEnabled()) {
			logger.warn("Could not retrieve contents of directory [" + dir.getAbsolutePath() + "]");
		}
		return;
	}
	Arrays.sort(dirContents);
	
	for (File content : dirContents) {
		// 获取路径的字符串并把\ 替换为 /
		String currPath = StringUtils.replace(content.getAbsolutePath(), File.separator, "/");
		// content是否是文件夹 &&  是否匹配
		if (content.isDirectory() && getPathMatcher().matchStart(fullPattern, currPath + "/")) {
			// 是否可读
			if (!content.canRead()) {
				if (logger.isDebugEnabled()) {
					logger.debug("Skipping subdirectory [" + dir.getAbsolutePath() + "] because the application is not allowed to read the directory");
				}
			} else {
				doRetrieveMatchingFiles(fullPattern, content, result);
			}
		}
		// 判断获取的文件是否满足给地的通配符匹配
		if (getPathMatcher().match(fullPattern, currPath)) {
			result.add(content);
		}
	}
}


#############################################################  2-1 loaderBeandefinitions  #############################################################
/**
 *
 */
location：AbstractBeanDefinitionReader
public int loadBeanDefinitions(Resource... resources) throws BeanDefinitionStoreException {
	Assert.notNull(resources, "Resource array must not be null");
	int counter = 0;
	for (Resource resource : resources) {
		counter += loadBeanDefinitions(resource);
	}
	return counter;
}

		
/**
 *
 */
location：XmlBeanDefinitionsReader
public int loadBeanDefinitions(Resource resource) throws BeanDefinitionStoreException {
	return loadBeanDefinitions(new EncodedResource(resource));
}


/**
 * 加载BeanDefinitions的具体步骤
 */
location：XmlBeanDefinitionsReader
public int loadBeanDefinitions(EncodedResource encodedResource) throws BeanDefinitionStoreException {
	Assert.notNull(encodedResource, "EncodedResource must not be null");
	if (logger.isInfoEnabled()) {
		logger.info("Loading XML bean definitions from " + encodedResource.getResource());
	}

	// 初始化操作为null
	Set<EncodedResource> currentResources = this.resourcesCurrentlyBeingLoaded.get();
	if (currentResources == null) {
		currentResources = new HashSet<EncodedResource>(4);
		this.resourcesCurrentlyBeingLoaded.set(currentResources);
	}
	
	if (!currentResources.add(encodedResource)) {
		throw new BeanDefinitionStoreException("Detected cyclic loading of " + encodedResource + " - check your import definitions!");
	}
	
	
	try {
		// 获取对应文件的输入流
		InputStream inputStream = encodedResource.getResource().getInputStream();
		try {
			InputSource inputSource = new InputSource(inputStream);
			
			// 对应的Resources是否设置编码格式。
			if (encodedResource.getEncoding() != null) {
				inputSource.setEncoding(encodedResource.getEncoding());
			}
			return doLoadBeanDefinitions(inputSource, encodedResource.getResource());
		} finally {
			// 关闭流
			inputStream.close();
		}
	} catch (IOException ex) {
		throw new BeanDefinitionStoreException("IOException parsing XML document from " + encodedResource.getResource(), ex);
	} finally {
		// 从currentResources移除已经处理过的。
		currentResources.remove(encodedResource);
		if (currentResources.isEmpty()) {
			this.resourcesCurrentlyBeingLoaded.remove();
		}
	}
}

// 加载xml中定义的Bean
location：XmlBeanDefinitionsReader
protected int doLoadBeanDefinitions(InputSource inputSource, Resource resource) throws BeanDefinitionStoreException {
	try {
		// 这是一个很繁琐的过程，可以看一下如何解析XML文件的。
		Document doc = doLoadDocument(inputSource, resource);
		
		// 注册BeanDefinitions
		return registerBeanDefinitions(doc, resource);
	} catch (BeanDefinitionStoreException ex) {
		throw ex;
	} catch (SAXParseException ex) {
		throw new XmlBeanDefinitionStoreException(resource.getDescription(), "Line " + ex.getLineNumber() + " in XML document from " + resource + " is invalid", ex);
	} catch (SAXException ex) {
		throw new XmlBeanDefinitionStoreException(resource.getDescription(), "XML document from " + resource + " is invalid", ex);
	} catch (ParserConfigurationException ex) {
		throw new BeanDefinitionStoreException(resource.getDescription(), "Parser configuration exception parsing XML from " + resource, ex);
	} catch (IOException ex) {
		throw new BeanDefinitionStoreException(resource.getDescription(), "IOException parsing XML document from " + resource, ex);
	} catch (Throwable ex) {
		throw new BeanDefinitionStoreException(resource.getDescription(), "Unexpected exception parsing XML document from " + resource, ex);
	}
}

/**
 * 解析XMl过程
 */
protected Document doLoadDocument(InputSource inputSource, Resource resource) throws Exception {
	return this.documentLoader.loadDocument(inputSource, getEntityResolver(), this.errorHandler, getValidationModeForResource(resource), isNamespaceAware());
}


/**
 * 实际加载过程，通过创建DocumentBuilderFactory创建对应DocumentBuilder进行解析对应的XML的输入流。
 */
location：DefaultDocumentLoader
public Document loadDocument(InputSource inputSource, EntityResolver entityResolver, ErrorHandler errorHandler, int validationMode, boolean namespaceAware) throws Exception {

	DocumentBuilderFactory factory = createDocumentBuilderFactory(validationMode, namespaceAware);
	if (logger.isDebugEnabled()) {
		logger.debug("Using JAXP provider [" + factory.getClass().getName() + "]");
	}
	
	// 使用factory创建DocumentBuilder
	DocumentBuilder builder = createDocumentBuilder(factory, entityResolver, errorHandler);
	
	// 把Xml对象解析为Document对象，这是JDK的接口，可以学习一下。
	return builder.parse(inputSource);
}


/**
 * 创建DocumentBuilder并设置属性值。
 */
location：DefaultDocumentLoader
protected DocumentBuilderFactory createDocumentBuilderFactory(int validationMode, boolean namespaceAware) throws ParserConfigurationException {
	
	DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
	
	// 设置生成的解析器是将提供XML命名空间支持,默认为false；【可以看一下JDK的DocumentBuilderFactory】
	factory.setNamespaceAware(namespaceAware);

	// 设置XML验证类型：NONE = 0(表示禁用验证)；AUTO = 1(自动验证,可能在某些特殊字符上堵塞)；
	// 				    DTD = 2(使用DTD验证)；XSD = 3(使用XSD验证,xml schema,有命名空间)
	// 这里validationMode=XSD,在初始化initBeanDefinitionReader()是设置为ture,即为XSD
	if (validationMode != XmlValidationModeDetector.VALIDATION_NONE) {
	
		// 开启验证
		factory.setValidating(true);
		
		if (validationMode == XmlValidationModeDetector.VALIDATION_XSD) {
			// 设置命名空间感知
			factory.setNamespaceAware(true);
			try {
				factory.setAttribute(SCHEMA_LANGUAGE_ATTRIBUTE, XSD_SCHEMA_LANGUAGE);
			} catch (IllegalArgumentException ex) {
				ParserConfigurationException pcex = new ParserConfigurationException("Unable to validate using XSD: Your JAXP provider [" + factory +
						"] does not support XML Schema. Are you running on Java 1.4 with Apache Crimson? " + "Upgrade to Apache Xerces (or Java 1.5) for full XSD support.");
				pcex.initCause(ex);
				throw pcex;
			}
		}
	}

	return factory;
}


/** 
 * 根据某一个.xml文件的封装的Document对象和resource来注册BeanDefinition
 */
location：XmlBeanDefinitionReader
public int registerBeanDefinitions(Document doc, Resource resource) throws BeanDefinitionStoreException {
	/**
	 *********************************************************************************************************************************
	 * 创建BeanDefinitionDocumentReader对象,BeanDefinitionDocumentReaders的实现类实际读取xml文档的接口.
	 * 这里是DefaultBeanDefinitionDocumentReader实例对象。
	 *
	 **********************************************************************************************************************************
	BeanDefinitionDocumentReader documentReader = createBeanDefinitionDocumentReader();
	
	// getRegistry获取初始化BeanDefinitionReader是传入的XmlWebApplicationContext。获取已经初始化的BeanDefinition的个数。
	int countBefore = getRegistry().getBeanDefinitionCount();
	
	/**
	 * createReaderContext(resource)：方法很重要：
	 *
	 * registerBeanDefinitions(Document doc, XmlReaderContext readerContext)：这个方法的两个参数很重要。
	 */
	documentReader.registerBeanDefinitions(doc, createReaderContext(resource));
	
	
	return getRegistry().getBeanDefinitionCount() - countBefore;
}

/**
 * 创建BeanDefinitionDocumentReader对象
 */
location：XmlBeanDefinitionReader
protected BeanDefinitionDocumentReader createBeanDefinitionDocumentReader() {	
	// Class.cast(zlass)将Class对象强转为zlass对象表示的对象和接口。this.documentReaderClass = DefaultBeanDefinitionDocumentReader
	// instantiateClass方法使用无参构造函数实例化一个对象。
	return BeanDefinitionDocumentReader.class.cast(BeanUtils.instantiateClass(this.documentReaderClass));
}

// 创建XmlReaderContext
location：XmlBeanDefinitionReader
public XmlReaderContext createReaderContext(Resource resource) {
	return new XmlReaderContext(resource, this.problemReporter, this.eventListener, this.sourceExtractor, this(XmlBeanDefinitionReader), getNamespaceHandlerResolver());
}

// 注册BeanDefinition
location：DefaultBeanDefinitionDocumentReader。
public void registerBeanDefinitions(Document doc, XmlReaderContext readerContext) {
	// 【【XmlReaderContext readerContext包含XmlBeanDefinitionReader。XmlBeanDefinitionReader中包含DefaultListableBeanFactory】】
	this.readerContext = readerContext;
	logger.debug("Loading bean definitions");
	Element root = doc.getDocumentElement();
	doRegisterBeanDefinitions(root);
}


/**
 *
 */
location：DefaultBeanDefinitionDocumentReader。
protected void doRegisterBeanDefinitions(Element root) {
	//任何<beans>标签中的元素都将递归调用这个方法。为了传播和保留当前的<beans> default-*属性。请跟踪当前(父)
	// delegate，该委托可以为null。通过应用父委托创建一个新的子delegate为了回退，然后最终将this.dalegate回退为原始父类
	// 引用。此行为模拟了一堆代理，而实际上并不需要一个代理。 BeanDefinitionParserDelegate parent = this.delegate;

	
	
	// BeanDefinitionParserDelegate有状态代理类用于解析XML bean的定义。
	BeanDefinitionParserDelegate parent = this.delegate;
	this.delegate = createDelegate(getReaderContext(), root, parent);

	if (this.delegate.isDefaultNamespace(root)) {
		
		// profile设置用于设置环境切换。 
		String profileSpec = root.getAttribute(PROFILE_ATTRIBUTE);
		
		// 是否配合了profile。
		if (StringUtils.hasText(profileSpec)) {
			String[] specifiedProfiles = StringUtils.tokenizeToStringArray(profileSpec, BeanDefinitionParserDelegate.MULTI_VALUE_ATTRIBUTE_DELIMITERS);
			if (!getReaderContext().getEnvironment().acceptsProfiles(specifiedProfiles)) {
				if (logger.isInfoEnabled()) {
					logger.info("Skipped XML bean definition file due to specified profiles [" + profileSpec + "] not matching: " + getReaderContext().getResource());
				}
				return;
			}
		}
	}

	// 前置没有做任何处理。
	preProcessXml(root);
	
	/**
	 * 解析处理。
	 */
	parseBeanDefinitions(root, this.delegate);
	
	
	
	
	// 后置处理。
	postProcessXml(root);

	this.delegate = parent;
}

// 创建BeanDefinitionParserDelegate。
location：BeanDefinitionParserDelegate
protected BeanDefinitionParserDelegate createDelegate(XmlReaderContext readerContext, Element root, BeanDefinitionParserDelegate parentDelegate) {
	
	BeanDefinitionParserDelegate delegate = new BeanDefinitionParserDelegate(readerContext);
	delegate.initDefaults(root, parentDelegate);
	return delegate;
}

// 初始化默认的lazy-init，autowire，依赖性检查设置，init-method，destroy-method和merge设置。 如果未在本地显式设置默认值，则通过回退到给定父级来支持嵌套的“beans”元素用例。
location：BeanDefinitionParserDelegate
public void initDefaults(Element root, BeanDefinitionParserDelegate parent) {
	populateDefaults(this.defaults, (parent != null ? parent.defaults : null), root);
	this.readerContext.fireDefaultsRegistered(this.defaults);
}

protected void populateDefaults(DocumentDefaultsDefinition defaults, DocumentDefaultsDefinition parentDefaults, Element root) {
	// DEFAULT_LAZY_INIT_ATTRIBUTE = default-lazy-init 
	String lazyInit = root.getAttribute(DEFAULT_LAZY_INIT_ATTRIBUTE);
	
	// DEFAULT_VALUE = default;
	if (DEFAULT_VALUE.equals(lazyInit)) {
		// Potentially inherited from outer <beans> sections, otherwise falling back to false.
		lazyInit = (parentDefaults != null ? parentDefaults.getLazyInit() : FALSE_VALUE);
	}
	
	// 设置懒加载为 false。XmlWebApplicationContext初始化加载，ClassPathXMLApplicationContext默认为加载为懒加载。
	defaults.setLazyInit(lazyInit);

	String merge = root.getAttribute(DEFAULT_MERGE_ATTRIBUTE);
	if (DEFAULT_VALUE.equals(merge)) {
		// 可能继承自外部<beans>部分，否则会回落为false。
		merge = (parentDefaults != null ? parentDefaults.getMerge() : FALSE_VALUE);
	}
	defaults.setMerge(merge);

	String autowire = root.getAttribute(DEFAULT_AUTOWIRE_ATTRIBUTE);
	if (DEFAULT_VALUE.equals(autowire)) {
		// 可能从外部<beans>部分继承，否则回落到'否'。
		autowire = (parentDefaults != null ? parentDefaults.getAutowire() : AUTOWIRE_NO_VALUE);
	}

	defaults.setAutowire(autowire);

	// 不要回退到parentDefaults进行依赖检查，因为从3.0开始不再支持<beans>。 因此，没有嵌套的<beans>需要回退到它。
	defaults.setDependencyCheck(root.getAttribute(DEFAULT_DEPENDENCY_CHECK_ATTRIBUTE));

	if (root.hasAttribute(DEFAULT_AUTOWIRE_CANDIDATES_ATTRIBUTE)) {
		defaults.setAutowireCandidates(root.getAttribute(DEFAULT_AUTOWIRE_CANDIDATES_ATTRIBUTE));
	} else if (parentDefaults != null) {
		defaults.setAutowireCandidates(parentDefaults.getAutowireCandidates());
	}

	if (root.hasAttribute(DEFAULT_INIT_METHOD_ATTRIBUTE)) {
		defaults.setInitMethod(root.getAttribute(DEFAULT_INIT_METHOD_ATTRIBUTE));
	} else if (parentDefaults != null) {
		defaults.setInitMethod(parentDefaults.getInitMethod());
	}

	if (root.hasAttribute(DEFAULT_DESTROY_METHOD_ATTRIBUTE)) {
		defaults.setDestroyMethod(root.getAttribute(DEFAULT_DESTROY_METHOD_ATTRIBUTE));
	} else if (parentDefaults != null) {
		defaults.setDestroyMethod(parentDefaults.getDestroyMethod());
	}

	defaults.setSource(this.readerContext.extractSource(root));
}








