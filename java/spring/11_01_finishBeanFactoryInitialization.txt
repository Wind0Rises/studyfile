【spring 4.3.12】


refresh()：第十一部分
	finishBeanFactoryInitialization ：这个过程是Bean初始化过程。（前提是这个Bean是单例模式，并且不是懒加载的）

	
	
问题：
	1、方法覆盖。
	2、初始化使用的构造函数。

	
零、流程

	主线：1、实例化之前的操作   
		  2、构造函数的选择    
		  3、实例化    
		  4、实例化之后的操作      
		  5、设置属性     
		  6、各种aware类    
		  7、BeanPostProcessor的before方法
		  8、InitializingBean的afterPropertiesSet()方法  
		  9、init-method的操作  
		  10、BeanPostProcessor的after方法
		  
	/***
	 * BeanPostProcessor
	 *			 InstantiationAwareBeanPostProcessor
	 *							SmartInstantiationAwareBeanPostProcessor
	 *
	 */

	需要整理。
		createBean(..)方法中。
			1、获取对应的Bean Definition对应的Class对象。
			2、调用InstantiationAwareBeanPostProcessor的postProcessBeforeInstantiation(..)方法。
			
		doCreateBean(..)方法中。
			3、调用SmartInstantiationAwareBeanPostProcessor的determineCandidateConstructors(..)方法，选择合适的构造函数。
			4、构建BeanWrapper实例，在BeanWrapper中有对应的Bean实例，在这里初始化Bean，一般通过Cglib获取实例。
			5、调用MergedBeanDefinitionPostProcessor的postProcessMergedBeanDefinition(..)方法。
			
	2-6		6、调用InstantiationAwareBeanPostProcessor的postProcessAfterInstantiation(..)：方法。
			7、调用InstantiationAwareBeanPostProcessor的postProcessPropertyValues(...)方法。
			
			
			8、设置Bean的属性值，通过<propretity>标签或者@Value注解设置的操作。
			
			9、如果该Bean是实现了一些Aware接口，调用对应的Aware的方法。BeanNameAware --> BeanClassLoaderAware --> BeanFactoryAware	【只有实现了对应Aware接口才会调用】
			
			10、调用SmartInstantiationAwareBeanPostProcessor类的getEarlyBeanReference()方法。
			
			11、调用BeanPostProcessor对应的postProcessBeforeInitialization(..)方法。												【BeanPostProcessor是每一个Bean都会调用】
			12、调用InitializingBean的afterPropertiesSet()方法。																	【只有实现了InitializingBean的Bean才会调用。】
			13、调用init-method属性设置的初始化方法。
			14、调用BeanPostProcessor对应的postProcessAfterInitializing(..)方法。													【BeanPostProcessor是每一个Bean都会调用】
	
	
	
一、重要的类
	InstantiationAwareBeanPostProcessor：
	
	MergedBeanDefinitionPostProcessor：
	
	
	
二、源码	
/**
 * 初始化这个context的beanFactroy，初始化所有剩余的单例Bean。
 */
location：AbstractApplicationContext
protected void finishBeanFactoryInitialization(ConfigurableListableBeanFactory beanFactory) {

	/**
	 * 判断是否包含：conversionService对应的Bean。【CONVERSION_SERVICE_BEAN_NAME="conversionService"】
	 * 为此上下文初始化转换服务。
	 */
	if (beanFactory.containsBean(CONVERSION_SERVICE_BEAN_NAME) && beanFactory.isTypeMatch(CONVERSION_SERVICE_BEAN_NAME, ConversionService.class)) {
		beanFactory.setConversionService(beanFactory.getBean(CONVERSION_SERVICE_BEAN_NAME, ConversionService.class));
	}

	// 如果之前没有注册bean后处理器（例如PropertyPlaceholderConfigurer bean），则注册默认的嵌入值解析器：此时主要用于注释属性值的解析。
	if (!beanFactory.hasEmbeddedValueResolver()) {
		beanFactory.addEmbeddedValueResolver(new StringValueResolver() {
			@Override
			public String resolveStringValue(String strVal) {
				return getEnvironment().resolvePlaceholders(strVal);
			}
		});
	}

	// 从BeanFactory中通过类型获取LoadTimeWeaverAware类型对应的BeanName，并进行初始化，以便尽早的注册其转换器。
	String[] weaverAwareNames = beanFactory.getBeanNamesForType(LoadTimeWeaverAware.class, false, false);
	for (String weaverAwareName : weaverAwareNames) {
		getBean(weaverAwareName);
	}

	// 停止使用临时ClassLoader进行类型匹配。
	beanFactory.setTempClassLoader(null);

	// 允许缓存所有bean definition metadata，不期望在对bean definition metadata数据进行修改。
	beanFactory.freezeConfiguration();

	// 初始化单例且非懒加载的Bean
	beanFactory.preInstantiateSingletons();
}


##################################################################################################################################################
################################    						 getBean()注册    						  ############################################
##################################################################################################################################################

location：AbstractApplicationContext
public Object getBean(String name) throws BeansException {
	// 判断Context是否关闭和是否已经refreshed
	assertBeanFactoryActive();
	
	return getBeanFactory().getBean(name);
}

/**
 * 判断BeanFactory是否存活。
 */ 
location：AbstractApplicationContext
protected void assertBeanFactoryActive() {
	if (!this.active.get()) {
		if (this.closed.get()) {
			throw new IllegalStateException(getDisplayName() + " has been closed already");
		}
		else {
			throw new IllegalStateException(getDisplayName() + " has not been refreshed yet");
		}
	}
}


####################################################################################################
################################     单例并且不是懒加载的      #####################################
####################################################################################################
/**
 * 确保所有非懒加载的单例bena被初始化
 */
location：DefaultListableBeanFactory
public void preInstantiateSingletons() throws BeansException {

	if (this.logger.isDebugEnabled()) {
		this.logger.debug("Pre-instantiating singletons in " + this);
	}

	// beanDefinitionNames这个是一个BeanDefinition的名称，
	List<String> beanNames = new ArrayList<String>(this.beanDefinitionNames);

	// 触发所有非惰性单例bean的初始化
	for (String beanName : beanNames) {
	
		// 
		RootBeanDefinition bd = getMergedLocalBeanDefinition(beanName);
		
		//（进入的）非抽象的 && 是单例  && 不是懒加载
		if (!bd.isAbstract() && bd.isSingleton() && !bd.isLazyInit()) {
			
			// 判断是否是FactoryBean
			if (isFactoryBean(beanName)) {
				// 获取对应的BeanFactory。
				final FactoryBean<?> factory = (FactoryBean<?>) getBean(FACTORY_BEAN_PREFIX + beanName);
				boolean isEagerInit;
				
				if (System.getSecurityManager() != null && factory instanceof SmartFactoryBean) {
					isEagerInit = AccessController.doPrivileged(new PrivilegedAction<Boolean>() {
						@Override
						public Boolean run() {
							return ((SmartFactoryBean<?>) factory).isEagerInit();
						}
					}, getAccessControlContext());
				} else {
					isEagerInit = (factory instanceof SmartFactoryBean && ((SmartFactoryBean<?>) factory).isEagerInit());
				}
				
				if (isEagerInit) {
					// ##############################################
					// #					核心流程				#
					// ##############################################
					getBean(beanName);
				}
				
			} else {
				// ##############################################
				// #					核心流程				#
				// ##############################################
				getBean(beanName);
			}
		}
	}

	// Trigger post-initialization callback for all applicable beans...
	
	for (String beanName : beanNames) {
		// 
		Object singletonInstance = getSingleton(beanName);
		if (singletonInstance instanceof SmartInitializingSingleton) {
			final SmartInitializingSingleton smartSingleton = (SmartInitializingSingleton) singletonInstance;
			if (System.getSecurityManager() != null) {
				AccessController.doPrivileged(new PrivilegedAction<Object>() {
					@Override
					public Object run() {
						smartSingleton.afterSingletonsInstantiated();
						return null;
					}
				}, getAccessControlContext());
			} else {
				smartSingleton.afterSingletonsInstantiated();
			}
		}
	}
}


/**
 * 获取Bean。
 */ 
location：AbstractBeanFactory
public Object getBean(String name) throws BeansException {
	return doGetBean(name, null, null, false);
}



/**
 * 获取Bean。
 */ 
location：AbstractBeanFactory
protected <T> T doGetBean(final String name, final Class<T> requiredType, final Object[] args, boolean typeCheckOnly) throws BeansException {

	final String beanName = transformedBeanName(name);
	Object bean;

	// 从已经注册的单例缓存中获取对应的实例对象。
	Object sharedInstance = getSingleton(beanName);
	
	if (sharedInstance != null && args == null) {
		if (logger.isDebugEnabled()) {
			// 当前的单例对象是否正常创建中。
			if (isSingletonCurrentlyInCreation(beanName)) {
				logger.debug("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
			} else {
				logger.debug("Returning cached instance of singleton bean '" + beanName + "'");
			}
		}
		// 
		bean = getObjectForBeanInstance(sharedInstance, name, beanName, null);
		
		
	/**
	 * 假设循环依赖的时候，如果我们已经开始在当前线程中创建此bean实例，但是还没有创建完成，
	 * 则失败；例如此时是A依赖于B，但是B不依赖于A，B也没有任何属性依赖于A，则不存在循环依赖，那么无论B初始化，未初始化都不会有以下情况。
	 * 但是如果B依赖于A，A在获取依赖的Bean是激活创建B的方法，那么B创建过程中就会出现以下情况。就会出现循环依赖错误。
	 * 如果A，B 是单例的并且A的构造函数不包含B，B的构造函数不包含A，spring还是可以通过提前暴露实例地址处理这种依赖，但是其它情况spring也无能为力了。循环依赖也是一个大问题。。。
	 */	
	} else {  
		// 判断给定的beanName的Bean是否正在创建。
		if (isPrototypeCurrentlyInCreation(beanName)) {
			throw new BeanCurrentlyInCreationException(beanName);
		}
		

		/** 
		 * 检查Bean Definition是否存在于这个BeanFactory中。
		 * 获取父BeanFactory。
		 */
		BeanFactory parentBeanFactory = getParentBeanFactory();
		
		
		/**
		 * 父BeanFactory不为null【并且】并且BeanDefinition集合中不包含这个BeanName。
		 * 不存在的Bean Definition在父Bean Factory查找，
		 */
		if (parentBeanFactory != null && !containsBeanDefinition(beanName)) {
			String nameToLookup = originalBeanName(name);
			if (args != null) {
				return (T) parentBeanFactory.getBean(nameToLookup, args);
			} else {
				return parentBeanFactory.getBean(nameToLookup, requiredType);
			}
		}

		/**
		 * typeCheckOnly是否要类型检查。
		 */
		if (!typeCheckOnly) {
			// 把给定beanName放入到以创建的Bean集合中。
			markBeanAsCreated(beanName);
		}

		try {
			// 获取对应的BeanDefinition
			final RootBeanDefinition mbd = getMergedLocalBeanDefinition(beanName);
			
			
			/**
			 * 检查给定的beanName。只是检查是否是抽象的？
			 */
			checkMergedBeanDefinition(mbd, beanName, args);


			/**
			 * 获取给定的Bean的依赖。
			 * 依赖的操作：1、判断是否循环依赖。
			 * 			   2、注册依赖关系。
			 */ 
			String[] dependsOn = mbd.getDependsOn();
			if (dependsOn != null) {
				for (String dep : dependsOn) {
					// 判断是依赖
					if (isDependent(beanName, dep)) {
						throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Circular depends-on relationship between '" + beanName + "' and '" + dep + "'");
					}
					
					// 注册依赖的Bean Definition。
					registerDependentBean(dep, beanName);
					
					// 进行递归操作初始化。
					getBean(dep);
				}
			}

			
			// ☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆
			// ☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆  创建Bean的实例    ☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆
			// ☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆
		
			
			// 判断作用域是否是单例。
			if (mbd.isSingleton()) {
				sharedInstance = getSingleton(beanName, new ObjectFactory<Object>() {
					@Override
					public Object getObject() throws BeansException {
						try {
							return createBean(beanName, mbd, args);
						} catch (BeansException ex) {
							destroySingleton(beanName);
							throw ex;
						}
					}
				});
				
				bean = getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
				
			// 作用域是原型模式。
			} else if (mbd.isPrototype()) {
				Object prototypeInstance = null;
				try {
					beforePrototypeCreation(beanName);
					prototypeInstance = createBean(beanName, mbd, args);
				} finally {
					afterPrototypeCreation(beanName);
				}
				
				bean = getObjectForBeanInstance(prototypeInstance, name, beanName, mbd);
				
				
			// 作用域是其他的。（request、session、global session）
			} else {
				String scopeName = mbd.getScope();
				final Scope scope = this.scopes.get(scopeName);
				if (scope == null) {
					throw new IllegalStateException("No Scope registered for scope name '" + scopeName + "'");
				}
				
				try {
					Object scopedInstance = scope.get(beanName, new ObjectFactory<Object>() {
						@Override
						public Object getObject() throws BeansException {
							beforePrototypeCreation(beanName);
							try {
								return createBean(beanName, mbd, args);
							}
							finally {
								afterPrototypeCreation(beanName);
							}
						}
					});
					
					bean = getObjectForBeanInstance(scopedInstance, name, beanName, mbd);
					
				} catch (IllegalStateException ex) {
					throw new BeanCreationException(beanName, "Scope '" + scopeName + "' is not active for the current thread; consider " + "defining a scoped proxy for this bean if you intend to refer to it from a singleton",ex);
				}
			}
		} catch (BeansException ex) {
			cleanupAfterBeanCreationFailure(beanName);
			throw ex;
		}
	}

	if (requiredType != null && bean != null && !requiredType.isAssignableFrom(bean.getClass())) {
		try {
			return getTypeConverter().convertIfNecessary(bean, requiredType);
		} catch (TypeMismatchException ex) {
			if (logger.isDebugEnabled()) {
				logger.debug("Failed to convert bean '" + name + "' to required type '" + ClassUtils.getQualifiedName(requiredType) + "'", ex);
			}
			throw new BeanNotOfRequiredTypeException(name, requiredType, bean.getClass());
		}
	}
	
	return (T) bean;
}

#################################################
#        	  01、Bean Name 转换	     		#
#################################################

/**
 * 返回Bean名称，必要时删除工厂取消引用前缀。，并将别名解析为规范名称。
 */
location：
protected String transformedBeanName(String name) {
	return canonicalName(BeanFactoryUtils.transformedBeanName(name));
}


/**
 * 返回一个真实的Bean Name，删除工厂取消引用前缀。
 */
location：BeanFactoryUtils
public static String transformedBeanName(String name) {
	Assert.notNull(name, "'name' must not be null");
	String beanName = name;
	
	// FACTORY_BEAN_PREFIX="&"
	while (beanName.startsWith(BeanFactory.FACTORY_BEAN_PREFIX)) {
		beanName = beanName.substring(BeanFactory.FACTORY_BEAN_PREFIX.length());
	}
	return beanName;
}


/**
 * 确定原始名称，将别名解析为规范名称。
 */
location：BeanFactoryUtils
public String canonicalName(String name) {
	String canonicalName = name;
	
	String resolvedName;
	do {
		resolvedName = this.aliasMap.get(canonicalName);
		if (resolvedName != null) {
			canonicalName = resolvedName;
		}
	}
	while (resolvedName != null);
	return canonicalName;
}

/**
 * 确定原始bean名称，将本地定义的别名解析为规范名称。
 */
location：AbstractBeanFactory
protected String originalBeanName(String name) {

	String beanName = transformedBeanName(name);
	
	// FACTORY_BEAN_PREFIX = "&"
	if (name.startsWith(FACTORY_BEAN_PREFIX)) {
		beanName = FACTORY_BEAN_PREFIX + beanName;
	}
	return beanName;
}


#################################################
#        	  02、Bean Name 转换	     		#
#################################################
/**
 *
 */
location：AbstractBeanFactory
protected boolean isPrototypeCurrentlyInCreation(String beanName) {
	/** 
	 * ThreadLocal<Object> prototypesCurrentlyInCreation = new NamedThreadLocal<Object>("Prototype beans currently in creation");
	 * 当前正在创建的bean的名称。
	 */
	Object curVal = this.prototypesCurrentlyInCreation.get();
	return (curVal != null && (curVal.equals(beanName) || (curVal instanceof Set && ((Set<?>) curVal).contains(beanName))));
}


/**
 * 把给定的Bean放入已经创建的Bean集合中。
 */
location：AbstractBeanFactory
protected void markBeanAsCreated(String beanName) {
	
	// 判断已经创建的Bean集合中是否包好给定的BeanName。
	if (!this.alreadyCreated.contains(beanName)) {
	
		// 同步操作：再次判断，并把给定beanName放入到已经创建的Bean的集合中。
		synchronized (this.mergedBeanDefinitions) {
			if (!this.alreadyCreated.contains(beanName)) {
				clearMergedBeanDefinition(beanName);
				this.alreadyCreated.add(beanName);
			}
		}
	}
}

#################################################
#         03、获取MergedBeanDefinition	   		#
#################################################
/**
 * 
 */
location：AbstractBeanFactory
protected RootBeanDefinition getMergedLocalBeanDefinition(String beanName) throws BeansException {
	
	// 检查mergedBeanDefinitions是否存在给定的Bean Definition，如果存在
	RootBeanDefinition mbd = this.mergedBeanDefinitions.get(beanName);
	
	if (mbd != null) {
		return mbd;
	}
	
	// getBeanDefinition(..)：通过给定的名称获取Bean Definition。
	return getMergedBeanDefinition(beanName, getBeanDefinition(beanName));
}

/**
 * 
 */
location：AbstractBeanFactory
protected RootBeanDefinition getMergedBeanDefinition(String beanName, BeanDefinition bd) throws BeanDefinitionStoreException {
	return getMergedBeanDefinition(beanName, bd, null);
}


/**
 * 
 * 注意其返回的还是一个RootBeanDefinition。
 * 合并Bean Definition。
 *
 */
location：AbstractBeanFactory
protected RootBeanDefinition getMergedBeanDefinition(String beanName, BeanDefinition bd, BeanDefinition containingBd) throws BeanDefinitionStoreException {
	
	synchronized (this.mergedBeanDefinitions) {
		
		/**
		 * mergedBeanDefinitions：一个map保存已经merge（合并）的Bean Definition
		 */
		RootBeanDefinition mbd = null;
		if (containingBd == null) {
			mbd = this.mergedBeanDefinitions.get(beanName);
		}

		/**
		 * mergedBeanDefinitions不存在，所有说明该Bean Definition没有合并过，需要进行合并操作。
		 */
		if (mbd == null) { 
			/**
			 * 判断父Bean Definition是否存在，如果不存在，进行一些列操作。
			 */
			if (bd.getParentName() == null) {
				if (bd instanceof RootBeanDefinition) {
					mbd = ((RootBeanDefinition) bd).cloneBeanDefinition();
				} else {
					mbd = new RootBeanDefinition(bd);
				}
				
			/**
			 * 如果父Bean Definition存在的。
			 */
			} else {
				BeanDefinition pbd;
				
				try {
				
					/**
					 * 判断父Bean Name和本Bean Name是否是同一个。
					 * 	
					 */
					String parentBeanName = transformedBeanName(bd.getParentName());
					if (!beanName.equals(parentBeanName)) {
						// 获取要合并的Bean Definition，
						pbd = getMergedBeanDefinition(parentBeanName);
						
					
					/**
					 * TODO:
					 */
					} else {
						BeanFactory parent = getParentBeanFactory();
						if (parent instanceof ConfigurableBeanFactory) {
							pbd = ((ConfigurableBeanFactory) parent).getMergedBeanDefinition(parentBeanName);
						} else {
							throw new NoSuchBeanDefinitionException(parentBeanName, "Parent name '" + parentBeanName + "' is equal to bean name '" + beanName + "': cannot be resolved without an AbstractBeanFactory parent");
						}
					}
				} catch (NoSuchBeanDefinitionException ex) {
					throw new BeanDefinitionStoreException(bd.getResourceDescription(), beanName, "Could not resolve parent bean definition '" + bd.getParentName() + "'", ex);
				}
				
				/**
				 * 构建父Bean Definition，
				 */
				mbd = new RootBeanDefinition(pbd);
				
				/**
				 * 用子Bean Definition覆盖刚刚创建的父Bean Definition，并把父Bean Definition返回。
				 */
				mbd.overrideFrom(bd);
			}

			// 设置作用域。【默认为：singleton】
			if (!StringUtils.hasLength(mbd.getScope())) {
				mbd.setScope(RootBeanDefinition.SCOPE_SINGLETON);
			}

			// 
			if (containingBd != null && !containingBd.isSingleton() && mbd.isSingleton()) {
				mbd.setScope(containingBd.getScope());
			}
			
			// 缓存已经合并的Bean Definition到对应的缓存中。
			if (containingBd == null && isCacheBeanMetadata()) {
				this.mergedBeanDefinitions.put(beanName, mbd);
			}
		}
		return mbd;
	}
}


/**
 *
 *
 */
location：AbstractBeanFactory
public BeanDefinition getMergedBeanDefinition(String name) throws BeansException {

	// 获取Bean的名称
	String beanName = transformedBeanName(name);

	if (!containsBeanDefinition(beanName) && getParentBeanFactory() instanceof ConfigurableBeanFactory) {
		return ((ConfigurableBeanFactory) getParentBeanFactory()).getMergedBeanDefinition(beanName);
	}
	
	return getMergedLocalBeanDefinition(beanName);
}

/**
 * 
 * 
 */
location：AbstractBeanFactory
protected RootBeanDefinition getMergedLocalBeanDefinition(String beanName) throws BeansException {
	RootBeanDefinition mbd = this.mergedBeanDefinitions.get(beanName);
	
	if (mbd != null) {
		return mbd;
	}
	return getMergedBeanDefinition(beanName, getBeanDefinition(beanName));
}



/**
 * 使用other覆盖this的Bean Definition。
 */
location：AbstractBeanDefinition
public void overrideFrom(BeanDefinition other) {
	if (StringUtils.hasLength(other.getBeanClassName())) {
		setBeanClassName(other.getBeanClassName());
	}
	if (StringUtils.hasLength(other.getScope())) {
		setScope(other.getScope());
	}
	setAbstract(other.isAbstract());
	setLazyInit(other.isLazyInit());
	if (StringUtils.hasLength(other.getFactoryBeanName())) {
		setFactoryBeanName(other.getFactoryBeanName());
	}
	if (StringUtils.hasLength(other.getFactoryMethodName())) {
		setFactoryMethodName(other.getFactoryMethodName());
	}
	getConstructorArgumentValues().addArgumentValues(other.getConstructorArgumentValues());
	getPropertyValues().addPropertyValues(other.getPropertyValues());
	setRole(other.getRole());
	setSource(other.getSource());
	copyAttributesFrom(other);

	if (other instanceof AbstractBeanDefinition) {
		AbstractBeanDefinition otherAbd = (AbstractBeanDefinition) other;
		if (otherAbd.hasBeanClass()) {
			setBeanClass(otherAbd.getBeanClass());
		}
		setAutowireMode(otherAbd.getAutowireMode());
		setDependencyCheck(otherAbd.getDependencyCheck());
		setDependsOn(otherAbd.getDependsOn());
		setAutowireCandidate(otherAbd.isAutowireCandidate());
		setPrimary(otherAbd.isPrimary());
		copyQualifiersFrom(otherAbd);
		setNonPublicAccessAllowed(otherAbd.isNonPublicAccessAllowed());
		setLenientConstructorResolution(otherAbd.isLenientConstructorResolution());
		getMethodOverrides().addOverrides(otherAbd.getMethodOverrides());
		if (StringUtils.hasLength(otherAbd.getInitMethodName())) {
			setInitMethodName(otherAbd.getInitMethodName());
			setEnforceInitMethod(otherAbd.isEnforceInitMethod());
		}
		if (otherAbd.getDestroyMethodName() != null) {
			setDestroyMethodName(otherAbd.getDestroyMethodName());
			setEnforceDestroyMethod(otherAbd.isEnforceDestroyMethod());
		}
		setSynthetic(otherAbd.isSynthetic());
		setResource(otherAbd.getResource());
	} else {
		setResourceDescription(other.getResourceDescription());
	}
}



#################################################
#         04、判断一个Bean是否依赖另一个Bean    #
#             处理Bean Definition的依赖问题		#
#################################################
/**
 * 判断beanName对应的Bean是否包含dependentBeanName这个bean。
 */
location：DefaultSingletonBeanRegistry
protected boolean isDependent(String beanName, String dependentBeanName) {
	return isDependent(beanName, dependentBeanName, null);
}

/**
 * 判断beanName对应的Bean是否包含dependentBeanName这个bean。
 */
location：DefaultSingletonBeanRegistry
private boolean isDependent(String beanName, String dependentBeanName, Set<String> alreadySeen) {
	
	if (alreadySeen != null && alreadySeen.contains(beanName)) {
		return false;
	}
	
	/**
	 * 获取canonicalName所有的依赖。
	 */
	String canonicalName = canonicalName(beanName);
	Set<String> dependentBeans = this.dependentBeanMap.get(canonicalName);
	
	if (dependentBeans == null) {
		return false;
	}
	
	// 判断是否包含。
	if (dependentBeans.contains(dependentBeanName)) {
		return true;
	}
	
	/**
	 * 判断BeanName对应的Bean的依赖的依赖是否包含dependentBeanName。
	 * 依赖的传递性。
	 */
	for (String transitiveDependency : dependentBeans) {
		if (alreadySeen == null) {
			alreadySeen = new HashSet<String>();
		}
		alreadySeen.add(beanName);
		
		if (isDependent(transitiveDependency, dependentBeanName, alreadySeen)) {
			return true;
		}
	}
	return false;
}


/**
 * 
 */
location：DefaultSingletonBeanRegistry
public void registerDependentBean(String beanName, String dependentBeanName) {

	String canonicalName = canonicalName(beanName);
	Set<String> dependentBeans = this.dependentBeanMap.get(canonicalName);
	
	if (dependentBeans != null && dependentBeans.contains(dependentBeanName)) {
		return;
	}

	// 01、
	synchronized (this.dependentBeanMap) {
		dependentBeans = this.dependentBeanMap.get(canonicalName);
		
		if (dependentBeans == null) {
			dependentBeans = new LinkedHashSet<String>(8);
			this.dependentBeanMap.put(canonicalName, dependentBeans);
		}
		
		dependentBeans.add(dependentBeanName);
	}
	
	// 02、
	synchronized (this.dependenciesForBeanMap) {
		Set<String> dependenciesForBean = this.dependenciesForBeanMap.get(dependentBeanName);
		if (dependenciesForBean == null) {
			dependenciesForBean = new LinkedHashSet<String>(8);
			this.dependenciesForBeanMap.put(dependentBeanName, dependenciesForBean);
		}
		dependenciesForBean.add(canonicalName);
	}
}


#################################################
#         			05、创建实例   		 		#
#################################################
/**
 * 创建单例Bean
 *
 *	new ObjectFactory<Object>() {
 *		@Override
 *		public Object getObject() throws BeansException {
 *			try {
 *				return createBean(beanName, mbd, args);
 *			} catch (BeansException ex) {
 *				destroySingleton(beanName);
 *				throw ex;
 *			}
 *		}
 *	}
 */
location：DefaultSingletonBeanRegistry
public Object getSingleton(String beanName, ObjectFactory<?> singletonFactory) {
	
	Assert.notNull(beanName, "'beanName' must not be null");
	
	/**
	 * singletonObjects：Map<String, Object> 缓存单例兑现。bean name --> bean instance。
	 *
	 *
	 */
	synchronized (this.singletonObjects) {
		
		// 从已经创建的实例中获取给定名称的实例。如果存在，则直接返回，否则构建单例对象。
		Object singletonObject = this.singletonObjects.get(beanName);
		if (singletonObject == null) {
		
			/**
			 * singletonsCurrentlyInDestruction默认为false
			 */
			if (this.singletonsCurrentlyInDestruction) {
				throw new BeanCreationNotAllowedException(beanName, "Singleton bean creation not allowed while singletons of this factory are in destruction " + "(Do not request a bean from a BeanFactory in a destroy method implementation!)");
			}
			
			if (logger.isDebugEnabled()) {
				logger.debug("Creating shared instance of singleton bean '" + beanName + "'");
			}
			
			/**
			 * 就是判断这个beanName对应的Bean是否能够被创建。
			 */
			beforeSingletonCreation(beanName);
			
			
			boolean newSingleton = false;
			boolean recordSuppressedExceptions = (this.suppressedExceptions == null);
			
			
			if (recordSuppressedExceptions) {
				this.suppressedExceptions = new LinkedHashSet<Exception>();
			}
			
			
			try {
			
				/**
				 * 会调用createBean(String beanName, RootBeanDefinition mbd, Object[] args)方法。
				 */
				singletonObject = singletonFactory.getObject();
				
				
				newSingleton = true;
				
				
			} catch (IllegalStateException ex) {
				singletonObject = this.singletonObjects.get(beanName);
				if (singletonObject == null) {
					throw ex;
				}
				
			} catch (BeanCreationException ex) {
				if (recordSuppressedExceptions) {
					for (Exception suppressedException : this.suppressedExceptions) {
						ex.addRelatedCause(suppressedException);
					}
				}
				throw ex;
				
			} finally {
				if (recordSuppressedExceptions) {
					this.suppressedExceptions = null;
				}
				afterSingletonCreation(beanName);
			}
			
			// 新的实例。
			if (newSingleton) {
				addSingleton(beanName, singletonObject);
			}
		}
		return (singletonObject != NULL_OBJECT ? singletonObject : null);
	}
}


/**
 * 就是判断这个beanName对应的Bean是否能够被创建
 */
location：
protected void beforeSingletonCreation(String beanName) {
	/**
	 * inCreationCheckExclusions：要排除创建的集合.
	 * singletonsCurrentlyInCreation：当前真正创建的。
	 */
	if (!this.inCreationCheckExclusions.contains(beanName) && !this.singletonsCurrentlyInCreation.add(beanName)) {
		throw new BeanCurrentlyInCreationException(beanName);
	}
}






/**
 * ☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆
 * ☆          			创建Bean Definition的核心流程						☆
 * ☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆
 * 
 */
location：AbstractAutowireCapableBeanFactory
protected Object createBean(String beanName, RootBeanDefinition mbd, Object[] args) throws BeanCreationException {

	if (logger.isDebugEnabled()) {
		logger.debug("Creating instance of bean '" + beanName + "'");
	}
	
	RootBeanDefinition mbdToUse = mbd;


	/**
	 * 确保此时实际解析了bean类，并在动态解析的Class的情况下克隆bean定义，该类无法存储在共享的合并bean定义中。
	 * 获取BeanDefinition对应的class。
	 */
	Class<?> resolvedClass = resolveBeanClass(mbd, beanName);
	
	
	if (resolvedClass != null && !mbd.hasBeanClass() && mbd.getBeanClassName() != null) {
		mbdToUse = new RootBeanDefinition(mbd);
		mbdToUse.setBeanClass(resolvedClass);
	}

	// 准备方法覆盖。
	try {
		mbdToUse.prepareMethodOverrides();
	} catch (BeanDefinitionValidationException ex) {
		throw new BeanDefinitionStoreException(mbdToUse.getResourceDescription(), beanName, "Validation of method overrides failed", ex);
	}

	
	try {
		/**
		 * 
		 * 		☆：调用InstantiationAwareBeanPostProcessor的postProcessBeforeInstantiation(..)、
		 *					postProcessAfterInstantiation(..)方法
		 */
		Object bean = resolveBeforeInstantiation(beanName, mbdToUse);
		if (bean != null) {
			return bean;
		}
		
		
	} catch (Throwable ex) {
		throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "BeanPostProcessor before instantiation of bean failed", ex);
	}

	
	/**
	 * ☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆
	 * ☆                  请看11_02doCreateBean..						 ☆
	 * ☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆
	 */
	Object beanInstance = doCreateBean(beanName, mbdToUse, args);
	
	
	
	if (logger.isDebugEnabled()) {
		logger.debug("Finished creating instance of bean '" + beanName + "'");
	}
	
	return beanInstance;
}


/**
 * 获取BeanDefinition对应的class。
 *
 */
location：AbstractBeanFactory
protected Class<?> resolveBeanClass(final RootBeanDefinition mbd, String beanName, final Class<?>... typesToMatch) throws CannotLoadBeanClassException {
	try {
	
		// 一般情况这都是有Bean对应的Class。
		if (mbd.hasBeanClass()) {
			return mbd.getBeanClass();
		}
		
		// 判断是否有系统安全管理。
		if (System.getSecurityManager() != null) {
			return AccessController.doPrivileged(new PrivilegedExceptionAction<Class<?>>() {
				@Override
				public Class<?> run() throws Exception {
					return doResolveBeanClass(mbd, typesToMatch);
				}
			}, getAccessControlContext());
		} else {
			return doResolveBeanClass(mbd, typesToMatch);
		}
	} catch (PrivilegedActionException pae) {
		ClassNotFoundException ex = (ClassNotFoundException) pae.getException();
		throw new CannotLoadBeanClassException(mbd.getResourceDescription(), beanName, mbd.getBeanClassName(), ex);
	} catch (ClassNotFoundException ex) {
		throw new CannotLoadBeanClassException(mbd.getResourceDescription(), beanName, mbd.getBeanClassName(), ex);
	} catch (LinkageError ex) {
		throw new CannotLoadBeanClassException(mbd.getResourceDescription(), beanName, mbd.getBeanClassName(), ex);
	}
}


/**
 * 获取BeanDefinition对应的Class对象。
 */
location：AbstractBeanFactory
private Class<?> doResolveBeanClass(RootBeanDefinition mbd, Class<?>... typesToMatch) throws ClassNotFoundException {

	// 获取加载Bean的ClassLoader。
	ClassLoader beanClassLoader = getBeanClassLoader();
	ClassLoader classLoaderToUse = beanClassLoader;
	
	if (!ObjectUtils.isEmpty(typesToMatch)) {
		ClassLoader tempClassLoader = getTempClassLoader();
		if (tempClassLoader != null) {
			classLoaderToUse = tempClassLoader;
			if (tempClassLoader instanceof DecoratingClassLoader) {
				DecoratingClassLoader dcl = (DecoratingClassLoader) tempClassLoader;
				for (Class<?> typeToMatch : typesToMatch) {
					dcl.excludeClass(typeToMatch.getName());
				}
			}
		}
	}
	
	/**
	 * 如果没有BeanClass
	 */
	String className = mbd.getBeanClassName();
	if (className != null) {
		Object evaluated = evaluateBeanDefinitionString(className, mbd);
		if (!className.equals(evaluated)) {
			if (evaluated instanceof Class) {
				return (Class<?>) evaluated;
			} else if (evaluated instanceof String) {
				return ClassUtils.forName((String) evaluated, classLoaderToUse);
			} else {
				throw new IllegalStateException("Invalid class name expression result: " + evaluated);
			}
		}
		if (classLoaderToUse != beanClassLoader) {
			return ClassUtils.forName(className, classLoaderToUse);
		}
	}
	
	return mbd.resolveBeanClass(beanClassLoader);
}


/**
 * 通过加载Bean的ClassLoad获取对应的Class对象。
 */
location：AbstractBeanDefinition
public Class<?> resolveBeanClass(ClassLoader classLoader) throws ClassNotFoundException {
	// 获取这个bean的Class名称。
	String className = getBeanClassName();
	if (className == null) {
		return null;
	}
	
	// 通过加载Bean的ClassLoad获取对应的Class对象。
	Class<?> resolvedClass = ClassUtils.forName(className, classLoader);
	this.beanClass = resolvedClass;
	return resolvedClass;
}



/**
 * 获取对应的Bean Definition对应的Class对象。
 * 然后调用InstantiationAwareBeanPostProcessor的postProcessBeforeInstantiation(..)、postProcessAfterInstantiation(..)方法
 */
location：AbstractAutowireCapableBeanFactory
protected Object resolveBeforeInstantiation(String beanName, RootBeanDefinition mbd) {
	Object bean = null;
	
	if (!Boolean.FALSE.equals(mbd.beforeInstantiationResolved)) {
		if (!mbd.isSynthetic() && hasInstantiationAwareBeanPostProcessors()) {
			
			Class<?> targetType = determineTargetType(beanName, mbd);
			
			if (targetType != null) {
				
				bean = applyBeanPostProcessorsBeforeInstantiation(targetType, beanName);
				
				if (bean != null) {
					bean = applyBeanPostProcessorsAfterInitialization(bean, beanName);
				}
			}
		}
		
		// beforeInstantiationResolved：是RootBeanDefinition的成员属性。指示实例化之前的后处理器已启动
		mbd.beforeInstantiationResolved = (bean != null);
	}
	return bean;
}



/**
 * 确定给定的Bean Definition的对应的目标类型。
 */
location：AbstractAutowireCapableBeanFactory
protected Class<?> determineTargetType(String beanName, RootBeanDefinition mbd, Class<?>... typesToMatch) {
	Class<?> targetType = mbd.getTargetType();
	
	if (targetType == null) {
		targetType = (mbd.getFactoryMethodName() != null ? getTypeForFactoryMethod(beanName, mbd, typesToMatch) : resolveBeanClass(mbd, beanName, typesToMatch));
		
		if (ObjectUtils.isEmpty(typesToMatch) || getTempClassLoader() == null) {
			mbd.resolvedTargetType = targetType;
		}
		
	}
	return targetType;
}



/**
 *  调用InstantiationAwareBeanPostProcessor的postProcessBeforeInstantiation方法。
 */
location：AbstractAutowireCapableBeanFactory
protected Object applyBeanPostProcessorsBeforeInstantiation(Class<?> beanClass, String beanName) {
	// 遍历所有的BeanPostProcessor实例，如果BeanPostProcessor实例是InstantiationAwareBeanPostProcessor实例的话，
	// 就调用其postProcessBeforeInstantiation方法。
	for (BeanPostProcessor bp : getBeanPostProcessors()) {
	
		if (bp instanceof InstantiationAwareBeanPostProcessor) {
			InstantiationAwareBeanPostProcessor ibp = (InstantiationAwareBeanPostProcessor) bp;
			Object result = ibp.postProcessBeforeInstantiation(beanClass, beanName);
			if (result != null) {
				return result;
			}
		}
		
	}
	return null;
}



/**
 * 获取给定bean对象的实例，如果是FactoryBean，则可以是bean实例本身或其创建的对象。
 * 
 */
location：AbstractBeanFactory
protected Object getObjectForBeanInstance(Object beanInstance, String name, String beanName, RootBeanDefinition mbd) {

	// 判断是否是给定名称是否是工厂的应用（就是判断是否是以&开头），
	if (BeanFactoryUtils.isFactoryDereference(name) && !(beanInstance instanceof FactoryBean)) {
		throw new BeanIsNotAFactoryException(transformedBeanName(name), beanInstance.getClass());
	}

	// 现在我们有了bean实例，它可能是普通的bean或FactoryBean。如果它是FactoryBean，我们使用它来创建bean实例，除非调用者实际上想要引用工厂。
	if (!(beanInstance instanceof FactoryBean) || BeanFactoryUtils.isFactoryDereference(name)) {
		return beanInstance;
	}

	Object object = null;
	if (mbd == null) {
		object = getCachedObjectForFactoryBean(beanName);
	}
	
	if (object == null) {
		FactoryBean<?> factory = (FactoryBean<?>) beanInstance;
		if (mbd == null && containsBeanDefinition(beanName)) {
			mbd = getMergedLocalBeanDefinition(beanName);
		}
		boolean synthetic = (mbd != null && mbd.isSynthetic());
		object = getObjectFromFactoryBean(factory, beanName, !synthetic);
	}
	return object;
}



##################################################################
##########  使用反射和CGLIB生产对应的Bean实例   ##################
##################################################################
public Object instantiate(RootBeanDefinition bd, String beanName, BeanFactory owner) {
	// 判断是否有要覆盖的方法。如果没有使用反射，如果有则使用CGLIB
	if (bd.getMethodOverrides().isEmpty()) {
		Constructor<?> constructorToUse;
		synchronized (bd.constructorArgumentLock) {
			constructorToUse = (Constructor<?>) bd.resolvedConstructorOrFactoryMethod;
			if (constructorToUse == null) {
				final Class<?> clazz = bd.getBeanClass();
				if (clazz.isInterface()) {
					throw new BeanInstantiationException(clazz, "Specified class is an interface");
				}
				try {
					if (System.getSecurityManager() != null) {
						constructorToUse = AccessController.doPrivileged(new PrivilegedExceptionAction<Constructor<?>>() {
							@Override
							public Constructor<?> run() throws Exception {
								return clazz.getDeclaredConstructor((Class[]) null);
							}
						});
					}
					else {
						constructorToUse =	clazz.getDeclaredConstructor((Class[]) null);
					}
					bd.resolvedConstructorOrFactoryMethod = constructorToUse;
				} catch (Throwable ex) {
					throw new BeanInstantiationException(clazz, "No default constructor found", ex);
				}
			}
		}
		return BeanUtils.instantiateClass(constructorToUse);
		
	} else {
		// 必须生成CGLIB子类。
		return instantiateWithMethodInjection(bd, beanName, owner);
	}
}
	
	
	
	
####################################################################################################
################################     单例并且不是懒加载的      #####################################
####################################################################################################
/**
 * 确保所有非懒加载的单例bena被初始化
 */
location：DefaultListableBeanFactory
public void preInstantiateSingletons() throws BeansException {

	if (this.logger.isDebugEnabled()) {
		this.logger.debug("Pre-instantiating singletons in " + this);
	}

	// beanDefinitionNames这个是一个BeanDefinition的名称，
	List<String> beanNames = new ArrayList<String>(this.beanDefinitionNames);

	// 触发所有非惰性单例bean的初始化
	for (String beanName : beanNames) {
	
		// 
		RootBeanDefinition bd = getMergedLocalBeanDefinition(beanName);
		
		//（进入的）非抽象的 && 是单例  && 不是懒加载
		if (!bd.isAbstract() && bd.isSingleton() && !bd.isLazyInit()) {
			
			// 判断是否是FactoryBean
			if (isFactoryBean(beanName)) {
				// 获取对应的BeanFactory。
				final FactoryBean<?> factory = (FactoryBean<?>) getBean(FACTORY_BEAN_PREFIX + beanName);
				boolean isEagerInit;
				
				if (System.getSecurityManager() != null && factory instanceof SmartFactoryBean) {
					isEagerInit = AccessController.doPrivileged(new PrivilegedAction<Boolean>() {
						@Override
						public Boolean run() {
							return ((SmartFactoryBean<?>) factory).isEagerInit();
						}
					}, getAccessControlContext());
				} else {
					isEagerInit = (factory instanceof SmartFactoryBean && ((SmartFactoryBean<?>) factory).isEagerInit());
				}
				
				if (isEagerInit) {
					getBean(beanName);
				}
			}
			else {
				getBean(beanName);
			}
		}
	}

	// Trigger post-initialization callback for all applicable beans...
	
	for (String beanName : beanNames) {
		// 
		Object singletonInstance = getSingleton(beanName);
		if (singletonInstance instanceof SmartInitializingSingleton) {
			final SmartInitializingSingleton smartSingleton = (SmartInitializingSingleton) singletonInstance;
			if (System.getSecurityManager() != null) {
				AccessController.doPrivileged(new PrivilegedAction<Object>() {
					@Override
					public Object run() {
						smartSingleton.afterSingletonsInstantiated();
						return null;
					}
				}, getAccessControlContext());
			} else {
				smartSingleton.afterSingletonsInstantiated();
			}
		}
	}
}








