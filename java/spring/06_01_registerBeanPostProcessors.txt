【spring 4.3.12】


refresh():
	registerBeanPostProcessors(ConfigurableListableBeanFactory beanFactory)：实例化并调用所有注册的BeanPostProcessor Bean。这个方法必须在任何bean初始化之前被调用。
		

一、重要的类。
	BeanPostProcessor：Factory hook运行自定义的修改一个Bean实例。ApplicationContexts可以在其Bean Definition中自动检测BeanPostProcessor类型Bean，并将其
		应用于随后创建的任何Bean。

		方法：
			1、postProcessBeforeInitialization(Object bean, String beanName)：在任何bean初始化回调之前，将此BeanPostProcessor应用于给定的新bean实例。这个给定
				的bean已经填充了属性。返回的bean实例可能是原始实例的包装。
			2、postProcessAfterInitialization(Object bean, String beanName)：在任何bean初始化回调之后，将此BeanPostProcessor应用于给定的新bean实例。这个给定
				的bean已经填充了属性
		
		

二、源码		

/**
 * 实例化并调用所有注册的BeanPostProcessor Bean。
 * 这个方法必须在任何bean初始化之前被调用。
 */
location：AbstractApplicationBean
protected void registerBeanPostProcessors(ConfigurableListableBeanFactory beanFactory) {
	PostProcessorRegistrationDelegate.registerBeanPostProcessors(beanFactory, this);
}


// BeanPostProcesser：允许自定修改bean instance。
// ApplicationContext能够自动检测出Bean Definitions中的BeanPostProcessor的beans，并将他们应用于随后的任何Bean


/**
 * 
 * 从beanFactory获取BeanPostProcessor类型的Bean Name集合。
 * 然后进行分组：PriorityOrdered、Ordered、其他的。接着从BeanFactory中获取对应的Bean并注入到BeanFactory。
 * 这里只是注册并没有调用。
 *
 */
location：PostProcessorRegistrationDelegate
public static void registerBeanPostProcessors(ConfigurableListableBeanFactory beanFactory, AbstractApplicationContext applicationContext) {

	// 获取BeanFactory中的BeanPostProcesser。
	String[] postProcessorNames = beanFactory.getBeanNamesForType(BeanPostProcessor.class, true, false);

	
	// 注册BeanPostProcessorChecker，在BeanPostProcessor实例化期间创建bean时记录信息消息，即当bean不符合由所有BeanPostProcessors处理的资格时。
	// beanPostProcessors存放着refresh()第三第四步骤中addBeanPostProcessor(..)添加的对象。
	int beanProcessorTargetCount = beanFactory.getBeanPostProcessorCount() + 1 + postProcessorNames.length;

	
	// 向BeanFactory中注册一个BeanPostProcessorChecker，BeanPostProcessorChecker这个也实现了BeanPostProcessor接口。
	beanFactory.addBeanPostProcessor(new BeanPostProcessorChecker(beanFactory, beanProcessorTargetCount));


	/** 
	 * 对BeanPostProcessors进行分类。分为PriorityOrdered、Ordered、和其他这三类
	 */
	List<BeanPostProcessor> priorityOrderedPostProcessors = new ArrayList<BeanPostProcessor>();
	List<BeanPostProcessor> internalPostProcessors = new ArrayList<BeanPostProcessor>();
	List<String> orderedPostProcessorNames = new ArrayList<String>();
	List<String> nonOrderedPostProcessorNames = new ArrayList<String>();
	
	// 分类操作。
	for (String ppName : postProcessorNames) {
		if (beanFactory.isTypeMatch(ppName, PriorityOrdered.class)) {
			BeanPostProcessor pp = beanFactory.getBean(ppName, BeanPostProcessor.class);
			priorityOrderedPostProcessors.add(pp);
			
			if (pp instanceof MergedBeanDefinitionPostProcessor) {
				internalPostProcessors.add(pp);
			}
		} else if (beanFactory.isTypeMatch(ppName, Ordered.class)) {
			orderedPostProcessorNames.add(ppName);
		} else {
			nonOrderedPostProcessorNames.add(ppName);
		}
	}

	
	// 【01】PriorityOrdered先处理。排序并注册到BeanFactory。
	sortPostProcessors(priorityOrderedPostProcessors, beanFactory);
	registerBeanPostProcessors(beanFactory, priorityOrderedPostProcessors);

	
	
	// 【02】注册BeanPostProcessor实现Ordered的类。排序并注册到BeanFactory。
	List<BeanPostProcessor> orderedPostProcessors = new ArrayList<BeanPostProcessor>();
	for (String ppName : orderedPostProcessorNames) {
		BeanPostProcessor pp = beanFactory.getBean(ppName, BeanPostProcessor.class);
		orderedPostProcessors.add(pp);
		if (pp instanceof MergedBeanDefinitionPostProcessor) {
			internalPostProcessors.add(pp);
		}
	}
	sortPostProcessors(orderedPostProcessors, beanFactory);
	registerBeanPostProcessors(beanFactory, orderedPostProcessors);
	
	

	// 【03】 其他没有规则的BeanPostProcessor。注册到BeanFactory。
	List<BeanPostProcessor> nonOrderedPostProcessors = new ArrayList<BeanPostProcessor>();
	for (String ppName : nonOrderedPostProcessorNames) {
		BeanPostProcessor pp = beanFactory.getBean(ppName, BeanPostProcessor.class);
		nonOrderedPostProcessors.add(pp);
		if (pp instanceof MergedBeanDefinitionPostProcessor) {
			internalPostProcessors.add(pp);
		}
	}
	registerBeanPostProcessors(beanFactory, nonOrderedPostProcessors);
	
	

	// 【04】 最后，重新注册所有内部BeanPostProcessors
	sortPostProcessors(internalPostProcessors, beanFactory);
	registerBeanPostProcessors(beanFactory, internalPostProcessors);
	
	
	

	// 重新注册BeanPostProcessor以检测内部bean作为ApplicationListeners，将其移动到处理器链的末尾（用于拾取代理等）。
	// ApplicationListenerDetector implements DestructionAwareBeanPostProcessor, MergedBeanDefinitionPostProcessor
	beanFactory.addBeanPostProcessor(new ApplicationListenerDetector(applicationContext));
}





/** 
 * 通过类型获取Bean的名称。
 * includeNonSingletons = ture; allowEagerInit = false。
 */
location：DefaultListableBeanFactory
public String[] getBeanNamesForType(Class<?> type, boolean includeNonSingletons, boolean allowEagerInit) {
	// isConfigurationFrozen()默认返回false。对于所有Beans是否都要创建Bean Definition metadata缓存。
	if (!isConfigurationFrozen() || type == null || !allowEagerInit) {
		/**
		 * ResolvableType：封装一个java（java.lang.reflect.Type），提供了获取父类型getSuperType()的方法、获取接口的getInterfaces()方法等等。
		 * 相当于Spring自己的Class对象，并提供进一步封装。
		 */
		return doGetBeanNamesForType(ResolvableType.forRawClass(type), includeNonSingletons, allowEagerInit);
	}

	// 什么时候可以进入下面？？？？？？？
	Map<Class<?>, String[]> cache = (includeNonSingletons ? this.allBeanNamesByType : this.singletonBeanNamesByType);
	String[] resolvedBeanNames = cache.get(type);
	if (resolvedBeanNames != null) {
		return resolvedBeanNames;
	}
	resolvedBeanNames = doGetBeanNamesForType(ResolvableType.forRawClass(type), includeNonSingletons, true);
	if (ClassUtils.isCacheSafe(type, getBeanClassLoader())) {
		cache.put(type, resolvedBeanNames);
	}
	return resolvedBeanNames;
}


/**
 * 通过类型获取Bean的名称。
 * includeNonSingletons=ture;   allowEagerInit=false。
 */
private String[] doGetBeanNamesForType(ResolvableType type, boolean includeNonSingletons, boolean allowEagerInit) {
	
	List<String> result = new ArrayList<String>();

	// 遍历Bean Factory中所有的BeanDefinition Name。
	for (String beanName : this.beanDefinitionNames) {
	
		// 如果bean名称未定义为某些其他bean的别名，则仅将bean视为合格。
		if (!isAlias(beanName)) {
			try {
				RootBeanDefinition mbd = getMergedLocalBeanDefinition(beanName);

				// 仅仅检查bean Definition是否完成，
				if (!mbd.isAbstract() && (allowEagerInit || ((mbd.hasBeanClass() || !mbd.isLazyInit() ||  isAllowEagerClassLoading())) && !requiresEagerInitForType(mbd.getFactoryBeanName()))) {
					// In case of FactoryBean, match object created by FactoryBean.
					
					// 判断是否是FactoryBean
					boolean isFactoryBean = isFactoryBean(beanName, mbd);
					
					// 获取RootBeanDefinition的BeanDefinitionHolder
					BeanDefinitionHolder dbd = mbd.getDecoratedDefinition();
					
					// 匹配发现
					boolean matchFound = (allowEagerInit || !isFactoryBean || (dbd != null && !mbd.isLazyInit()) || containsSingleton(beanName)) &&
							(includeNonSingletons || (dbd != null ? mbd.isSingleton() : isSingleton(beanName))) && isTypeMatch(beanName, type);
							
					// 如果是FactoryBean，请尝试下一步匹配FactoryBean实例。
					if (!matchFound && isFactoryBean) {
						beanName = FACTORY_BEAN_PREFIX + beanName;
						matchFound = (includeNonSingletons || mbd.isSingleton()) && isTypeMatch(beanName, type);
					}
					
					if (matchFound) {
						result.add(beanName);
					}
				}
			} catch (CannotLoadBeanClassException ex) {
				if (allowEagerInit) {
					throw ex;
				}
				
				if (this.logger.isDebugEnabled()) {
					this.logger.debug("Ignoring bean class loading failure for bean '" + beanName + "'", ex);
				}
				onSuppressedException(ex);
			} catch (BeanDefinitionStoreException ex) {
				if (allowEagerInit) {
					throw ex;
				}
				
				if (this.logger.isDebugEnabled()) {
					this.logger.debug("Ignoring unresolvable metadata in bean definition '" + beanName + "'", ex);
				}
				onSuppressedException(ex);
			}
		}
	}
	
	// 【【result：BeanDefinitionRegistryPostProcessor接口的实现类。】】

	// 也可以手动注册单例。this.manualSingletonNames是refresh()方法第三步注册的。
	for (String beanName : this.manualSingletonNames) {
		try {
			if (isFactoryBean(beanName)) {
			
				if ((includeNonSingletons || isSingleton(beanName)) && isTypeMatch(beanName, type)) {
					result.add(beanName);
					continue;
				}
				
				beanName = FACTORY_BEAN_PREFIX + beanName;
			}
			
			if (isTypeMatch(beanName, type)) {
				result.add(beanName);
			}
		} catch (NoSuchBeanDefinitionException ex) {
			if (logger.isDebugEnabled()) {
				logger.debug("Failed to check manually registered singleton with name '" + beanName + "'", ex);
			}
		}
	}

	return StringUtils.toStringArray(result);
}


/**
 *
 */
location：AbstractBeanFactory
public boolean isFactoryBean(String name) throws NoSuchBeanDefinitionException {
	String beanName = transformedBeanName(name);

	Object beanInstance = getSingleton(beanName, false);
	
	if (beanInstance != null) {
		return (beanInstance instanceof FactoryBean);
	} else if (containsSingleton(beanName)) {
		return false;
	}

	if (!containsBeanDefinition(beanName) && getParentBeanFactory() instanceof ConfigurableBeanFactory) {
		return ((ConfigurableBeanFactory) getParentBeanFactory()).isFactoryBean(name);
	}

	return isFactoryBean(beanName, getMergedLocalBeanDefinition(beanName));
}


/**
 * 向BeanFactory中注册给定的BeanPostProcessor。
 * 【【【这里并没有调用】】】
 */
location：PostProcessorRegistrationDelegate 
private static void registerBeanPostProcessors(ConfigurableListableBeanFactory beanFactory, List<BeanPostProcessor> postProcessors) {

	for (BeanPostProcessor postProcessor : postProcessors) {
		beanFactory.addBeanPostProcessor(postProcessor);
	}
	
}


/**
 * 添加BeanPostProcessor
 */
location：AbstractBeanFactory
public void addBeanPostProcessor(BeanPostProcessor beanPostProcessor) {
	
	// 移除原有的
	this.beanPostProcessors.remove(beanPostProcessor);
	
	// 重新添加
	this.beanPostProcessors.add(beanPostProcessor);
	
	// 类型判断。
	if (beanPostProcessor instanceof InstantiationAwareBeanPostProcessor) {
		this.hasInstantiationAwareBeanPostProcessors = true;
	}
	
	if (beanPostProcessor instanceof DestructionAwareBeanPostProcessor) {
		this.hasDestructionAwareBeanPostProcessors = true;
	}
}