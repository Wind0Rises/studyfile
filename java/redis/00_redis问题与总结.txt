


二、面试问题
	1、redis的集群采用什么协议？
		使用Gossip（流言）协议。
	
	
	
	2、生产上的redis是如何配置的。	
		答：* 设置rdb的规则，【save 时间秒  至少改变的key的个数】。十五分钟至少有一个，就保存rdb，如果5分钟有100，就保存一次rdb，如果一分钟有1000key发生改变，就保存一次。
			* 开启aof模式，【appendonly yes】，并配置fsync，生成配置的都是everysec每秒复制一次，【还有其他的两种模式：一种是always，一种是：no】然后配置一下aof的rewrite的策略，可以通过
			  auto-aof-rewrite-percentage和auto-aof-rewrite-min-size。
			* 设置过期键的删除策略。使用maxmemory-policy进行最大内存时的key淘汰策略。如果使用lru可以搭配maxmemory-samples记性使用。
			* 设置最大内存通过maxmemory 1024进行设置。
			* 设置最大连接数，maxclients 10000
			* 设置认证：masterauth password
			* 打开集群设置：cluster-enabled yes
		    
	
	3、rdb和aof的区别？
		* rdb是全量复制而aof是增量复制，所以在宕机的情况下，aof能保存更少的数据丢失。
		* rdb中保存的是经过压缩的二进制文件，数据恢复可以直接加载到内存中；而aof中保存的是写指令信息【注意自动过期key】，所以在数据恢复的时候，rdb的效率更高。


	4、过期键的删除策略。
		* 定时删除：在设置键的过期时间的同时，创建一个定时器（timer），让定时器在键的过期时间来临时，立即执行对键的删除操作。
			优缺点：对内存友好，可以保证过期键会尽可能地被删除，并释放过期键所占的内存。在过期键比较多的时候会消耗大量的CPU。
			
		* 惰性删除：放任过期键不管，但是每次从键空间中获取键时，都检查取得的键是否过期，如果过期的话，就删除该键，返回nil；如果没有过去，就返回该键。
			优缺点：对cpu很优化，只会在取出键的时候才会对键进行过期检查，可以保证删除过期键只会发生在非做不可的情况下。对内存很不友好。
			
			
		* 定期删除：每隔一段时间，程序就对数据库进行检查一次，删除里面的过期键。
		
		
		* 达到最大内存时六种key淘汰策略【maxmemory-policy volatile-lru】
			volatile-lru：		【设置了过期时间】的键空间中，移除【最近最少使用】的key；
			volatile-random：	【设置了过期时间】的键空间中，移除【随机】的key；
			volatile-ttl：		【设置了过期时间】的键空间中，移除【将要过期】的key；
			
			allkeys-random：	【所有的key】并移除【随机】key；
			allkeys-lru：		【所有的key】并移除【最近最少使用】的key；
			
			noeviction，当内存使用达到阀值的时候，所有引起申请内存的命令会报错；
			
	
	5、redis五种数据的用途
		* string 
		* hash   保
		* list
		* set
		* zset