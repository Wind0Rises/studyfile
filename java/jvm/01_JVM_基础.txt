局部变量表用的是索引，，操作数栈是弹栈/压栈来访问
https://blog.csdn.net/qq_28666081/article/details/85269879


一、介绍


1、jvm虚拟机栈的结构。
	每一个现在开始时，都会创建一个虚拟机栈，用于保存线程运行时的数据。jvm虚拟机栈，是由一个个栈帧组成。栈帧是由局部变量表（方法的参数，内部使用的变量）、操作数栈、
	动态链接、方法出口。

	
2、什么是操作数栈。
	操作数：运算符操作的实体，
	操作数栈：用于保存和运算操作数的栈，有压栈和弹出栈两个操作。
	
	
3、什么是动态链接。


4、方法区：
	方法区主要用于存储已被jvm加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。
	
	jdk7及其以前：分为新生代[eden、survivor、survivor]、老年代、永久代。
	jdk8及其以后：取消了永久代使用元空间进行代替。
	
	为什么取消永久代，使用元空间代替？
		jdk1.7及其以前永久代默认情况下空间比较小，字符串存在永久代，容易出现性能问题和内存溢出。
		类及方法的信息等比较难确定其大小，因此对于永久代的大小指定比较困难，太小容易出现永久代溢出，太大则容易导致老年代(就小了）溢出。
	
5、方法区和永久代【也就元空间】
	方法区是JVM的规范，永久代是HotSpot的一种实现，在HotSpot虚拟机上我们习惯把方法区成为永久代。
	
	
6、逃逸分析算法
	当变量（或者对象）在方法中分配后，其指针有可能被返回或者被全局引用，这样就会被其他方法或者线程所引用，这种现象称作指针（或者引用）的逃逸(Escape)。
	通俗点讲，如果一个对象的指针被多个方法或者线程引用时，那么我们就称这个对象的指针发生了逃逸。
	
	为了减少临时对象在堆内分配的数量，我会在一个方法体内定义一个局部变量，并且该变量在方法执行过程中未发生逃逸，按照JVM调优机制，首先会在堆内存创建类的实例，
	然后将此对象的引用压入调用栈，继续执行，这是JVM优化前的方式。然后，我采用逃逸分析对JVM进行优化。即针对栈的重新分配方式，首先找出未逃逸的变量，
	将该变量直接存到栈里，无需进入堆，分配完成后，继续调用栈内执行，最后线程执行结束，栈空间被回收，局部变量也被回收了。如此操作，是优化前在堆中，
	优化后在栈中，从而减少了堆中对象的分配和销毁，从而优化性能。
	
	solt复用（如果局部变量出了作用域，那么后面如果有新的对象被创建solt将被复用，如果没有新对象创建将不会被复用。）、
	在垃圾回收之前如果把对应置为null，这是对象都会被回收、
	
	https://blog.csdn.net/qiyue683209/article/details/82961472
	
	
7、分代收集
	新生代收集器：Serial、ParNew、Parallel Scavenge
	老年代收集器：CMS、Serial Old、Parallel Old
	整堆收集器： G1
	https://www.cnblogs.com/chenpt/p/9803298.html
	
	
	
二、常用的JVM调优参数

	1)、堆栈设置
		-Xms:初始堆大小，默认物理内存的1/64
		-Xmx:最大堆大小，默认物理内存的1/4
		-Xss:每个线程的栈大小
		-Xmn:新生代大小
		-XX:NewSize:设置新生代初始大小
		-XX:NewRatio:默认2表示新生代占年老代的1/2，占整个堆内存的1/3。
		-XX:SurvivorRatio:默认8表示一个survivor区占用1/8的Eden内存，即1/10的新生代内存。
		-XX:MetaspaceSize:设置元空间大小
		-XX:MaxMetaspaceSize:设置元空间最大允许大小，默认不受限制，JVM Metaspace会进行动态扩展。
				
	2)、垃圾回收统计信息
		-XX:+PrintGC
		-XX:+PrintGCDetails
		-XX:+PrintGCTimeStamps
		-Xloggc:filename
		
	3)、收集器设置
		-XX:+UseSerialGC:设置串行收集器
		-XX:+UseParallelGC:设置并行收集器
		-XX:+UseParallelOldGC:老年代使用并行回收收集器
		-XX:+UseParNewGC:在新生代使用并行收集器
		-XX:+UseParalledlOldGC:设置并行老年代收集器
		-XX:+UseConcMarkSweepGC:设置CMS并发收集器
		-XX:+UseG1GC:设置G1收集器
		-XX:ParallelGCThreads:设置用于垃圾回收的线程数

	4)、并行收集器设置
		-XX:ParallelGCThreads:设置并行收集器收集时使用的CPU数。并行收集线程数。
		-XX:MaxGCPauseMillis:设置并行收集最大暂停时间
		-XX:GCTimeRatio:设置垃圾回收时间占程序运行时间的百分比。公式为1/(1+n)

	5)、CMS收集器设置
		-XX:+UseConcMarkSweepGC:设置CMS并发收集器
		-XX:+CMSIncrementalMode:设置为增量模式。适用于单CPU情况。
		-XX:ParallelGCThreads:设置并发收集器新生代收集方式为并行收集时，使用的CPU数。并行收集线程数。
		-XX:CMSFullGCsBeforeCompaction:设定进行多少次CMS垃圾回收后，进行一次内存压缩
		-XX:+CMSClassUnloadingEnabled:允许对类元数据进行回收
		-XX:UseCMSInitiatingOccupancyOnly:表示只在到达阀值的时候，才进行CMS回收
		-XX:+CMSIncrementalMode:设置为增量模式。适用于单CPU情况
		-XX:ParallelCMSThreads:设定CMS的线程数量
		-XX:CMSInitiatingOccupancyFraction:设置CMS收集器在老年代空间被使用多少后触发
		-XX:+UseCMSCompactAtFullCollection:设置CMS收集器在完成垃圾收集后是否要进行一次内存碎片的整理

	6)、G1收集器设置
		-XX:+UseG1GC:使用G1收集器
		-XX:ParallelGCThreads:指定GC工作的线程数量
		-XX:G1HeapRegionSize:指定分区大小(1MB~32MB，且必须是2的幂)，默认将整堆划分为2048个分区
		-XX:GCTimeRatio:吞吐量大小，0-100的整数(默认9)，值为n则系统将花费不超过1/(1+n)的时间用于垃圾收集
		-XX:MaxGCPauseMillis:目标暂停时间(默认200ms)
		-XX:G1NewSizePercent:新生代内存初始空间(默认整堆5%)
		-XX:G1MaxNewSizePercent:新生代内存最大空间
		-XX:TargetSurvivorRatio:Survivor填充容量(默认50%)
		-XX:MaxTenuringThreshold:最大任期阈值(默认15)
		-XX:InitiatingHeapOccupancyPercen:老年代占用空间超过整堆比IHOP阈值(默认45%),超过则执行混合收集
		-XX:G1HeapWastePercent:堆废物百分比(默认5%)
		-XX:G1MixedGCCountTarget:参数混合周期的最大总次数(默认8)	
		
-Djetty.port=8080 -Dfile.encoding=UTF-8 -Xms2048m -Xmx2048m -XX:PermSize=256m -XX:MaxPermSize=256m -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=D:\test\dump.txt		
		