一、介绍
	Condition：Condition对象是依赖于Lock对象的。在Lock接口中都要一个Condition newCondition()方法用于获取一个Condition实例。Condition与lock的关系有点类似于
		Synchronized与Object的await、notify。
		如果没有上锁就使用condition.await()也会报IllegalMonitorStateException异常和Synchronized很类似。

	主要方法是：
		await()和await*()：方法，让当前线程进入等待状态，并且释放锁。
		signal：把线程唤起，如果等待队列中没有线程，直接获取锁，并执行；如果有等待队列，把当前节点放在等待队列之后。
	

	
	
/**
 *
 */
location：AbstractQueuedSynchronizer.ConditionObject
public class ConditionObject implements Condition, java.io.Serializable {
	
	private static final long serialVersionUID = 1173984872572414699L;
	
	// 头队列
	private transient Node firstWaiter;
	
	// 尾队列
	private transient Node lastWaiter;

	public ConditionObject() {
	}

	/**
	 * 实现可中断条件等待。
	 */
	public final void await() throws InterruptedException {
		// 判断线程是否被中断了
		if (Thread.interrupted()) {
			throw new InterruptedException();
		}
		
		/**
		 * 向等待尾部队列中添加一个节点。
		 */
		Node node = addConditionWaiter();
		
		/**
		 * 释放独占锁，并返回同步器的状态。【只有获取锁的节点才能进入await方法】
		 */
		int savedState = fullyRelease(node);
		
		
		int interruptMode = 0;
		
		/**
		 * 什么时候进入While。
		 */
		while (!isOnSyncQueue(node)) {
			/** 
			 * 挂起当前线程。
			 */
			LockSupport.park(this);
				
			if ((interruptMode = checkInterruptWhileWaiting(node)) != 0) {
				break;
			}
		}
		
		if (acquireQueued(node, savedState) && interruptMode != THROW_IE) {
			interruptMode = REINTERRUPT;
		}
		
		if (node.nextWaiter != null) {
			unlinkCancelledWaiters();
		}
		
		if (interruptMode != 0) {
			reportInterruptAfterWait(interruptMode);
		}
	}
	
	/**
	 * 向等待队列尾部中添加一个节点。
	 * 初始化的时候，直接把创建的新节点赋值给头节点，这个时候头节点和尾节点是一个。
	 * 如果初始化完成以后就把节点放到为节点上。
	 */
	private Node addConditionWaiter() {
		Node t = lastWaiter;
		
		// 如果尾节点不为空【并且】如果尾节点不是Condition状态  ===>  从队列中删除。
		if (t != null && t.waitStatus != Node.CONDITION) {
			unlinkCancelledWaiters();
			t = lastWaiter;
		}
		
		// 创建一个状态为CONDITION的节点。
		Node node = new Node(Thread.currentThread(), Node.CONDITION);
		
		/**
		 * 如果尾节点为空，这把为节点设置为该节点，
		 * 否则把尾节点的后继节点指向该节点。
		 */
		if (t == null) {
			firstWaiter = node;
		} else {
			t.nextWaiter = node;
		}
		lastWaiter = node;
		return node;
	}

	
	/**
	 * 将等待时间最长的线程（如果存在）从该条件的等待队列移至拥有锁的等待队列。
	 */
	public final void signal() {
		// isHeldExclusively：同步器的当前线程是否保持着独占模式。
		if (!isHeldExclusively()) (
			throw new IllegalMonitorStateException();
		}
		
		// 获取头节点。
		Node first = firstWaiter;
		
		if (first != null) {
			doSignal(first);
		}
	}

	
	/**
	 * 删除并转移节点，直到命中不可取消的一个或为null。从信号中分离出来，部分鼓励编译器内联没有服务员的情况。
	 */
	private void doSignal(Node first) {
		do {
			if ( (firstWaiter = first.nextWaiter) == null) {
				lastWaiter = null;
			}
			
			first.nextWaiter = null;
			
			// transferForSignal(..)：将节点从条件队列转移到同步队列。如果成功，则返回true。
		} while (!transferForSignal(first) && (first = firstWaiter) != null);
	}
	
	/**
	 * transferForSignal是
	 */
	final boolean transferForSignal(Node node) {

        if (!compareAndSetWaitStatus(node, Node.CONDITION, 0)) {
            return false;
		}

        Node p = enq(node);
        int ws = p.waitStatus;
        if (ws > 0 || !compareAndSetWaitStatus(p, ws, Node.SIGNAL)) {
            LockSupport.unpark(node.thread);
		}
        return true;
    }
	

	/**
	 * 
	 */
	private void doSignalAll(Node first) {
		lastWaiter = firstWaiter = null;
		do {
			Node next = first.nextWaiter;
			first.nextWaiter = null;
			transferForSignal(first);
			first = next;
		} while (first != null);
	}

	/**
	 * 从等待队列中删除状态不是CONDITION节点的。
	 */
	private void unlinkCancelledWaiters() {
		// 获取头节点。
		Node t = firstWaiter;
		Node trail = null;
		
		// 判读头节点是否为null。
		while (t != null) {
			
			// 获取下一个节点。
			Node next = t.nextWaiter;
			
			// 把非CONDITION状态的节点从队列中删除。
			if (t.waitStatus != Node.CONDITION) {
				t.nextWaiter = null;
				if (trail == null) {
					firstWaiter = next;
				} else {
					trail.nextWaiter = next;
				}
				
				if (next == null) {
					lastWaiter = trail;
				}
			} else {
				trail = t;
			}
			
			t = next;
		}
	}

	

	public final void signalAll() {
		if (!isHeldExclusively())
			throw new IllegalMonitorStateException();
		Node first = firstWaiter;
		if (first != null)
			doSignalAll(first);
	}


	/**
	 * 实现不间断的条件等待。
	 */
	public final void awaitUninterruptibly() {
		// 向等待队列中添加一个节点。
		Node node = addConditionWaiter();
		
		
		int savedState = fullyRelease(node);
		boolean interrupted = false;
		while (!isOnSyncQueue(node)) {
			LockSupport.park(this);
			if (Thread.interrupted())
				interrupted = true;
		}
		if (acquireQueued(node, savedState) || interrupted)
			selfInterrupt();
	}


	private static final int REINTERRUPT =  1;

	
	private static final int THROW_IE    = -1;

	/**
	 * 
	 */
	private int checkInterruptWhileWaiting(Node node) {
		return Thread.interrupted() ?
			(transferAfterCancelledWait(node) ? THROW_IE : REINTERRUPT) :
			0;
	}

	/**
	 * 
	 */
	private void reportInterruptAfterWait(int interruptMode)
		throws InterruptedException {
		if (interruptMode == THROW_IE)
			throw new InterruptedException();
		else if (interruptMode == REINTERRUPT)
			selfInterrupt();
	}

	
	
	
	
	/**
	 * 
	 */
	location：AbstractQueuedSynchronizer
	final boolean isOnSyncQueue(Node node) {
        if (node.waitStatus == Node.CONDITION || node.prev == null) {
            return false;
		}
        if (node.next != null) {
            return true;
        }
        return findNodeFromTail(node);
    }


	public final long awaitNanos(long nanosTimeout)
			throws InterruptedException {
		if (Thread.interrupted())
			throw new InterruptedException();
		Node node = addConditionWaiter();
		int savedState = fullyRelease(node);
		final long deadline = System.nanoTime() + nanosTimeout;
		int interruptMode = 0;
		while (!isOnSyncQueue(node)) {
			if (nanosTimeout <= 0L) {
				transferAfterCancelledWait(node);
				break;
			}
			if (nanosTimeout >= spinForTimeoutThreshold)
				LockSupport.parkNanos(this, nanosTimeout);
			if ((interruptMode = checkInterruptWhileWaiting(node)) != 0)
				break;
			nanosTimeout = deadline - System.nanoTime();
		}
		if (acquireQueued(node, savedState) && interruptMode != THROW_IE)
			interruptMode = REINTERRUPT;
		if (node.nextWaiter != null)
			unlinkCancelledWaiters();
		if (interruptMode != 0)
			reportInterruptAfterWait(interruptMode);
		return deadline - System.nanoTime();
	}

	
	public final boolean awaitUntil(Date deadline)
			throws InterruptedException {
		long abstime = deadline.getTime();
		if (Thread.interrupted())
			throw new InterruptedException();
		Node node = addConditionWaiter();
		int savedState = fullyRelease(node);
		boolean timedout = false;
		int interruptMode = 0;
		while (!isOnSyncQueue(node)) {
			if (System.currentTimeMillis() > abstime) {
				timedout = transferAfterCancelledWait(node);
				break;
			}
			LockSupport.parkUntil(this, abstime);
			if ((interruptMode = checkInterruptWhileWaiting(node)) != 0)
				break;
		}
		if (acquireQueued(node, savedState) && interruptMode != THROW_IE)
			interruptMode = REINTERRUPT;
		if (node.nextWaiter != null)
			unlinkCancelledWaiters();
		if (interruptMode != 0)
			reportInterruptAfterWait(interruptMode);
		return !timedout;
	}

	/**
	 * 
	 */
	public final boolean await(long time, TimeUnit unit) throws InterruptedException {
		long nanosTimeout = unit.toNanos(time);
		if (Thread.interrupted())
			throw new InterruptedException();
		Node node = addConditionWaiter();
		int savedState = fullyRelease(node);
		final long deadline = System.nanoTime() + nanosTimeout;
		boolean timedout = false;
		int interruptMode = 0;
		while (!isOnSyncQueue(node)) {
			if (nanosTimeout <= 0L) {
				timedout = transferAfterCancelledWait(node);
				break;
			}
			if (nanosTimeout >= spinForTimeoutThreshold)
				LockSupport.parkNanos(this, nanosTimeout);
			if ((interruptMode = checkInterruptWhileWaiting(node)) != 0)
				break;
			nanosTimeout = deadline - System.nanoTime();
		}
		if (acquireQueued(node, savedState) && interruptMode != THROW_IE)
			interruptMode = REINTERRUPT;
		if (node.nextWaiter != null)
			unlinkCancelledWaiters();
		if (interruptMode != 0)
			reportInterruptAfterWait(interruptMode);
		return !timedout;
	}


	final boolean isOwnedBy(AbstractQueuedSynchronizer sync) {
		return sync == AbstractQueuedSynchronizer.this;
	}

	protected final boolean hasWaiters() {
		if (!isHeldExclusively())
			throw new IllegalMonitorStateException();
		for (Node w = firstWaiter; w != null; w = w.nextWaiter) {
			if (w.waitStatus == Node.CONDITION)
				return true;
		}
		return false;
	}


	protected final int getWaitQueueLength() {
		if (!isHeldExclusively())
			throw new IllegalMonitorStateException();
		int n = 0;
		for (Node w = firstWaiter; w != null; w = w.nextWaiter) {
			if (w.waitStatus == Node.CONDITION)
				++n;
		}
		return n;
	}


	protected final Collection<Thread> getWaitingThreads() {
		if (!isHeldExclusively())
			throw new IllegalMonitorStateException();
		ArrayList<Thread> list = new ArrayList<Thread>();
		for (Node w = firstWaiter; w != null; w = w.nextWaiter) {
			if (w.waitStatus == Node.CONDITION) {
				Thread t = w.thread;
				if (t != null)
					list.add(t);
			}
		}
		return list;
	}
}


/**
 * 释放独占锁。并返回同步器的状态。
 */
location：AbstractQueuedSynchronizer
final int fullyRelease(Node node) {
	boolean failed = true;
	try {
		// 获取同步器的状态。
		int savedState = getState();
		
		// 释放独占锁。
		if (release(savedState)) {
			failed = false;
			return savedState;
		} else {
			throw new IllegalMonitorStateException();
		}
	} finally {
		if (failed) {
			node.waitStatus = Node.CANCELLED;
		}
	}
}


/**
 *
 */
location：AbstractQueuedSynchronizer
final boolean isOnSyncQueue(Node node) {
	if (node.waitStatus == Node.CONDITION || node.prev == null) {
		return false;
	}
	
	if (node.next != null) {
		return true;
	}
	
	return findNodeFromTail(node);
}


/**
 *
 */
location：AbstractQueuedSynchronizer
private boolean findNodeFromTail(Node node) {
	Node t = tail;
	for (;;) {
		if (t == node) {
			return true;
		}
		
		if (t == null) {
			return false;
		}
		
		t = t.prev;
	}
}