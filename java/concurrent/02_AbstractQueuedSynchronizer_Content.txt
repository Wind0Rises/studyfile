一、流程
	





二、解析
	1)、独占模式：
		获取锁：
			1、首先尝试获取锁，如果获取到锁，直接返回。
			2、如果尝试获取锁失败以后，把当前操作封装成一个Node，并把封装的Node放到一个FIFO队里中，然后通过CAS操作把AQS中的Node队列尾节点更新为刚刚封装的节点。
			  【如果尾节点更新失败，会自旋更新节点】
			3、更新尾节点成功以后，检查尾节点的前驱节点是否是头节，如果是头结点，再次获取锁，获取成功直接返回，如果不是头节点，【【去除状态为取消的节点】】，
			   然后挂起线程。
		
		释放锁：
			如果尝试释放锁成功，需要把头节点从有效状态（waitStatus < 0）通过CAS改为取消状态（waitStatus = 0）。获取后继节点中，状态为有效状态的节点，并启动 节点中的
			线程。
		
		注意事项：
			# 尝试获取锁的时候，使用CAS更改AQS的同步状态。




三、源码
	1、重要的成员变量：
		// 同步状态。
		private volatile int state;

		// 尾节点。
		private transient volatile Node tail;
		
		// 头节点。
		private transient volatile Node head;

		
	2、重要的成员方法：
		获取状态
			getState()：获取当前AQS的同步状态
			setState()：设置AQS的同步状态。
	
		获取锁：
			acquire(): 以独占方式获取锁。
			acquireShared()：以共享方式获取锁。
	
		释放锁：
			release()：释放独占锁。
			releaseShared()：释放共享锁。


	3、内部类：Node节点。
		###############################################################################################
		#	/**                                                                                           #
		#	* <note>                                                                                     #
		#	*		1、内部有区分是共享mode还是排他mode。                                                 #
		#	* 		2、保存当前线程。                                                                     #
		#	*    	3、保存前驱、后继节点。                                                               #
		#	*		4、以及节点的状态。                                                                   #
		#	* </note>                                                                                    #
		#	*/                                                                                           #
		###############################################################################################
		class Node {
			static final Node SHARED = new Node();
			
			static final Node EXCLUSIVE = null;
			// 在同步队列中等待的线程等待超时或被中断，需要从同步队列中取消该Node的结点，其结点的waitStatus为CANCELLED，即结束状态，进入该状态后的结点将不会再变化。
			static final int CANCELLED =  1;
			
			// 就是处于唤醒状态，只要前继结点释放锁，就会通知标识为SIGNAL状态的后继结点的线程执行。
			static final int SIGNAL    = -1;
			
			// 与Condition相关，该标识的结点处于等待队列中，结点的线程等待在Condition上，当其他线程调用了Condition的signal()方法后，CONDITION状态的结点将从等待队列转移到同步队列中，等待获取同步锁。
			static final int CONDITION = -2;
			
			// 与共享模式相关，在共享模式中，该状态标识结点的线程处于可运行状态。
			static final int PROPAGATE = -3;

			// 当前节点的一个等待状态标志位
			volatile int waitStatus;

			// 该节点的前驱节点
			volatile Node prev;
		  
			// 该节点的后继节点
			volatile Node next;

			// 当前节点持有的线程。
			volatile Thread thread;
		 
			// AQS中阻塞队列采用的是用双向链表保存，用prve和next相互链接。
			// 而AQS中条件队列是使用单向列表保存的，用nextWaiter来连接。阻塞队列和条件队列并不是使用的相同的数据结构。
			// Condition队列中指向结点在队列中的后继；在CLH队列中共享模式下值取SHARED,独占模式下为null。
			Node nextWaiter;
			
			Node() { 
			}

			Node(Thread thread, Node mode) { 
				this.nextWaiter = mode;
				this.thread = thread;
			}

			Node(Thread thread, int waitStatus) {
				this.waitStatus = waitStatus;
				this.thread = thread;
			}

			final boolean isShared() {
				return nextWaiter == SHARED;
			}

			final Node predecessor() throws NullPointerException {
				Node p = prev;
				if (p == null) {
					throw new NullPointerException();
				}  else {
					return p;
				}
			}
		}




		
		
		
#######################################################################################################################################################
#########################################                        独占锁代码解析                  ######################################################
#######################################################################################################################################################

#####################################################
#				独占锁--加锁						#
#####################################################


/**
 * 以独占的方式获取锁，忽略中断。
 * 通过至少调用一次tryAcquire()方法并成功返回来实现。否者线程将进入等待队里，线程并被堵塞，直到调用tryAcquire成功。
 * AQS中的tryAcquire()（尝试获取锁由子类实现。）是需要子类进行重写的。
 */
public final void acquire(int arg) {

	/**
	 * tryAcquire尝试获取到锁  ====》  以ReentrantLock为例，请搜索ReentrantLock_tryAcquire。
	 * 
	 * 获取锁失败 【并且】 加入队列失败		===直接返回===>   中断线程。
	 *	
	 * addWaiter(..)：把节点添加到AQS队列的尾部。并把添加的节点返回。
	 * acquireQueued(..)：如果该节点的头节点的Head，再次尝试获取锁，如果失败，根据不同的状态进行不同的处理，可能更新状态，可能挂起线程，可能中断。
	 * 					  acquireQueued内部逻辑是一个自旋操作，当挂起的线程
	 */
 	if (!tryAcquire(arg) && acquireQueued(addWaiter(Node.EXCLUSIVE), arg)) {
		selfInterrupt();
	}	
}


/**
 * 尝试以独占方式获取锁。
 * 查询对象的状态是否允许以独占模式获取对象，如果允许则获取对象.
 */
protected boolean tryAcquire(int arg) {
	throw new UnsupportedOperationException();
}




/**
 * 节点保存当前线程。
 * 创建一个新的节点，并把节点添加到等待队里的尾部。（这个队列是AQS的双向链表，由tail尾节点和head头结点组成）
 * 并返回刚刚创建并设置为尾结点的节点。
 * 
 * 
 * 如果是以独占的方式传入的是Node.EXCLUSIVE = null;
 * 如果是以共享的方式传入的是Node.SHARED = new Node();  这个参数在Node中是用final修饰的。
 */
private Node addWaiter(Node mode) {
	// 创建链表节点
	Node node = new Node(Thread.currentThread(), mode);
	
	// 把等待队列的尾节点复制给pred。
	Node pred = tail;
	
	// 当尾节点不为空时进入if
	if (pred != null) {
		
		// 把刚刚new出来的节点的前驱节点指向尾节点。
		node.prev = pred;
		
		/**
		 * ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
		 * ^		把当前的AQS的尾节点更新为刚刚new的节点成功，进入if。		^
		 * ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
		 */
		if (compareAndSetTail(pred, node)) {
			// 把当前的AQS的尾节点更新为刚刚new的节点成功以后，把开始尾节点的后继节点设置为刚刚new的节点。
			pred.next = node;
			return node;
		}
	}
	
	/**
	 * 
	 * 如果尾节点为空，首先new Node()，并把这个节点赋值给头节点（CAS操作），并把头节点赋值给尾节点。
	 * 然后把当前的节点的前驱设置为（其实上前一个）尾节点，并把当前节点设置为尾节点。
	 */
	enq(node);
	
	return node;
}


/**
 * 这是一个原子操作。通过CAS更新尾节点。
 */
private final boolean compareAndSetTail(Node expect, Node update) {
	return unsafe.compareAndSwapObject(this, tailOffset, expect, update);
}


/**
 * 不断尝试把传入的Node放入AQS节点上。
 *
 * 由此可以看出头节点就是一个空的Node，	
 */
private Node enq(final Node node) {
	for (;;) {
	
		Node t = tail;
		
		/**
		 * 初始化时，头节点和尾节点都是空的。一般第一次的时候会进入if。 
		 */
		if (t == null) {
			/**
			 * ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
			 * ^    如果尾节点为空，new一个新节点，并把这个节点设置为AQS中的队里的头节点。   ^
			 * ^    成功以后把尾节点设置为刚刚设置的头结点。然后进入下一次循环，这时可以     ^
			 * ^    看到头节点就是一个空Node。                                               ^
			 * ^    然后把尾节点设置为头结点（刚刚设置的空节点）。这时头尾节点是一个(空节点) ^
			 * ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
			 */
			if (compareAndSetHead(new Node())) {
				tail = head;
			}
			
		} else {
			/**
			 * ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
			 * ^		如果尾节点不为空，把AQS的尾节点设置为传入的node。		^
			 * ^ 		就是把传入的节点放入AQS的队列（链表）后。				^
			 * ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
			 */
			node.prev = t;
			if (compareAndSetTail(t, node)) {
				t.next = node;
				return t;
			}
		}
	}
}



/**
 * CAS设置头节点，尾节点为空时，头节点也为空，这个是头尾是一个节点。
 */
private final boolean compareAndSetHead(Node update) {
	return unsafe.compareAndSwapObject(this, headOffset, null, update);
}




/**
 * 1、判断该节点的前驱节点是否是头节点
 * 2、如果是头节点，尝试获取锁，
 *		- 如果获取锁成功。【返回false】把该节点设置为头节点，并把该节点的线程和前驱节点设置为空，把原有的头节点的后继节点设置为null。
 *		- 如果获取失败，继续执行下去。
 * 3、如果不是头节点或者是头结点但是获取锁失败。
 * 
 * node为刚刚设置的尾节点。这个时候尾节点可能已经变了。
 */ 
final boolean acquireQueued(final Node node, int arg) {
	boolean failed = true;	
	
	try {
		boolean interrupted = false;
		
		for (;;) {
			// 获取该node的前驱节点。
			final Node p = node.predecessor();
			
			/** 
			 * 如果node的前驱节点是头节点【并且】尝试获取锁并且成功了，进入if语句。
			 * 进入If说明这个时候这个节点已经获取到锁了。
			 */
			if (p == head && tryAcquire(arg)) {	
			
				// 把该节点设置为头节点，头节点的thread为空，并且没有前驱节点。
				setHead(node);
				
				// 把以前的头节点的后继节点设置为null，这个时候头结点就出队来。
				p.next = null;
				
				failed = false;
				
				return interrupted;
			}
			
			/**
			 * shouldParkAfterFailedAcquire：根据前驱节点的状态，进行不同的操作。
			 *											如果前驱节点状态为（SIGNAL = -1）有效状态，直接返回true。
			 *											如果前驱节点状态为（  	>0	）取消状态，从队里中剔除，返回false。
			 *											如果其他状态，CAS把状态改为（SIGNAL = -1）有效状态，返回false。
			 *								
			 *								 一般情况都是返回true。如果第一次返回false，
			 *											第二次如果头节点是等待状态，就挂起线程。
			 *											第二次如果获取锁成功，这中断这个线程。
			 *
			 * parkAndCheckInterrupt：挂起当前线程。
			 */
			if (shouldParkAfterFailedAcquire(p, node) && parkAndCheckInterrupt()) {
				interrupted = true;
			}
		}
		
		
	} finally {
		/**
		 * 失败释放锁。除非异常，否则一直返回failed=false。
		 */
		if (failed) {
			cancelAcquire(node);
		}
	}
}

/** 
 * 设置head节点，node的thread和前驱设为空。
 */
private void setHead(Node node) {
	head = node;
	node.thread = null;
	node.prev = null;
}




##############################################################################################
#    状态		#	判断结果		#			说明                                         #
# waitStatus=0	#	代表初始化状态	#	该节点尚未被初始化完成                               #
# waitStatus>0	#	取消状态		#	说明该线程中断或者等待超时，需要移除该线程           #
# waitStatus<0	#	有效状态		#	该线程处于可以被唤醒的状态                           #
##############################################################################################
#              			static final int CANCELLED =  1;						             #
#                       static final int SIGNAL    = -1;								     #
#                       static final int CONDITION = -2;								     #
#                       static final int PROPAGATE = -3;								     #
##############################################################################################

/**
 * 1、如果前驱节点是等待状态，直接返回true【即获取失败后应该暂停】
 * 2、如果前驱节点是取消状态，从队列中剥离前驱节点，直到前驱节点不为取消状态，并返回false。
 * 3、如果是其他状态，则CAS修改前驱节点的状态为等待状态，返回false。
 *
 * 判断前驱节点的状态：
 *		唤醒状态：返回ture。
 *		CANCELLED状态：从队列中删除这些出于cancelled节点。
 */
private static boolean shouldParkAfterFailedAcquire(Node pred, Node node) {
	
	// 获取前驱的状态。
	int ws = pred.waitStatus;
	
	/** 
	 * 前驱节点为SIGNAL = -1；
	 * 就是处于唤醒状态，只要前继结点释放锁，就会通知标识为SIGNAL状态的后继结点的线程执行。
	 */
	if (ws == Node.SIGNAL) {
		return true;
	}
	
	/**
	 * 判断前驱节点的状态是否为取消状态。
	 * 如果前驱节点是取消状态，把节点从队里中移除。
	 */
	if (ws > 0) {
		do {
			/**
			 * （把node的前驱）的前驱复制给node前驱，就是从队列中取出pred节点。这个会一直判断，直到找到node的上面的第一个waitStatus不大于0的节点。
			 *  pred.prev  <-->  pred   <-->   node
			 *  pred.prev  <-->  node
			 */
			node.prev = pred = pred.prev;
			
		} while (pred.waitStatus > 0);
		
		pred.next = node;
		
		
	} else {
		/**
		 * ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
		 * ^		waitStatus必须等于0或者是PROPAGATE = -3        ^
		 * ^		设置前驱节点得waitStatus为-1。                 ^
		 * ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
		 */
		compareAndSetWaitStatus(pred, ws, Node.SIGNAL);
	}
	
	
	return false;
}



/**
 * 通过CAS改变该节点的状态。
 */
private static final boolean compareAndSetWaitStatus(Node node, int expect, int update) {
	return unsafe.compareAndSwapInt(node, waitStatusOffset, expect, update);
}


/**
 * 暂停一下，并检查中断。中断返回true。
 */
private final boolean parkAndCheckInterrupt() {
	// 线程会堵塞在这里，直到线程调用LockSupport.unpark()才会往下执行。
	LockSupport.park(this);
	return Thread.interrupted();
}

/**
 *
 */
private void cancelAcquire(Node node) {
	if (node == null) {
		return;
	}

	node.thread = null;

	// 节点的前驱节点。
	Node pred = node.prev;
	
	while (pred.waitStatus > 0) {
		// （把node的前驱）的前驱复制给node前驱，就是从队列中取出pred节点。
		node.prev = pred = pred.prev;
	}

	Node predNext = pred.next;

	node.waitStatus = Node.CANCELLED;

	// compareAndSetTail()：CAS修改队列的尾节点。
	if (node == tail && compareAndSetTail(node, pred)) {
		// CAS修改前驱的后继节点为null。
		compareAndSetNext(pred, predNext, null);
	} else {
		int ws;
		if (pred != head && ((ws = pred.waitStatus) == Node.SIGNAL || (ws <= 0 && compareAndSetWaitStatus(pred, ws, Node.SIGNAL))) && pred.thread != null) {
			Node next = node.next;
			
			if (next != null && next.waitStatus <= 0) {
				compareAndSetNext(pred, predNext, next);
			}
		} else {
			// 把头节点从有效状态（waitStatus < 0）通过CAS改为取消状态（waitStatus = 0）。并把后继节点状态（waitStatus < 0）的节点的线程唤醒。
			unparkSuccessor(node);
		}

		node.next = node;
	}
}






#####################################################
#				独占锁--解锁						#
#####################################################
/**
 * 解锁过程。
 * 		1、如果尝试释放锁成功，需要把头节点从有效状态（waitStatus < 0）通过CAS改为取消状态（waitStatus = 0）。获取后继节点中，状态为有效状态的节点，并启动
 * 		   节点中的线程。
 *		2、尝试释放锁失败，直接返回。
 */
public final boolean release(int arg) {
	/**
	 * 只用尝试释放成功以后，才会执行if语句内部的内容。
	 */
	if (tryRelease(arg)) {
	
		Node h = head;
		
		// 头节点不为空，并且状态不等于0(0代表是初始化状态)
		if (h != null && h.waitStatus != 0) {
		
			// 把头节点从有效状态（waitStatus < 0）通过CAS改为取消状态（waitStatus = 0）。并把后继节点状态（waitStatus < 0）的节点的线程唤醒。
			unparkSuccessor(h);
		}
		return true;
		
	}
	return false;
}

/**
 * 尝试解锁，留给子类实现。
 */
protected boolean tryRelease(int arg) {
	throw new UnsupportedOperationException();
}


/**
 * 把头节点从有效状态（waitStatus < 0）通过CAS改为取消状态（waitStatus = 0）。并把后继节点状态（waitStatus < 0）的节点的线程唤醒。
 *
 * 传入的node：头节点。
 */
private void unparkSuccessor(Node node) {

	// 获取节点的状态
	int ws = node.waitStatus;
	
	if (ws < 0) {
		/**
		 * ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
		 * ^		通过CAS把状态更改0【初始化状态】。		 ^
		 * ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
		 */
		compareAndSetWaitStatus(node, ws, 0);
	}

	// 获取node【头节点】的后继节点。
	Node s = node.next;
	
	/**
	 * 【头节点的】后继节点为空或者是节点已经取消。
	 *
	 * 然后从未节点开始找【从后往前找】，找到最开头状态为正常的节点。
	 */
	if (s == null || s.waitStatus > 0) {
		s = null;
		for (Node t = tail; t != null && t != node; t = t.prev) {
			if (t.waitStatus <= 0) {
				s = t;
			}
		}
	}
	
	/**
	 * 如果有后继节点，通过调用LockSupport的unpart()方法把后继节点中的线程重新唤起。
	 */
	if (s != null) {
		LockSupport.unpark(s.thread);
	}
}






☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆
☆                ReentrantLock_tryAcquire为例获取锁                        ☆
☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆


/**
 * ReentrantLock加锁。
 */
location：ReentrantLock
public void lock() {
	sync.lock();
}


/**
 * FairSync继承了Sync
 *
 * ReentrantLock.FairSync：加锁。
 */
location：ReentrantLock.FairSync
final void lock() {
	acquire(1);
}


/**
 *  AbstractQueuedSynchronizer
 *			ReentrantLock.Sync
 *					ReentrantLock.FairSync【公平锁】
 *					ReentrantLock.NonfairSync【非公平锁】
 * 
 * 尝试获取锁。
 */
location：ReentrantLock.FairSync
protected final boolean tryAcquire(int acquires) {

	final Thread current = Thread.currentThread();
	
	// 获取当前AQS的同步状态。
	int c = getState();
	
	
	/**
	 * 如果AQS的同步状态为0，说明还没有线程获取到锁。可以进入if代码块去获取锁。
	 */
	if (c == 0) {
	
		/**
		 * hasQueuedPredecessors()：判断是否有排队的节点。如果有返回true；如果没有返回false。
		 * 
		 * ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
		 * ^	如果没有排队节点【并且】通过CAS把AQS队里的同步状态改为传入的参数成功，则获取到锁。		^
		 * ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
		 *
		 */
		if (!hasQueuedPredecessors() && compareAndSetState(0, acquires)) {
			
			// 把当前线程设置为AQS独占模式下  线程所有者。
			setExclusiveOwnerThread(current);
			return true;
		}
		
	
	/**
	 * 如果AQS的同步状态为0，说明AQS已经有线程获取到锁，判断当前线程和AQS的线程是否是同一个，
	 * 如果是同一个，可以继续上锁【【【这就是重入锁】】】。
	 */
	} else if (current == getExclusiveOwnerThread()) {
	
		// 把同步状态加上acquires。
		int nextc = c + acquires;
		
		if (nextc < 0) {
			throw new Error("Maximum lock count exceeded");
		}
		
		/**
		 * 更新AQS的同步状态。
		 */
		setState(nextc);
		
		return true;
	}
	
	/**
	 * 如果AQS的状态不为0，并且当前线程不等于AQS已经获取到的锁的线程，直接返回false，索取锁失败。
	 */
	return false;
}


/**
 * 判断是否有排队的节点。如果有返回true；如果没有返回false。
 */
location：AbstractQueuedSynchronizer
public final boolean hasQueuedPredecessors() {
	Node t = tail; 
	Node h = head;
	Node s;
	
	/**
	 * 什么时候返回true：
	 *			头尾节点不是一个 【并且】 头结点的后继节点为空或者头结点的后继节点的线程不是当前线程。
	 *
	 * (s = h.next) == null || s.thread != Thread.currentThread()：如果头结点的后继节点不为空，则头结点的后继节点的现在要不等于当前线程。
	 *															   如果头结点的后继节点为空。
	 */
	return h != t && ((s = h.next) == null || s.thread != Thread.currentThread());
}


/**
 * 独占模式同步的当前线程所有者。
 */
location：AbstractQueuedSynchronizer
protected final void setExclusiveOwnerThread(Thread thread) {
	exclusiveOwnerThread = thread;
}





☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆
☆                ReentrantLock_tryAcquire为例获取锁                        ☆
☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆


/**
 * 独占模式释放锁。  
 */
location：ReentrantLock
public void unlock() {
	sync.release(1);
}


/**
 * 尝试释放锁。
 */
location：Sync
protected final boolean tryRelease(int releases) {
	// 获取同步状态 - releases
	int c = getState() - releases;
	
	// 判读当前线程是否和AQS获取锁的线程是否一致。
	if (Thread.currentThread() != getExclusiveOwnerThread()) {
		throw new IllegalMonitorStateException();
	}
	
	boolean free = false;
	
	/**
	 * 如果释放后的的同步状态是0，把AQS的独占模式持有的线程置为null。
	 */
	if (c == 0) {
		free = true;
		setExclusiveOwnerThread(null);
	}
	setState(c);
	return free;
}


















#######################################################################################################################################################
#########################################                        共享锁代码解析                  ######################################################
#######################################################################################################################################################

#####################################################
#				共享锁--加锁						#
#####################################################
   
/**
 * 尝试获取锁失败 ==>
 */
public final void acquireShared(int arg) {
	
	// 尝试获取共享锁。 
	if (tryAcquireShared(arg) < 0) {
		doAcquireShared(arg);
	}
}


/**
 * 尝试获取共享锁。
 * 		返回值： < 0  ===  失败
 * 		返回值： = 0  ===  如果共享模式下获取成功，但是后续共享模式获取不成功。
 * 		返回值： > 0  ===  如果共享模式下的获取成功并且后续共享模式下的获取也可能成功，
 *						   则为正值，在这种情况下，后续的等待线程必须检查可用性。
 */
protected int tryAcquireShared(int arg) {
	throw new UnsupportedOperationException();
}



/** 
 * 获取共享锁失败要做的事情。
 *
 * 		1、创建一个新的Node并把这个Node添加到AQS等待队列中。
 * 		2、开始自旋操作。
 * 		3、如果该节点的前驱节点是头节点（说明这个时候这个节点可能要被唤醒），再次尝试获取共享锁，获取共享锁成功以后，
 * 			3-1、获取锁成功的节点，把该节点设置为头节点，并把设置为头节点的后继节点状态>=0的节点，唤醒，如果不中断，直接返回。
 *		4、如果不是头节点，就可能要把线程挂起。
 *
 * 共享锁会有两个队列，一个在AQS中，一个在Node中
 */ 
private void doAcquireShared(int arg) {

	/**
	 * Node.SHARED：static final Node SHARED = new Node();这个是不可变的。 
	 * 如果是共享模式，需要向等待队列中添加时，需要传入一个Node，这个Node是一个final和static修饰的。 
	 * 
	 * 创建一个新的Node并把这个Node添加到AQS等待队列中，并返回添加的Node。
	 */
	final Node node = addWaiter(Node.SHARED);
	boolean failed = true;
	
	try {
		boolean interrupted = false;
		
		for (;;) {
		
			
			/**
			 * predecessor()：获取当前节点的前驱节点。
			 *			      如果前驱节点是头节点，会去尝试获取共享锁。
			 */
			final Node p = node.predecessor();
			
			if (p == head) {
			
				// 尝试获取共享锁。
				int r = tryAcquireShared(arg);
				
				/**
				 * 如果尝试获取共享锁成功以后，进入if。
				 */
				if (r >= 0) {
					
					/**
					 * 尝试获取锁成功的节点，把该节点设置为头节点，并把设置为头节点的后继节点状态>=0的节点，唤醒。
					 */
					setHeadAndPropagate(node, r);
					p.next = null; 
					
					if (interrupted) {
						selfInterrupt();
					}
					
					failed = false;
					return;
				}
			}
			
			/**
			 * shouldParkAfterFailedAcquire：根据前驱节点的状态，进行不同的操作。
			 *											如果前驱节点状态为（SIGNAL = -1）有效状态，直接返回true。
			 *											如果前驱节点状态为（  	>0	）取消状态，从队里中剔除，返回false。
			 *											如果其他状态，CAS把状态改为（SIGNAL = -1）有效状态，返回false。
			 *								
			 *								 一般情况都是返回true。如果第一次返回false，
			 *											第二次如果头节点是等待状态，就挂起线程。
			 *											第二次如果获取锁成功，这中断这个线程。
			 *
			 * parkAndCheckInterrupt：挂起当前线程。
			 */
			if (shouldParkAfterFailedAcquire(p, node) && parkAndCheckInterrupt()) {
				interrupted = true;
			}
		}
	} finally {
		if (failed) {
			cancelAcquire(node);
		}
	}
}

/**
 * 如果节点获取锁成功，说明这个节点就是头节点。
 *
 * 1、把当前节点设置为头节点。
 * 2、判断传播状态是否大于0，如果大于0，唤起头节点的后继节点状态为<=0的节点。【这个时候头节点已经设置为当前接点】
 *
 * node：当前节点
 * propagate：尝试获取共享锁的结果。
 */
private void setHeadAndPropagate(Node node, int propagate) {
	Node h = head; 
	
	// 把该节点设置为头节点，并把节点的thread和前驱节点设为空。
	setHead(node);
	
	/**
	 * propagate > 0 说明获取锁成功，代表可以继续获取锁。如果当前节点获取共享锁成功以后，
	 * 判断老的头结点和新的头结点，如果新老头节点为有效状态（waitStatus < 0）进入循环。
	 * 
	 * propagate = 0 自动唤醒模式。
	 */
	if (propagate > 0 || h == null || h.waitStatus < 0 || (h = head) == null || h.waitStatus < 0) {
	
		// 获取节点的后继节点。
		Node s = node.next;
		
		/**
		 * 如果获取共享锁的节点存在后继节点，并且节点是共享状态的，继续释放后继节点。
		 * 
		 * 如果后继节点null 【或者】 判断这个节点是否是共享模式的。
		 */
		if (s == null || s.isShared()) {
			doReleaseShared();
		}
	}
}


/**
 * 释放共享。
 *		1、头节点不为空并且头节点和尾节点不是一个节点
 * 		2、判断头节点是否是等待状态（SIGNAL = -1）。
 *		3、如果是等待状态通过CAS把头节点状态改为0（初始状态），如果更改成功唤醒头节点的后继节点状态<0的节点。
 * 		4、如果是初始状态，并且通过CAS把节点状态改为-3（传播状态），继续下次循环
 *		
 */
private void doReleaseShared() {

	for (;;) {
		Node h = head;	
		
		// 头节点不为空 【并且】 头节点和尾节点不是一个节点。
		if (h != null && h != tail) {
		
			// 获取头节点的状态。
			int ws = h.waitStatus;
			
			
			/**
			 * 挂起的节点会通过shouldParkAfterFailedAcquire方法把节点的前驱节点设置为SIGNAL。
			 * 如果头节点处于唤醒状态，直接唤醒头节点。 【只要前继结点释放锁，就会通知标识为SIGNAL状态的后继结点的线程执行】
			 *
			 * 判断头节点的状态是否是唤醒状态。
			 *
			 */
			if (ws == Node.SIGNAL) {
				 
				/**
				 * ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
				 * ^	CAS把头节点改为0[初始化状态]。如果成功进行下面操作  	^
				 * ^    唤醒该节点的有效状态的后继节点。						^
				 * ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
				 */
				if (!compareAndSetWaitStatus(h, Node.SIGNAL, 0)) {
					continue;            
				}
				
				/**
				 * 把头节点从有效状态（waitStatus < 0）通过CAS改为取消状态（waitStatus = 0）。
				 * 并头节的后继节点状态（waitStatus < 0 唤醒状态）的节点的线程唤醒。
				 */
				unparkSuccessor(h);
				
			
			
			/** 
			 * ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
			 * ^ 	如果头节点状态为0，就CAS把头结点的改为PROPAGATE。                        ^
			 * ^ 	【PROPAGATE：共享模式中，该状态标识结点的线程处于可运行状态】            ^
			 * ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
			 */
			} else if (ws == 0 && !compareAndSetWaitStatus(h, 0, Node.PROPAGATE)) {
				continue;                
			}
		}
		
		if (h == head) {
			break;
		}
	}
}



#####################################################
#				共享锁--解锁						#
#####################################################

/**
 * tryReleaseShared()：尝试解锁成功以后
 * doReleaseShared()：释放共享锁。
 */
public final boolean releaseShared(int arg) {
	if (tryReleaseShared(arg)) {
		doReleaseShared();
		return true;
	}
	return false;
}





☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆
☆    ReentrantReadWriteLock_ReadLock_tryAcquireShared为例获取锁            ☆
☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆

/**
 * ReentrantReadWriteLock获取读锁。
 */
location：ReentrantReadWriteLock
public ReentrantReadWriteLock.ReadLock  readLock()  { 
	return readerLock; 
}


/**
 * ReentrantReadWriteLock的读锁进行上锁。
 */
location：ReentrantReadWriteLock.ReadLock
public void lock() {
	sync.acquireShared(1);
}


/**
 *  WriteLock、ReadLock内部都维持一个Sync实例。
 *
 *	// ReentrantReadWriteLock的构造函数。
 * 	public ReentrantReadWriteLock(boolean fair) {
 *     	sync = fair ? new FairSync() : new NonfairSync();
 *      readerLock = new ReadLock(this);
 *      writerLock = new WriteLock(this);
 *  }
 * 
 *  
 *  ReentrantReadWriteLock.Sync   extends  AbstractQueuedSynchronizer
 */
location：ReentrantReadWriteLock.Sync
protected final int tryAcquireShared(int unused) {
	/**
	 * 获取当前线程，和AQS的的同步状态。
	 */
	Thread current = Thread.currentThread();
	int c = getState();
	
	
	if (exclusiveCount(c) != 0 && getExclusiveOwnerThread() != current) {
		return -1;
	}
	
	// 获取共享锁的数量。
	int r = sharedCount(c);
	
	
	if (!readerShouldBlock() && r < MAX_COUNT && compareAndSetState(c, c + SHARED_UNIT)) {
		if (r == 0) {
			firstReader = current;
			firstReaderHoldCount = 1;
		} else if (firstReader == current) {
			firstReaderHoldCount++;
		} else {
			HoldCounter rh = cachedHoldCounter;
			if (rh == null || rh.tid != getThreadId(current)) {
				cachedHoldCounter = rh = readHolds.get();
			} else if (rh.count == 0) {
				readHolds.set(rh);
			}
			rh.count++;
		}
		return 1;
	}
	
	return fullTryAcquireShared(current);
}


/**
 *
 */
location：ReentrantReadWriteLock.Sync
final int fullTryAcquireShared(Thread current) {
	HoldCounter rh = null;
	
	for (;;) {
		int c = getState();
		if (exclusiveCount(c) != 0) {
			if (getExclusiveOwnerThread() != current) {
				return -1;
			}
		} else if (readerShouldBlock()) {
			
			if (firstReader == current) {
				// ...
			} else {
				if (rh == null) {
					rh = cachedHoldCounter;
					if (rh == null || rh.tid != getThreadId(current)) {
						rh = readHolds.get();
						if (rh.count == 0) {
							readHolds.remove();
						}
					}
				}
				if (rh.count == 0) {
					return -1;
				}
			}
		}
		if (sharedCount(c) == MAX_COUNT) {
			throw new Error("Maximum lock count exceeded");
		}
		
		if (compareAndSetState(c, c + SHARED_UNIT)) {
			if (sharedCount(c) == 0) {
				firstReader = current;
				firstReaderHoldCount = 1;
				
			} else if (firstReader == current) {
				firstReaderHoldCount++;
			
			} else {
				if (rh == null) {
					rh = cachedHoldCounter;
				}
				if (rh == null || rh.tid != getThreadId(current)) {
					rh = readHolds.get();
				} else if (rh.count == 0) {
					readHolds.set(rh);
				}
				
				rh.count++;
				
				cachedHoldCounter = rh;
			}
			
			return 1;
		}
	}
}



/**
 *
 */
location：ReentrantReadWriteLock.Sync
static int exclusiveCount(int c) { 
	return c & EXCLUSIVE_MASK; 
}


/**
 *
 */
location：ReentrantReadWriteLock.Sync
static int sharedCount(int c) { 
	return c >>> SHARED_SHIFT; 
}







☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆
☆    ReentrantReadWriteLock_ReadLock_tryAcquireShared为例获取锁            ☆
☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆
/**
 *
 */
location：ReentrantReadWriteLock.Sync
protected final boolean tryReleaseShared(int unused) {
	Thread current = Thread.currentThread();
	
	if (firstReader == current) {
		if (firstReaderHoldCount == 1) {
			firstReader = null;
		} else {
			firstReaderHoldCount--;
		}
	} else {
		HoldCounter rh = cachedHoldCounter;
		if (rh == null || rh.tid != getThreadId(current)) {
			rh = readHolds.get();
		}
		int count = rh.count;
		if (count <= 1) {
			readHolds.remove();
			if (count <= 0)
				throw unmatchedUnlockException();
		}
		--rh.count;
	}
	
	for (;;) {
		int c = getState();
		int nextc = c - SHARED_UNIT;
		
		if (compareAndSetState(c, nextc)) {
			return nextc == 0;
		}
		
	}
}