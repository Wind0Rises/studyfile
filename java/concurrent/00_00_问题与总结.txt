


一、面试题
	1)、进程和线程的区别
		* 一个最最基础的事实：CPU太快，太快，太快了，寄存器仅仅能够追的上他的脚步，RAM和别的挂在各总线上的设备完全是望其项背。那当多个任务要执行的时候怎么办呢？轮流着来?或者谁优先级高谁来？不管怎么样的策略，
		  一句话就是在CPU看来就是轮流着来。
		* 一个必须知道的事实：执行一段程序代码，实现一个功能的过程介绍 ，当得到CPU的时候，相关的资源必须也已经就位，就是显卡啊，GPS啊什么的必须就位，然后CPU开始执行。这里除了CPU以外所有的就构成了这个程序的
		  执行环境，也就是我们所定义的程序上下文。当这个程序执行完了，或者分配给他的CPU执行时间用完了，那它就要被切换出去，等待下一次CPU的临幸。在被切换出去的最后一步工作就是保存程序上下文，因为这个是下次他
		  被CPU临幸的运行环境，必须保存。

		* 进程就是包换上下文切换的程序执行时间总和 = CPU加载上下文 + CPU执行 + CPU保存上下文
		* 进程和线程都是一个时间段的描述，是CPU工作时间段的描述，不过是颗粒大小不同。


	2)、你项目中的用到了哪些高并发场景。（并发同步问题）
		* 我们生产使用了Nginx做了负载。
		* 申请、用款、还款都是异步操作的。


	3)、请说出与线程同步以及线程调度相关的方法。
		* 配合synchronized使用的wait()、notify()、notifyAll()。
		* Thread自己的sleep()、join()等。
		* 基于Lock实现额Condition类。
		
		
	4)、进程调度算法
		实时系统：FIFO(First Input First Output，先进先出算法)，SJF(Shortest Job First，最短作业优先算法)，SRTF(Shortest Remaining Time First，最短剩余时间优先算法）。
		交互式系统：RR(Round Robin，时间片轮转算法)，HPF(Highest Priority First，最高优先级算法)，多级队列，最短进程优先，保证调度，彩票调度，公平分享调度。


	5)、Synchronized的使用与原理
		* synchronized是可重入锁。
		* monitorenter、monitorexit、acc_synchronizd
		* 对象锁和类锁。
		* 无锁状态、偏向锁、轻量级锁和重量级锁。







1、


Condition：类似Object类的wait、notify()、notifyAll()操作。它提供了更加全面的功能，入wait(long time)等待时间的设置。
