


零、待分析。
	1、RequestMappingHandlerAdapter中的HttpMessageConverter集合是什么时候添加的？？
	2、


一、总结
	1)、流程。
		1、检查是否是文件上传请求。
		2、遍历HandlerMapping获取对应的HandlerExecutorChain。通过请求信息（主要是根据URI）获取注册到HandlerMapping上的Handler（可能是HandlerMehtod、Servlet、
			Controller、HttpRequestHandler）。HandlerExecutorChain中包含【一个】Handler，和【一些】HandlerIntercept。
			【注：Handler是对HandlerMehtod、Servlet、Controller、HttpRequestHandler的统称】
		3、遍历HandlerAdapter获取对应HandlerAdapter（主要根据Handler的类型），现在主流的RequestMappingHandlerAdapter。
		
		【HandlerIntercept前置处理】
		
		4、执行处理HandlerAdapter执行对应的Handler，并返回一个ModelAndView。以RequestMappingHandlerMapping为例，这里面的处理的东西很多。
			4-1：遍历HandlerMehtod中的所有参数。首先通过参数类型获取对应的HandlerMethodArgumentResolver。然后在HandlerMethodArgumentResolver中解析请求并把请求
				 转换成HandlerMehtod中参数类型的实例，这里通过HttpMessageConverter进行读取信息和装换操作，可以通过Content-Type和参数类型获取适合的HttMessageConverter
			4-2：构建一个WebDataBinder，进行必要的参数校验处理。
			4-3：通过反射调用HandlerMapping。
		    4-4：对返回结果值进行处理。通过返回值的类型获取对应的HandlerMethodReturnValueHandler，在HandlerMethodReturnValueHandler中会把响应信息写入输出流，
				 真正操作的是HttpMessageConverter，可以根据返回类型和MideaType确定使用哪一个HttpMessageConverter
			4-5：构建一个ModelAndView。
		
		【HandlerIntercept后置处理】
		
		5、创建View，并使用RequestDispatcher进行
		
		
		
		
二、重要的类
	1、HandlerInterceptor
		
	2、MappedInterceptor

	3、WebDataBinderFactory：通过给定的对象一个创建WebDataBinder实例的工厂类。
		方法：
			WebDataBinder createBinder(NativeWebRequest webRequest, Object target, String objectName)：

	4、DataBinder
			
	5、WebDataBinder：把允许设置的属性值绑定给定的对象。包括验证的支持和绑定结果分析。可以自定义绑定操作，对于特使字段，
	
	6、ModelAndViewContainer：
		
	7、WebAsyncManager（final）：管理同步请求操作的核心类。
			

			
			

			

三、源码

/**
 * 对请求进行分发。
 */ 
location：DispatcherServlet
protected void doDispatch(HttpServletRequest request, HttpServletResponse response) throws Exception {
	
	HttpServletRequest processedRequest = request;
	HandlerExecutionChain mappedHandler = null;
	boolean multipartRequestParsed = false;

	// 主要用来管理异步请求的处理。
	WebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request);

	try {
		ModelAndView mv = null;
		Exception dispatchException = null;

		try {
		
		
			/**
			 * 01、检查是否是文件上传。
			 */
			processedRequest = checkMultipart(request);
			multipartRequestParsed = (processedRequest != request);

			
			
			/**
			 * 02、获取对应的HandlerExecutionChain。【【【根据请求获取对应的HandlerExecutionChain】】】
			 * 		HandlerExecutionChain只能通过HandlerMapping中的getHandler(..)方法获取到。
			 */
			mappedHandler = getHandler(processedRequest);
			if (mappedHandler == null || mappedHandler.getHandler() == null) {
				noHandlerFound(processedRequest, response);
				return;
			}

			
			
			/** 
			 * mappedHandler.getHandler()：获取的就是HandlerMethod。
			 * 03、确定当前请求的处理器适配器。【getHandlerAdapter】
			 */
			HandlerAdapter ha = getHandlerAdapter(mappedHandler.getHandler());

			
			
			
			// 获取请求的方法。
			String method = request.getMethod();
			boolean isGet = "GET".equals(method);
			
			/**
			 * 04、判读是否是GET请求或者是HEAD请求。
			 */
			if (isGet || "HEAD".equals(method)) {
				// 这个与缓存有关，可以研究一下？？？？
				long lastModified = ha.getLastModified(request, mappedHandler.getHandler());
				if (logger.isDebugEnabled()) {
					logger.debug("Last-Modified value for [" + getRequestUri(request) + "] is: " + lastModified);
				}
				if (new ServletWebRequest(request, response).checkNotModified(lastModified) && isGet) {
					return;
				}
			}

			/**
			 * ######################################
			 * #  拦截器的前置处理的前置处理		#
			 * ######################################
			 */
			if (!mappedHandler.applyPreHandle(processedRequest, response)) {
				return;
			}

			/**
			 * 04、调用HandlerAdapter的handler方法。获取对应ModelAndView
			 */
			mv = ha.handle(processedRequest, response, mappedHandler.getHandler());

			if (asyncManager.isConcurrentHandlingStarted()) {
				return;
			}

			/**
			 * 06、添加视图默认的名称
			 */
			applyDefaultViewName(processedRequest, mv);
			
			
			
			/**
			 * 07、HandlerExecutionChain后置处理
			 */
			mappedHandler.applyPostHandle(processedRequest, response, mv);
			
		} catch (Exception ex) {
			dispatchException = ex;
		} catch (Throwable err) {
			dispatchException = new NestedServletException("Handler dispatch failed", err);
		}
		
		/**
		 * 08、结果处理、获取视图解析解
		 */
		processDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);
		
		
	} catch (Exception ex) {
		triggerAfterCompletion(processedRequest, response, mappedHandler, ex);
	} catch (Throwable err) {
		triggerAfterCompletion(processedRequest, response, mappedHandler,  new NestedServletException("Handler processing failed", err));
	} finally {
		if (asyncManager.isConcurrentHandlingStarted()) {
			if (mappedHandler != null) {
				mappedHandler.applyAfterConcurrentHandlingStarted(processedRequest, response);
			}
		} else {
			if (multipartRequestParsed) {
				cleanupMultipart(processedRequest);
			}
		}
	}
}







#############################################
#        	 01、是否是文件上传#			#
#############################################
/**
 * 判断是否是Multipart请求请求
 */
location：DispatcherServlet
protected HttpServletRequest checkMultipart(HttpServletRequest request) throws MultipartException {
	if (this.multipartResolver != null && this.multipartResolver.isMultipart(request)) {
		if (WebUtils.getNativeRequest(request, MultipartHttpServletRequest.class) != null) {
			logger.debug("Request is already a MultipartHttpServletRequest - if not in a forward, " + "this typically results from an additional MultipartFilter in web.xml");
		} else if (hasMultipartException(request) ) {
			logger.debug("Multipart resolution failed for current request before - " + "skipping re-resolution for undisturbed error rendering");
		} else {
			try {
				return this.multipartResolver.resolveMultipart(request);
			} catch (MultipartException ex) {
				if (request.getAttribute(WebUtils.ERROR_EXCEPTION_ATTRIBUTE) != null) {
					logger.debug("Multipart resolution failed for error dispatch", ex);
				} else {
					throw ex;
				}
			}
		}
	}
	return request;
}






#################################################################
#       02、获取处理器执行链(HandlerExecutionChain)				#
#################################################################
/**
 * 获取对应request的HandlerExecutionChain。
 * 		HandlerExecutionChain只能通过HandlerMapping中的getHandler(..)方法获取到。
 */
location：DispatcherServlet
protected HandlerExecutionChain getHandler(HttpServletRequest request) throws Exception {

	/**
	 * handlerMappings是初始化DispatcherServlet的时候设置的。在解析<mvc:annotation-driven>的时候注入BeanFactory的。
	 * 		默认注入BeanNameUrlHandlerMapping和RequestMappingHandlerMapping。如果使用默认配置DispatcherServlet.properties文件中多个SimpleUrlHandlerMapping。
	 */ 
	for (HandlerMapping hm : this.handlerMappings) {
		
		if (logger.isTraceEnabled()) {
			logger.trace("Testing handler map [" + hm + "] in DispatcherServlet with name '" + getServletName() + "'");
		}
		
		/**
		 * hm ====> 现在主流的都是RequestMappingHandlerMapping。
		 *
		 * 通过HandlerMapping获取到HandlerExecutionChain，如果获取到了，直接处理放回，不会再调用后面的HandlerMapping.
		 */
		HandlerExecutionChain handler = hm.getHandler(request);
		
		if (handler != null) {
			return handler;
		}
	}
	
	return null;
}


/**
 *	HandlerMapping主要类图。
 *
 *	HandlerMapping	
 *			AbstractHandlerMapping
 *						AbstractUrlHandlerMapping			
 *									AbstractDetectingUrlHandlerMapping
 *													DefaultAnnotationHandlerMapping【@Deprecated】
 *													BeanNameUrlHandlerMapping【☆☆☆☆☆☆】
 *													AbstractControllerUrlHandlerMapping【@Deprecated】
 *																ControllerClassNameHandlerMapping【@Deprecated】
 *																ControllerBeanNameHandlerMapping【@Deprecated】
 *									AbstractHandlerMethodMapping							
 *													RequestMappingInfoHandlerMapping			
 *																RequestMappingHandlerMapping【☆☆☆☆☆☆】
 *
 * 
 * 
 */
location：AbstractHandlerMapping【只有这个类实现了，所有所以的HandlerMapping处理方式都是一样的。】
public final HandlerExecutionChain getHandler(HttpServletRequest request) throws Exception {
	/**
	 *  通过请求获取对应的HandlerMethod(就是被@RequestMapping修饰的方法，只是Spring进行了保证。)
	 */
	Object handler = getHandlerInternal(request);
	
	if (handler == null) {
		handler = getDefaultHandler();
	}
	
	if (handler == null) {
		return null;
	}
	
	
	/**
	 * 如果获取的是handler是字符串，就从Application中获取对应的Bean。
	 */
	if (handler instanceof String) {
		String handlerName = (String) handler;
		handler = getApplicationContext().getBean(handlerName);
	}

	/**
	 * ######################################################################################################
	 * #		获取HandlerExecutionChain实例。HandlerExecutionChain保存着handler和拦截器。					#
	 * ######################################################################################################
	 */
	HandlerExecutionChain executionChain = getHandlerExecutionChain(handler, request);
	
	if (CorsUtils.isCorsRequest(request)) {
		CorsConfiguration globalConfig = this.globalCorsConfigSource.getCorsConfiguration(request);
		CorsConfiguration handlerConfig = getCorsConfiguration(handler, request);
		CorsConfiguration config = (globalConfig != null ? globalConfig.combine(handlerConfig) : handlerConfig);
		executionChain = getCorsHandlerExecutionChain(request, executionChain, config);
	}
	
	return executionChain;
}



/**
 * 以RequestMappingHandlerMapping为例。
 *		通过请求获取对应的HandlerMethod(就是被@RequestMapping修饰的方法，只是Spring进行了保证。)
 *
 */
location：AbstractHandlerMethodMapping
protected HandlerMethod getHandlerInternal(HttpServletRequest request) throws Exception {
	/**
	 * 获取请求的url。除去上下文的剩余的部分。
	 */
	String lookupPath = getUrlPathHelper().getLookupPathForRequest(request);
	
	if (logger.isDebugEnabled()) {
		logger.debug("Looking up handler method for path " + lookupPath);
	}
	
	// 上锁。
	this.mappingRegistry.acquireReadLock();
	
	try {
		// 获取对应的HandlerMethod
		HandlerMethod handlerMethod = lookupHandlerMethod(lookupPath, request);
		
		if (logger.isDebugEnabled()) {
			if (handlerMethod != null) {
				logger.debug("Returning handler method [" + handlerMethod + "]");
			} else {
				logger.debug("Did not find handler method for [" + lookupPath + "]");
			}
		}
		
		/**
		 * 创建对应的类的Bean，并构建出HandlerMethod
		 */
		return (handlerMethod != null ? handlerMethod.createWithResolvedBean() : null);
	} finally {
		// 释放锁。
		this.mappingRegistry.releaseReadLock();
	}
}



/**
 * 以RequestMappingHandlerMapping为例。
 *
 * 从RequestMappingHandlerMappping中获取初始化的时候注册的HandlerMethod。
 */
location：AbstractHandlerMethodMapping
protected HandlerMethod lookupHandlerMethod(String lookupPath, HttpServletRequest request) throws Exception {
	List<Match> matches = new ArrayList<Match>();
	
	// mappingRegistry里的数据就是在初始化的时候添加的，RequestMappingHandlerMapping实现了InitializingBean接口。
	// 通过url从MappingRegistry中的获取对应数据。
	List<T> directPathMatches = this.mappingRegistry.getMappingsByUrl(lookupPath);
	
	
	if (directPathMatches != null) {
		addMatchingMappings(directPathMatches, matches, request);
	}
	
	if (matches.isEmpty()) {
		addMatchingMappings(this.mappingRegistry.getMappings().keySet(), matches, request);
	}

	if (!matches.isEmpty()) {
		Comparator<Match> comparator = new MatchComparator(getMappingComparator(request));
		Collections.sort(matches, comparator);
		if (logger.isTraceEnabled()) {
			logger.trace("Found " + matches.size() + " matching mapping(s) for [" + lookupPath + "] : " + matches);
		}
		Match bestMatch = matches.get(0);
		
		if (matches.size() > 1) {
			if (CorsUtils.isPreFlightRequest(request)) {
				return PREFLIGHT_AMBIGUOUS_MATCH;
			}
			Match secondBestMatch = matches.get(1);
			
			if (comparator.compare(bestMatch, secondBestMatch) == 0) {
				Method m1 = bestMatch.handlerMethod.getMethod();
				Method m2 = secondBestMatch.handlerMethod.getMethod();
				throw new IllegalStateException("Ambiguous handler methods mapped for HTTP path '" + request.getRequestURL() + "': {" + m1 + ", " + m2 + "}");
			}
		}
		
		handleMatch(bestMatch.mapping, lookupPath, request);
		
		return bestMatch.handlerMethod;
	} else {
		return handleNoMatch(this.mappingRegistry.getMappings().keySet(), lookupPath, request);
	}
}

/**
 * 创建对应的类的Bean，并构建出HandlerMethod
 */
location：HandlerMethod
public HandlerMethod createWithResolvedBean() {
	// bean就是对应的Controller类的实例。
	Object handler = this.bean;
	
	
	if (this.bean instanceof String) {
		String beanName = (String) this.bean;
		handler = this.beanFactory.getBean(beanName);
	}
	
	return new HandlerMethod(this, handler);
}


/**
 * 构建一个拦截器链，拦截器链中包含HandlerMethod，并向处理器执行链中添加添加HandlerIntercept。
 *
 * 其是RequestMappingHandlerMapping实例。
 */
location：AbstractHandlerMapping
protected HandlerExecutionChain getHandlerExecutionChain(Object handler, HttpServletRequest request) {
	/**
	 * 构建HandlerExecutionChain实例对象。
	 */
	HandlerExecutionChain chain = (handler instanceof HandlerExecutionChain ? (HandlerExecutionChain) handler : new HandlerExecutionChain(handler));

	// 获取请求地址。
	String lookupPath = this.urlPathHelper.getLookupPathForRequest(request);
	
	/**
	 * adaptedInterceptors：是在初始化RequestMappingHandlerMapping的时候添加的MappedInterceptor。
	 */
	for (HandlerInterceptor interceptor : this.adaptedInterceptors) {
		if (interceptor instanceof MappedInterceptor) {
			MappedInterceptor mappedInterceptor = (MappedInterceptor) interceptor;
			if (mappedInterceptor.matches(lookupPath, this.pathMatcher)) {
				/**
				 *
				 */
				chain.addInterceptor(mappedInterceptor.getInterceptor());
			}
		} else {
			chain.addInterceptor(interceptor);
		}
	}
	return chain;
}

/**
 * 创建一个HandlerExecutionChain实例。
 */
location：HandlerExecutionChain
public HandlerExecutionChain(Object handler) {
	this(handler, (HandlerInterceptor[]) null);
}

/**
 * 创建一个HandlerExecutionChain实例。
 */
location：HandlerExecutionChain
public HandlerExecutionChain(Object handler, HandlerInterceptor... interceptors) {
	if (handler instanceof HandlerExecutionChain) {
		HandlerExecutionChain originalChain = (HandlerExecutionChain) handler;
		this.handler = originalChain.getHandler();
		this.interceptorList = new ArrayList<HandlerInterceptor>();
		CollectionUtils.mergeArrayIntoCollection(originalChain.getInterceptors(), this.interceptorList);
		CollectionUtils.mergeArrayIntoCollection(interceptors, this.interceptorList);
	} else {
		this.handler = handler;
		this.interceptors = interceptors;
	}
}



/**
 * 添加拦截器链。
 */
location：HandlerExecutionChain
public void addInterceptor(HandlerInterceptor interceptor) {
	initInterceptorList().add(interceptor);
}

/**
 * 初始化连接器链。
 */
location：HandlerExecutionChain
private List<HandlerInterceptor> initInterceptorList() {
	if (this.interceptorList == null) {
		
		this.interceptorList = new ArrayList<HandlerInterceptor>();
		if (this.interceptors != null) {
			CollectionUtils.mergeArrayIntoCollection(this.interceptors, this.interceptorList);
		}
	}
	
	this.interceptors = null;
	
	return this.interceptorList;
}


附件一：有一个以SimpleUrlHandlerMapping为例的





#################################################################
#	     3、获取给定的Handler的HandlerAdapter      				#
#################################################################
/** 
 * HandlerAdapter
 *			1、HttpRequestHandlerAdapter
 *					public boolean supports(Object handler) {
 *						return (handler instanceof HttpRequestHandler);
 *					}
 *					
 *					
 *			2、SimpleServletHandlerAdapter
 *					public boolean supports(Object handler) {
 *						return (handler instanceof Servlet);
 *					}
 *	
 *			3、AnnotationMethodHandlerAdapter【废弃了，就不看了】
 *			
 *			4、AbstractHandlerMethodAdapter
 *					public final boolean supports(Object handler) {
 *						return (handler instanceof HandlerMethod && supportsInternal((HandlerMethod) handler));
 *					}
 * 
 *					4-1、RequestMappingHandlerAdapter【主流的，supportsInternal(..)：默认返回true】
 *			
 * 
 *			5、SimpleControllerHandlerAdapter
 *					public boolean supports(Object handler) {
 *						return (handler instanceof Controller);
 *					}
 *				 			
 *
 * RequestMappingHandlerAdapter、HttpRequestHandlerAdapter、SimpleControllerHandlerAdapter
 * 这里以RequestMappingHandlerAdapter为例。
 */
location：DispatcherServlet
protected HandlerAdapter getHandlerAdapter(Object handler) throws ServletException {
	
	// handler：就是HandlerMethod。
	for (HandlerAdapter ha : this.handlerAdapters) {
		if (logger.isTraceEnabled()) {
			logger.trace("Testing handler adapter [" + ha + "]");
		}
		
		/** 
		 * 判断该适配器是否支持给定的handler，如果支持，则返回对应的处理器适配器。
		 *
		 * 现在主要使用RequestMappingHandlerAdapter这个是处理器适配器。
		 */
		if (ha.supports(handler)) {
			return ha;
		}
	}
	throw new ServletException("No adapter for handler [" + handler + "]: The DispatcherServlet configuration needs to include a HandlerAdapter that supports this handler");
}




/** 
 * 其是RequestMappingHandlerAdapter实例。 
 * 只要处理的对象是HandlerMethod实例对象，就是RequestMappingHandlerAdapter所支持的。
 */
location：AbstractHandlerMethodAdapter
public final boolean supports(Object handler) {
	return (handler instanceof HandlerMethod && supportsInternal((HandlerMethod) handler));
}

/** 
 * 默认返回true 
 */
location：RequestMappingHandlerAdapter
protected boolean supportsInternal(HandlerMethod handlerMethod) {
	return true;
}


#########################################################
#				04、执行HandlerInterceptor前置处理		#
#########################################################
/** 
 * 拦截器的前置处理。
 */
location：HandlerExecutionChain
boolean applyPreHandle(HttpServletRequest request, HttpServletResponse response) throws Exception {
	HandlerInterceptor[] interceptors = getInterceptors();
	if (!ObjectUtils.isEmpty(interceptors)) {
		for (int i = 0; i < interceptors.length; i++) {
			HandlerInterceptor interceptor = interceptors[i];
			if (!interceptor.preHandle(request, response, this.handler)) {
				triggerAfterCompletion(request, response, null);
				return false;
			}
			this.interceptorIndex = i;
		}
	}
	return true;
}









#################################################################
#			5、调用HandlerAdapter的handler方法      			#
#################################################################
/**
 * 以RequestMappingHandlerAdapter实例。
 */
location：AbstractHandlerMethodAdapter
public final ModelAndView handle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {
	// handler：就是HandlerMethod。
	return handleInternal(request, response, (HandlerMethod) handler);
}


/**
 * 以RequestMappingHandlerAdapter实例。
 */
location：RequestMappingHandlerAdapter
protected ModelAndView handleInternal(HttpServletRequest request, HttpServletResponse response, HandlerMethod handlerMethod) throws Exception {

	ModelAndView mav;
	
	/**
	 * 检查request。
	 */
	checkRequest(request);

	
	// synchronizeOnSession：默认为false。
	if (this.synchronizeOnSession) {
		HttpSession session = request.getSession(false);
		if (session != null) {
			Object mutex = WebUtils.getSessionMutex(session);
			synchronized (mutex) {
				mav = invokeHandlerMethod(request, response, handlerMethod);
			}
		} else {
			mav = invokeHandlerMethod(request, response, handlerMethod);
		}
	} else {
		/** 
		 * ##############################################
		 * #			调用HandlerMethod的过程	 		#
		 * ##############################################
		 */
		mav = invokeHandlerMethod(request, response, handlerMethod);
	}

	
	if (!response.containsHeader(HEADER_CACHE_CONTROL)) {
		if (getSessionAttributesHandler(handlerMethod).hasSessionAttributes()) {
			applyCacheSeconds(response, this.cacheSecondsForSessionAttributeHandlers);
		} else {
			prepareResponse(response);
		}
	}

	return mav;
}


/**
 * 检查request。
 */
location：WebContentGenerator
protected final void checkRequest(HttpServletRequest request) throws ServletException {
	// 是否支持给请求方法。
	String method = request.getMethod();
	if (this.supportedMethods != null && !this.supportedMethods.contains(method)) {
		throw new HttpRequestMethodNotSupportedException(method, this.supportedMethods);
	}
	
	// 检查session。
	if (this.requireSession && request.getSession(false) == null) {
		throw new HttpSessionRequiredException("Pre-existing session required but none found");
	}
}


/**
 * 主要步骤：
 * 		1、
 * 		1、
 * 
 * 调用HandlerMethod的过程
 */
location：RequestMappingHandlerAdapter
protected ModelAndView invokeHandlerMethod(HttpServletRequest request, HttpServletResponse response, HandlerMethod handlerMethod) throws Exception {
	
	// 创建ServletWebRequest对象。
	ServletWebRequest webRequest = new ServletWebRequest(request, response);
	
	try {
		/**
		 * 获取WebDataBinderFactory，并构建ModelFactory。
		 * 		
		 */
		WebDataBinderFactory binderFactory = getDataBinderFactory(handlerMethod);
		ModelFactory modelFactory = getModelFactory(handlerMethod, binderFactory);

		/**
		 * 创建ServletInvocableHandlerMethod实例，并为其设置属性，ServletInvocableHandlerMethod是HandlerMethod的子类。
		 */
		ServletInvocableHandlerMethod invocableMethod = createInvocableHandlerMethod(handlerMethod);
		invocableMethod.setHandlerMethodArgumentResolvers(this.argumentResolvers);
		invocableMethod.setHandlerMethodReturnValueHandlers(this.returnValueHandlers);
		invocableMethod.setDataBinderFactory(binderFactory);
		invocableMethod.setParameterNameDiscoverer(this.parameterNameDiscoverer);

		/**
		 * 创建ModelAndViewContainer实例，并为其设置属性。
		 */
		ModelAndViewContainer mavContainer = new ModelAndViewContainer();
		mavContainer.addAllAttributes(RequestContextUtils.getInputFlashMap(request));
		modelFactory.initModel(webRequest, mavContainer, invocableMethod);
		mavContainer.setIgnoreDefaultModelOnRedirect(this.ignoreDefaultModelOnRedirect);

		/**
		 * 构建AsyncWebRequest实例对象，并设置属性。
		 */
		AsyncWebRequest asyncWebRequest = WebAsyncUtils.createAsyncWebRequest(request, response);
		asyncWebRequest.setTimeout(this.asyncRequestTimeout);

		/**
		 * 构建WebAsyncManager实例对象，并设置属性。
		 */
		WebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request);
		asyncManager.setTaskExecutor(this.taskExecutor);
		asyncManager.setAsyncWebRequest(asyncWebRequest);
		asyncManager.registerCallableInterceptors(this.callableInterceptors);
		asyncManager.registerDeferredResultInterceptors(this.deferredResultInterceptors);

		
		if (asyncManager.hasConcurrentResult()) {
			Object result = asyncManager.getConcurrentResult();
			mavContainer = (ModelAndViewContainer) asyncManager.getConcurrentResultContext()[0];
			asyncManager.clearConcurrentResult();
			if (logger.isDebugEnabled()) {
				logger.debug("Found concurrent result value [" + result + "]");
			}
			
			invocableMethod = invocableMethod.wrapConcurrentResult(result);
		}

		/**
		 * ##################################################################################
		 * # 			会调用具体的Handler内容，即你写的Controller里具体的方法				#
		 * ##################################################################################
		 */
		invocableMethod.invokeAndHandle(webRequest, mavContainer);
		
		
		if (asyncManager.isConcurrentHandlingStarted()) {
			return null;
		}

		/**
		 * 获取ModelAndView
		 */
		return getModelAndView(mavContainer, modelFactory, webRequest);
	} finally {
		webRequest.requestCompleted();
	}
}


/**
 * 创建WebDataBinderFactory实例。 
 *
 * 数据绑定。
 */
location：RequestMappingHandlerAdapter
private WebDataBinderFactory getDataBinderFactory(HandlerMethod handlerMethod) throws Exception {
	// 获取HandlerMethod的BeanType。
	Class<?> handlerType = handlerMethod.getBeanType();
	
	// 从缓存中获取method。如果缓存没有添加到缓存。
	Set<Method> methods = this.initBinderCache.get(handlerType);
	if (methods == null) {
		/**
		 * public static final MethodFilter INIT_BINDER_METHODS = new MethodFilter() {
		 *		public boolean matches(Method method) {
		 *			return AnnotationUtils.findAnnotation(method, InitBinder.class) != null;
		 *		}
		 * 	};
		 */
		methods = MethodIntrospector.selectMethods(handlerType, INIT_BINDER_METHODS);
		this.initBinderCache.put(handlerType, methods);
	}
	
	
	List<InvocableHandlerMethod> initBinderMethods = new ArrayList<InvocableHandlerMethod>();
	for (Entry<ControllerAdviceBean, Set<Method>> entry : this.initBinderAdviceCache.entrySet()) {
		if (entry.getKey().isApplicableToBeanType(handlerType)) {
			Object bean = entry.getKey().resolveBean();
			for (Method method : entry.getValue()) {
				initBinderMethods.add(createInitBinderMethod(bean, method));
			}
		}
	}
	
	for (Method method : methods) {
		Object bean = handlerMethod.getBean();
		initBinderMethods.add(createInitBinderMethod(bean, method));
	}
	
	return createDataBinderFactory(initBinderMethods);
}

/**
 * 创建ServletRequestDataBinderFactory实例。
 */
location：RequestMappingHandlerAdapter
protected InitBinderDataBinderFactory createDataBinderFactory(List<InvocableHandlerMethod> binderMethods) throws Exception {
	return new ServletRequestDataBinderFactory(binderMethods, getWebBindingInitializer());
}



/**
 * 创建ModelFactory实例。
 */
location：RequestMappingHandlerAdapter
private ModelFactory getModelFactory(HandlerMethod handlerMethod, WebDataBinderFactory binderFactory) {
	SessionAttributesHandler sessionAttrHandler = getSessionAttributesHandler(handlerMethod);
	Class<?> handlerType = handlerMethod.getBeanType();
	Set<Method> methods = this.modelAttributeCache.get(handlerType);
	if (methods == null) {
		// @RequestMapping和@ModelAttribute
		methods = MethodIntrospector.selectMethods(handlerType, MODEL_ATTRIBUTE_METHODS);
		this.modelAttributeCache.put(handlerType, methods);
	}
	List<InvocableHandlerMethod> attrMethods = new ArrayList<InvocableHandlerMethod>();
	for (Entry<ControllerAdviceBean, Set<Method>> entry : this.modelAttributeAdviceCache.entrySet()) {
		if (entry.getKey().isApplicableToBeanType(handlerType)) {
			Object bean = entry.getKey().resolveBean();
			for (Method method : entry.getValue()) {
				attrMethods.add(createModelAttributeMethod(binderFactory, bean, method));
			}
		}
	}
	for (Method method : methods) {
		Object bean = handlerMethod.getBean();
		attrMethods.add(createModelAttributeMethod(binderFactory, bean, method));
	}
	
	return new ModelFactory(attrMethods, binderFactory, sessionAttrHandler);
}



/**
 * HandlerMethod
 * 			InvocableHandlerMethod
 *						ServletInvocableHandlerMethod
 * 
 * 创建ServletInvocableHandlerMethod实例。
 */
location：RequestMappingHandlerAdapter
protected ServletInvocableHandlerMethod createInvocableHandlerMethod(HandlerMethod handlerMethod) {
	return new ServletInvocableHandlerMethod(handlerMethod);
}

/**
 * ServletInvocableHandlerMethod构造函数。
 */
location：ServletInvocableHandlerMethod
public ServletInvocableHandlerMethod(HandlerMethod handlerMethod) {
	super(handlerMethod);
}

/**
 * InvocableHandlerMethod构造函数。
 */
location：InvocableHandlerMethod
public InvocableHandlerMethod(HandlerMethod handlerMethod) {
	super(handlerMethod);
}

/**
 * HandlerMethod构造函数。
 */
location：HandlerMethod
protected HandlerMethod(HandlerMethod handlerMethod) {
	Assert.notNull(handlerMethod, "HandlerMethod is required");
	this.bean = handlerMethod.bean;
	this.beanFactory = handlerMethod.beanFactory;
	this.beanType = handlerMethod.beanType;
	this.method = handlerMethod.method;
	this.bridgedMethod = handlerMethod.bridgedMethod;
	this.parameters = handlerMethod.parameters;
	this.responseStatus = handlerMethod.responseStatus;
	this.responseStatusReason = handlerMethod.responseStatusReason;
	this.resolvedFromHandlerMethod = handlerMethod.resolvedFromHandlerMethod;
}








/**
 * 在构建ServletInvocableHandlerMethod的时候会把HandlerMethod传入其中
 */
location：ServletInvocableHandlerMethod
public void invokeAndHandle(ServletWebRequest webRequest, ModelAndViewContainer mavContainer, Object... providedArgs) throws Exception {

	/**
	 * 执行具体的HandlerMapping。
	 */
	Object returnValue = invokeForRequest(webRequest, mavContainer, providedArgs);
	
	// 设置响应状态。
	setResponseStatus(webRequest);

	if (returnValue == null) {
		if (isRequestNotModified(webRequest) || getResponseStatus() != null || mavContainer.isRequestHandled()) {
			mavContainer.setRequestHandled(true);
			return;
		}
	} else if (StringUtils.hasText(getResponseStatusReason())) {
		mavContainer.setRequestHandled(true);
		return;
	}

	mavContainer.setRequestHandled(false);
	
	try {
		this.returnValueHandlers.handleReturnValue(returnValue, getReturnValueType(returnValue), mavContainer, webRequest);
	} catch (Exception ex) {
		if (logger.isTraceEnabled()) {
			logger.trace(getReturnValueHandlingErrorMessage("Error handling return value", returnValue), ex);
		}
		throw ex;
	}
}

/**
 * HandlerMethod
 *			InvocableHandlerMethod
 *						ServletInvocableHandlerMethod
 *
 * 这是ServletInvocableHandlerMethod实例。
 *
 * 调用具体的具体方法被@RequestMapping。
 *
 * 
 */
location：InvocableHandlerMethod
public Object invokeForRequest(NativeWebRequest request, ModelAndViewContainer mavContainer, Object... providedArgs) throws Exception {

	// 获取请求参数。
	// 有空可以研究一下，参数校验是否在这里完成的。
	Object[] args = getMethodArgumentValues(request, mavContainer, providedArgs);
	
	if (logger.isTraceEnabled()) {
		logger.trace("Invoking '" + ClassUtils.getQualifiedMethodName(getMethod(), getBeanType()) + "' with arguments " + Arrays.toString(args));
	}
	
	// 调用具体Controller的具体方法。
	Object returnValue = doInvoke(args);
	
	if (logger.isTraceEnabled()) {
		logger.trace("Method [" + ClassUtils.getQualifiedMethodName(getMethod(), getBeanType()) + "] returned [" + returnValue + "]");
	}
	return returnValue;
}



/**
 *
 *
 */
location：InvocableHandlerMethod
private Object[] getMethodArgumentValues(NativeWebRequest request, ModelAndViewContainer mavContainer, Object... providedArgs) throws Exception {

	MethodParameter[] parameters = getMethodParameters();
	Object[] args = new Object[parameters.length];
	for (int i = 0; i < parameters.length; i++) {
		MethodParameter parameter = parameters[i];
		parameter.initParameterNameDiscovery(this.parameterNameDiscoverer);
		args[i] = resolveProvidedArgument(parameter, providedArgs);
		if (args[i] != null) {
			continue;
		}
		if (this.argumentResolvers.supportsParameter(parameter)) {
			try {
				args[i] = this.argumentResolvers.resolveArgument(parameter, mavContainer, request, this.dataBinderFactory);
				continue;
			} catch (Exception ex) {
				if (logger.isDebugEnabled()) {
					logger.debug(getArgumentResolutionErrorMessage("Failed to resolve", i), ex);
				}
				throw ex;
			}
		}
		if (args[i] == null) {
			throw new IllegalStateException("Could not resolve method parameter at index " + ": " + getArgumentResolutionErrorMessage("No suitable resolver for", i));
		}
	}
	return args;
}


/**
 *
 *
 */
location：HandlerMethodArgumentResolverComposite
public Object resolveArgument(MethodParameter parameter, ModelAndViewContainer mavContainer, NativeWebRequest webRequest, WebDataBinderFactory binderFactory) throws Exception {

	HandlerMethodArgumentResolver resolver = getArgumentResolver(parameter);
	if (resolver == null) {
		throw new IllegalArgumentException("Unknown parameter type [" + parameter.getParameterType().getName() + "]");
	}
	
	/**
	 * 不同的处理。
	 */
	return resolver.resolveArgument(parameter, mavContainer, webRequest, binderFactory);
	
}







