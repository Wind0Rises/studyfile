

/**
 * 未分析。
 */
location：AbstractHandlerMapping
protected void initApplicationContext() throws BeansException {
	extendInterceptors(this.interceptors);
	detectMappedInterceptors(this.adaptedInterceptors);
	initInterceptors();
}




一、总结
	1)、开始流程。
		1、MvcNamespaceHandler首先会解析xml文件，生成很多DispatcherServlet需要的组件的BeanDefinition，包括各种HandlerMapping、HandlerAdapter、HandlerExceptionResolver等等。
		2、在初始化Bean（包括各种HandlerMapping、HandlerAdapter、HandlerExceptionResolver）的时候， 因为RequestMappingHandlerMapping的n实现了InitializingBean接口。所以在实例化
		   RequestMappingHandlerMapping的时候会调用其afterPropertiesSet()方法，在这个方法里处理@Controller修饰的类。
				【note注意】
						1、@Controller、@Repository、@Service、@Component都是spring-context模块的。这些标记的类都是解析成BeanDefinition。【详情看ContextNamespaceHandler。】
		3、在RequestMappingHandlerMapping的InitializingBean接口的afterPropertiesSet()方法做了哪些事？
		
		
		
		
		
		
		
		因为DispatcherServlet是实现了javax.Servletl类；在初始化Servlet时，会调用对应的init(ServletConfig config)方法时，会调用GenericServlet的init(..)方法。
	然后继续调用HttpServletBean类的init()方法；在init()方法内部又继续调用了initServletBean()方法。
		

1、问题？
	Spring的ApplicationContext和Servlet中的ApplicationContext是一个吗？？

	
	
二、重要的类。
	1)、HandlerMethod
	
	
	





	

三、源码

#########################################################################################################################################################
#                                    				第一部分：   初始化DispatcherServlet																#
#########################################################################################################################################################
/**
 * Servlet
 *			GenericServlet
 *					HttpServlet
 *								HttpServletBean[implements EnvironmentAware]
 *											FrameworkServlet[implements ApplicationContextAware]
 *														DispatcherServlet	
 *
 *
 *
 *
 *
 *
 * Servlet的初始化方法。
 */
location：GenericServlet
public void init(ServletConfig config) throws ServletException {
	this.config = config;
	this.init();
}


/**
 * 初始化过程。
 */
location：HttpServletBean
public final void init() throws ServletException {
	if (logger.isDebugEnabled()) {
		logger.debug("Initializing servlet '" + getServletName() + "'");
	}

	try {
		/**
		 * getServletConfig()：获取的就是在初始化DispatcherServlet时候传入ServletConfig。初始化每一个Servlet都会有这样的操作。
		 */
		PropertyValues pvs = new ServletConfigPropertyValues(getServletConfig(), this.requiredProperties);
		
		/**
		 * this是DispatcherServlet实例，就相当于把DispatcherServlet保存在BeanWrapper。
		 */
		BeanWrapper bw = PropertyAccessorFactory.forBeanPropertyAccess(this);
		
		/**
		 * 创建一个
		 */
		ResourceLoader resourceLoader = new ServletContextResourceLoader(getServletContext());
		bw.registerCustomEditor(Resource.class, new ResourceEditor(resourceLoader, this.environment));
		initBeanWrapper(bw);
		bw.setPropertyValues(pvs, true);
	}
	catch (BeansException ex) {
		logger.error("Failed to set bean properties on servlet '" + getServletName() + "'", ex);
		throw ex;
	}

	/**
	 * ###################################################
	 * # 				初始化
	 * ###################################################
	 */
	initServletBean();

	if (logger.isDebugEnabled()) {
		logger.debug("Servlet '" + getServletName() + "' configured successfully");
	}
}


/**
 * PropertyEditorRegistry
 *		BeanWrapper
 * 		PropertyEditorRegistrySupport
 */
location：PropertyEditorRegistrySupport
public void registerCustomEditor(Class<?> requiredType, PropertyEditor propertyEditor) {
	registerCustomEditor(requiredType, null, propertyEditor);
}


/**
 *
 */
location：PropertyEditorRegistrySupport
public void registerCustomEditor(Class<?> requiredType, String propertyPath, PropertyEditor propertyEditor) {
	if (requiredType == null && propertyPath == null) {
		throw new IllegalArgumentException("Either requiredType or propertyPath is required");
	}
	
	
	if (propertyPath != null) {
		if (this.customEditorsForPath == null) {
			this.customEditorsForPath = new LinkedHashMap<String, CustomEditorHolder>(16);
		}
		this.customEditorsForPath.put(propertyPath, new CustomEditorHolder(propertyEditor, requiredType));
	} else {
		if (this.customEditors == null) {
			this.customEditors = new LinkedHashMap<Class<?>, PropertyEditor>(16);
		}
		this.customEditors.put(requiredType, propertyEditor);
		this.customEditorCache = null;
	}
}









/**
 * 初始化SpringMVC开始。该类实现【ApplicationContextAware】和继承【HttpServletBean】
 */
location：FrameworkServlet
protected final void initServletBean() throws ServletException {
	getServletContext().log("Initializing Spring FrameworkServlet '" + getServletName() + "'");
	
	if (this.logger.isInfoEnabled()) {
		this.logger.info("FrameworkServlet '" + getServletName() + "': initialization started");
	}
	
	long startTime = System.currentTimeMillis();

	try {
		this.webApplicationContext = initWebApplicationContext();
		initFrameworkServlet();
	} catch (ServletException ex) {
		this.logger.error("Context initialization failed", ex);
		throw ex;
	} catch (RuntimeException ex) {
		this.logger.error("Context initialization failed", ex);
		throw ex;
	}

	if (this.logger.isInfoEnabled()) {
		long elapsedTime = System.currentTimeMillis() - startTime;
		this.logger.info("FrameworkServlet '" + getServletName() + "': initialization completed in " + elapsedTime + elapsedTime + " ms");
	}
}


##############################################
#      01、初始化WebApplicationContext       #
##############################################
/**
 * 初始化并发布此servlet的WebApplicationContext。
 */
location: FrameworkServlet
protected WebApplicationContext initWebApplicationContext() {

	/**
	 * 获取ApplicationContext。怎么获取的？？
	 */
	WebApplicationContext rootContext = WebApplicationContextUtils.getWebApplicationContext(getServletContext());
	
	WebApplicationContext wac = null;
	
	/**
	 * DispatcherServlet初始化时webApplicationContext为null。
	 */
	if (this.webApplicationContext != null) {
		
		wac = this.webApplicationContext;
		
		if (wac instanceof ConfigurableWebApplicationContext) {
			ConfigurableWebApplicationContext cwac = (ConfigurableWebApplicationContext) wac;
			if (!cwac.isActive()) {				
				if (cwac.getParent() == null) {
					cwac.setParent(rootContext);
				}
				configureAndRefreshWebApplicationContext(cwac);
			}
		}
	}
	
	if (wac == null) {
		// 从ServletContext获取已经存在的WebApplicationContext。
		wac = findWebApplicationContext();
	}
	
	if (wac == null) {
		/**
		 * #####################################################################
		 * #         如果没有为此servlet定义上下文实例 -> 创建本地实例		   #
		 * #####################################################################
		 */
		wac = createWebApplicationContext(rootContext);
	}

	if (!this.refreshEventReceived) {
		// 上下文不是具有刷新支持的ConfigurableApplicationContext，或者在构造时注入的上下文已经刷新 - >在此手动触发初始onRefresh。	
		onRefresh(wac);
	}

	if (this.publishContext) {
		String attrName = getServletContextAttributeName();
		getServletContext().setAttribute(attrName, wac);
		if (this.logger.isDebugEnabled()) {
			this.logger.debug("Published WebApplicationContext of servlet '" + getServletName() + "' as ServletContext attribute with name [" + attrName + "]");
		}
	}

	return wac;
}


/**
 * String ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE = WebApplicationContext.class.getName() + ".ROOT";
 */
location：WebApplicationContextUtils
public static WebApplicationContext getWebApplicationContext(ServletContext sc) {
	return getWebApplicationContext(sc, WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE);
}


/**
 * 从ServletContext获取已经存在的WebApplicationContext。
 */
location：WebApplicationContextUtils
public static WebApplicationContext getWebApplicationContext(ServletContext sc, String attrName) {
	Assert.notNull(sc, "ServletContext must not be null");
	Object attr = sc.getAttribute(attrName);
	if (attr == null) {
		return null;
	}
	if (attr instanceof RuntimeException) {
		throw (RuntimeException) attr;
	}
	if (attr instanceof Error) {
		throw (Error) attr;
	}
	if (attr instanceof Exception) {
		throw new IllegalStateException((Exception) attr);
	}
	if (!(attr instanceof WebApplicationContext)) {
		throw new IllegalStateException("Context attribute is not of type WebApplicationContext: " + attr);
	}
	return (WebApplicationContext) attr;
}


/**
 * 获取或者创建一个WebApplicationContext
 */
location：FrameworkServlet
protected WebApplicationContext findWebApplicationContext() {
	String attrName = getContextAttribute();
	if (attrName == null) {
		return null;
	}
	WebApplicationContext wac = WebApplicationContextUtils.getWebApplicationContext(getServletContext(), attrName);
	if (wac == null) {
		throw new IllegalStateException("No WebApplicationContext found: initializer not registered?");
	}
	return wac;
}




#########################################################
#        	  02、创建WebApplicationContext 			#
#########################################################
/**
 * 创建一个WebApplicationContext实例。
 */
location：FrameworkServlet
protected WebApplicationContext createWebApplicationContext(WebApplicationContext parent) {
	return createWebApplicationContext((ApplicationContext) parent);
}


/**
 * 具体创建一个WebApplicationContext的过程。
 */
location：FrameworkServlet
protected WebApplicationContext createWebApplicationContext(ApplicationContext parent) {

	// contextClass = org.springframework.web.context.support.XmlWebApplicationContext
	Class<?> contextClass = getContextClass();
	
	if (this.logger.isDebugEnabled()) {
		this.logger.debug("Servlet with name '" + getServletName() + "' will try to create custom WebApplicationContext context of class '" + contextClass.getName() + "'" + ", using parent context [" + parent + "]");
	}
	
	if (!ConfigurableWebApplicationContext.class.isAssignableFrom(contextClass)) {
		throw new ApplicationContextException("Fatal initialization error in servlet with name '" + getServletName() + "': custom WebApplicationContext class [" + contextClass.getName() + "] is not of type ConfigurableWebApplicationContext");
	}
	
	// 初始化XmlWebApplicationContext这个Bean
	ConfigurableWebApplicationContext wac = (ConfigurableWebApplicationContext) BeanUtils.instantiateClass(contextClass);

	// 为WebApplicationContext设置环境信息。
	wac.setEnvironment(getEnvironment());
	
	// 设置父属性。
	wac.setParent(parent);
	
	// 设置ConfigLocation这个值是Web.xml配饰Spring mvc时候的ConfigLocation的值。要加载的配置文件。
	wac.setConfigLocation(getContextConfigLocation());

	// 刷新WebApplicationContext。
	configureAndRefreshWebApplicationContext(wac);
	
	return wac;
}

/**
 * 获取Context的类信息。
 */
location：FrameworkServlet
public Class<?> getContextClass() {
	// private Class<?> contextClass = DEFAULT_CONTEXT_CLASS;
	// public static final Class<?> DEFAULT_CONTEXT_CLASS = XmlWebApplicationContext.class;
	return this.contextClass;
}

/**
 * 配置刷新WebApplicationContext
 */
location：FrameworkServlet
protected void configureAndRefreshWebApplicationContext(ConfigurableWebApplicationContext wac) {
	// 判断WebApplicationContext生产的id是否正确。如果没有设置ID设置Id
	if (ObjectUtils.identityToString(wac).equals(wac.getId())) {
		if (this.contextId != null) {
			wac.setId(this.contextId);
		} else {
			wac.setId(ConfigurableWebApplicationContext.APPLICATION_CONTEXT_ID_PREFIX + ObjectUtils.getDisplayString(getServletContext().getContextPath()) + '/' + getServletName());
		}
	}

	/**
	 * 设置WebApplicationContext对应的属性。
	 */
	wac.setServletContext(getServletContext());
	wac.setServletConfig(getServletConfig());
	wac.setNamespace(getNamespace());
	
	
	/**
	 * 向WebApplicationContext中设置SourceFilteringListener监听器，其内部有一个委托对象，最终都是通过委托对象调用。这里ContextRefreshListener实例就
	 * 是其委托对象。这些监听器将在ApplicationContext的refresh()被触发。
	 * 
	 * ContextRefreshListener是FrameworkServlet的内部类，这个类主要就是初始化DispatcherServlet的各种策略。
	 */
	wac.addApplicationListener(new SourceFilteringListener(wac, new ContextRefreshListener()));

	
	/**
	 * 获取环境信息。
	 */
	ConfigurableEnvironment env = wac.getEnvironment();
	if (env instanceof ConfigurableWebEnvironment) {
		((ConfigurableWebEnvironment) env).initPropertySources(getServletContext(), getServletConfig());
	}

	/** 
	 * 什么都没做。用于扩展
	 */
	postProcessWebApplicationContext(wac);
	
	/**
	 * 应用ApplicationContextInitializer
	 */
	applyInitializers(wac);
	
	/**
	 * 刷新WebApplicationContext。这个可以参见Spring框架解析。其中有一步【finishRefresh()】会触发SourceFilteringListener监听器。
	 */
	wac.refresh();
}

/**
 * 应用ApplicationContextInitializer
 */
location：FrameworkServlet
protected void applyInitializers(ConfigurableApplicationContext wac) {
	String globalClassNames = getServletContext().getInitParameter(ContextLoader.GLOBAL_INITIALIZER_CLASSES_PARAM);
	if (globalClassNames != null) {
		for (String className : StringUtils.tokenizeToStringArray(globalClassNames, INIT_PARAM_DELIMITERS)) {
			this.contextInitializers.add(loadInitializer(className, wac));
		}
	}

	if (this.contextInitializerClasses != null) {
		for (String className : StringUtils.tokenizeToStringArray(this.contextInitializerClasses, INIT_PARAM_DELIMITERS)) {
			this.contextInitializers.add(loadInitializer(className, wac));
		}
	}

	AnnotationAwareOrderComparator.sort(this.contextInitializers);
	
	for (ApplicationContextInitializer<ConfigurableApplicationContext> initializer : this.contextInitializers) {
		initializer.initialize(wac);
	}
}



#######################################################################################################################################################


在WebApplicationContext做refresh()时，finishRefresh()
	-->  publishEvent(new ContextRefreshedEvent(this));

【SourceFilteringListener】：注意是在执行这个监听器时候做的。



/**
 * 委托对象：delegate  --》ContextRefreshListener
 */
location：SourceFilteringListener
protected void onApplicationEventInternal(ApplicationEvent event) {
	if (this.delegate == null) {
		throw new IllegalStateException( "Must specify a delegate object or override the onApplicationEventInternal method");
	}
	
	this.delegate.onApplicationEvent(event);
}


/**
 * 
 */
location：GenericApplicationListenerAdapter
public void onApplicationEvent(ApplicationEvent event) {
	this.delegate.onApplicationEvent(event);
}


/**
 * 【注意】FrameworkServlet.this是什么。
 */
location：FrameworkServlet.ContextRefreshListener
private class ContextRefreshListener implements ApplicationListener<ContextRefreshedEvent> {
	@Override
	public void onApplicationEvent(ContextRefreshedEvent event) {
		FrameworkServlet.this.onApplicationEvent(event);
	}
}

/**
 *
 */
location：FrameworkServlet
public void onApplicationEvent(ContextRefreshedEvent event) {
	this.refreshEventReceived = true;
	onRefresh(event.getApplicationContext());
}



#########################################################
#        		  03、初始化MVC策略	 					#
#########################################################
/**
 *
 */
location：DispatcherServlet
protected void onRefresh(ApplicationContext context) {
	initStrategies(context);
}

/**
 * strategy[/ˈstrætədʒi/ ]:战略，策略
 */
location：DispatcherServlet
protected void initStrategies(ApplicationContext context) {
	initMultipartResolver(context);
	initLocaleResolver(context);
	initThemeResolver(context);
	initHandlerMappings(context);
	initHandlerAdapters(context);
	initHandlerExceptionResolvers(context);
	initRequestToViewNameTranslator(context);
	initViewResolvers(context);
	initFlashMapManager(context);
}
















#########################################################################################################################################################
#                                    第二部分：   RequestMappingHandlerMapping的时候会调用其afterPropertiesSet											#
#########################################################################################################################################################

/**
 * 其是RequestMappingHandlerMapping的实例。
 */
location：AbstractHandlerMethodMapping
protected void initHandlerMethods() {

	if (logger.isDebugEnabled()) {
		logger.debug("Looking for request mappings in application context: " + getApplicationContext());
	}
	
	/**
	 * 获取ApplicationContext注册的Bean name。
	 */
	String[] beanNames = (this.detectHandlerMethodsInAncestorContexts ? BeanFactoryUtils.beanNamesForTypeIncludingAncestors(getApplicationContext(), Object.class) : getApplicationContext().getBeanNamesForType(Object.class));


	for (String beanName : beanNames) {
		/**
		 * String SCOPED_TARGET_NAME_PREFIX = "scopedTarget.";
		 * 判断Bean Name是否以scopedTarget.开始的。不是进入if。
		 */
		if (!beanName.startsWith(SCOPED_TARGET_NAME_PREFIX)) {
			Class<?> beanType = null;
			try {	
				// 获取对应Bean的Class类型。
				beanType = getApplicationContext().getType(beanName);
			} catch (Throwable ex) {
				if (logger.isDebugEnabled()) {
					logger.debug("Could not resolve target class for bean with name '" + beanName + "'", ex);
				}
			}
			
			
			if (beanType != null && isHandler(beanType)) {
				detectHandlerMethods(beanName);
			}
		}
	}
	
	/**
	 * 空处理。
	 */ 
	handlerMethodsInitialized(getHandlerMethods());
}


/**
 * 判断给定的Class是否有@Controller和@RequestMapping注解。
 */
location：RequestMappingHandlerMapping
protected boolean isHandler(Class<?> beanType) {
	return (AnnotatedElementUtils.hasAnnotation(beanType, Controller.class) || AnnotatedElementUtils.hasAnnotation(beanType, RequestMapping.class));
}


/**
 * 
 */
location：AbstractHandlerMethodMapping
protected void detectHandlerMethods(final Object handler) {
	// 获取对应Class。
	Class<?> handlerType = (handler instanceof String ? getApplicationContext().getType((String) handler) : handler.getClass());
	
	// 主要是判断是否是内部类。
	final Class<?> userType = ClassUtils.getUserClass(handlerType);


	/**
	 * 获取方法和对应的RequestMappingInfo。
	 */
	Map<Method, T> methods = MethodIntrospector.selectMethods(userType,
			
			new MethodIntrospector.MetadataLookup<T>() {
				@Override
				public T inspect(Method method) {
					try {
						/**
						 * ##########################################################################
						 * #					构建一个RequestMappingInfo  						#
						 * ##########################################################################
						 */
						return getMappingForMethod(method, userType);
						
					} catch (Throwable ex) {
						throw new IllegalStateException("Invalid mapping on handler class [" + userType.getName() + "]: " + method, ex);
					}
				}
			});


	if (logger.isDebugEnabled()) {
		logger.debug(methods.size() + " request handler methods found on " + userType + ": " + methods);
	}
	

	for (Map.Entry<Method, T> entry : methods.entrySet()) {
		Method invocableMethod = AopUtils.selectInvocableMethod(entry.getKey(), userType);
		T mapping = entry.getValue();
		registerHandlerMethod(handler, invocableMethod, mapping);
	}
}


/**
 * 获取对应的Class。
 */
location：ClassUtils
public static Class<?> getUserClass(Class<?> clazz) {
	if (clazz != null && clazz.getName().contains(CGLIB_CLASS_SEPARATOR)) {
		Class<?> superclass = clazz.getSuperclass();
		if (superclass != null && Object.class != superclass) {
			return superclass;
		}
	}
	return clazz;
}



/**
 * 获取一个map。key为方法名， value为对应的RequestMappingInfo。
 */
location：MethodIntrospector
public static <T> Map<Method, T> selectMethods(Class<?> targetType, final MetadataLookup<T> metadataLookup) {
	final Map<Method, T> methodMap = new LinkedHashMap<Method, T>();
	
	Set<Class<?>> handlerTypes = new LinkedHashSet<Class<?>>();
	Class<?> specificHandlerType = null;

	/**
	 * 判断是否是代理类。如果不是进入if。
	 */
	if (!Proxy.isProxyClass(targetType)) {
		handlerTypes.add(targetType);
		specificHandlerType = targetType;
	}
	
	
	handlerTypes.addAll(Arrays.asList(targetType.getInterfaces()));

	for (Class<?> currentHandlerType : handlerTypes) {
		
		final Class<?> targetClass = (specificHandlerType != null ? specificHandlerType : currentHandlerType);

		ReflectionUtils.doWithMethods(currentHandlerType, new ReflectionUtils.MethodCallback() {
			
			
			/**
			 * 参数是经过ReflectionUtils.USER_DECLARED_METHODS筛选过的方法。
			 */
			@Override
			public void doWith(Method method) {
				
				/**
				 * 获取更多特殊的方法，如果没有特殊的方法，直接返回传入的方法。
				 */
				Method specificMethod = ClassUtils.getMostSpecificMethod(method, targetClass);
				
				
				/**
				 * ####################################################################
				 * #                         继续上面一个方法						  #
				 * ####################################################################
				 */
				T result = metadataLookup.inspect(specificMethod);
				
				if (result != null) {
					Method bridgedMethod = BridgeMethodResolver.findBridgedMethod(specificMethod);
					if (bridgedMethod == specificMethod || metadataLookup.inspect(bridgedMethod) == null) {
						methodMap.put(specificMethod, result);
					}
				}
			}
			
		}, ReflectionUtils.USER_DECLARED_METHODS);
	}

	return methodMap;
}



/**
 * 方法过滤器。方法不是桥接方法 【并且】 不是Object类的方法。
 */
location：ReflectionUtils
public static final MethodFilter USER_DECLARED_METHODS = new MethodFilter() {
	@Override
	public boolean matches(Method method) {
		return (!method.isBridge() && method.getDeclaringClass() != Object.class);
	}
};



/**
 *
 */
location：ReflectionUtils
public static void doWithMethods(Class<?> clazz, MethodCallback mc, MethodFilter mf) {
	/**
	 * 获取类的所有方法。并遍历。
	 */
	Method[] methods = getDeclaredMethods(clazz);
	
	for (Method method : methods) {
		
		if (mf != null && !mf.matches(method)) {
			continue;
		}
		
		try {
			/**
			 * ####################################################################
			 * #                         继续上面一个方法						  #
			 * ####################################################################
			 */
			mc.doWith(method);
		} catch (IllegalAccessException ex) {
			throw new IllegalStateException("Not allowed to access method '" + method.getName() + "': " + ex);
		}
	}
	
	/**
	 * 判断类是否有父类或者是接口。
	 */
	if (clazz.getSuperclass() != null) {
		doWithMethods(clazz.getSuperclass(), mc, mf);
	} else if (clazz.isInterface()) {
		for (Class<?> superIfc : clazz.getInterfaces()) {
			doWithMethods(superIfc, mc, mf);
		}
	}
}



/**
 *
 */
location：ClassUtils
public static Method getMostSpecificMethod(Method method, Class<?> targetClass) {
	/**
	 * isOverridable(method, targetClass)：看这个method是否是可覆盖的，就是用public和protected修饰的。
	 *
	 * 方法是否为空    方法是否可以覆盖   类是否为空   方法对应的类和给定的类是否是相等。
	 */
	if (method != null && isOverridable(method, targetClass) && targetClass != null && targetClass != method.getDeclaringClass()) {
		try {
			if (Modifier.isPublic(method.getModifiers())) {
				try {
					return targetClass.getMethod(method.getName(), method.getParameterTypes());
				} catch (NoSuchMethodException ex) {
					return method;
				}
			} else {
				Method specificMethod = ReflectionUtils.findMethod(targetClass, method.getName(), method.getParameterTypes());
				return (specificMethod != null ? specificMethod : method);
			}
		} catch (SecurityException ex) {
			// 
		}
	}
	return method;
}



/**
 * 获取方法上的@RequestMapping，并构建对应的RequestMappingInfo。
 * 在获取方法上的@RequestMapping，并构建对应的RequestMappingInfo。
 * 然后合并这两个RequestMappingInfo
 */
location：RequestMappingHandlerMapping
protected RequestMappingInfo getMappingForMethod(Method method, Class<?> handlerType) {
	/**
	 * 通过方法获取对应的RequestMappingHandlerMapping。
	 */
	RequestMappingInfo info = createRequestMappingInfo(method);
	
	if (info != null) {
		/**
		 * 获取类的RequestMappingInfo
		 */
		RequestMappingInfo typeInfo = createRequestMappingInfo(handlerType);
		
		if (typeInfo != null) {
			info = typeInfo.combine(info);
		}
	}
	
	
	return info;
}


/**
 * 
 */
location：RequestMappingHandlerMapping
private RequestMappingInfo createRequestMappingInfo(AnnotatedElement element) {
	/**
	 * 获取给定元素的RequestMapping注解。
	 */
	RequestMapping requestMapping = AnnotatedElementUtils.findMergedAnnotation(element, RequestMapping.class);
	
	RequestCondition<?> condition = (element instanceof Class ? getCustomTypeCondition((Class<?>) element) : getCustomMethodCondition((Method) element));
	
	/**
	 * 创建一个RequestMappingInfo对象。
	 */
	return (requestMapping != null ? createRequestMappingInfo(requestMapping, condition) : null);
}


/**
 * 创建一个RequestMappingInfo对象。
 *
 * RequestMappingInfo可以理解就是@RequestMapping各个属性对应的实体。RequestMappingInfo保存着@RequestMapping所有属性信息。
 */
location：RequestMappingHandlerMapping
protected RequestMappingInfo createRequestMappingInfo(RequestMapping requestMapping, RequestCondition<?> customCondition) {

	return RequestMappingInfo.paths(resolveEmbeddedValuesInPatterns(requestMapping.path()))
			.methods(requestMapping.method())
			.params(requestMapping.params())
			.headers(requestMapping.headers())
			.consumes(requestMapping.consumes())
			.produces(requestMapping.produces())
			.mappingName(requestMapping.name())
			.customCondition(customCondition)
			.options(this.config)
			.build();
}


/**
 * 合并两个RequestMappingInfo，并构建出一个新的RequestMappingInfo。
 */
location：RequestMappingInfo
public RequestMappingInfo combine(RequestMappingInfo other) {
	String name = combineNames(other);
	PatternsRequestCondition patterns = this.patternsCondition.combine(other.patternsCondition);
	RequestMethodsRequestCondition methods = this.methodsCondition.combine(other.methodsCondition);
	ParamsRequestCondition params = this.paramsCondition.combine(other.paramsCondition);
	HeadersRequestCondition headers = this.headersCondition.combine(other.headersCondition);
	ConsumesRequestCondition consumes = this.consumesCondition.combine(other.consumesCondition);
	ProducesRequestCondition produces = this.producesCondition.combine(other.producesCondition);
	RequestConditionHolder custom = this.customConditionHolder.combine(other.customConditionHolder);

	return new RequestMappingInfo(name, patterns, methods, params, headers, consumes, produces, custom.getCondition());
}



/**
 * 查找桥接方法。
 */
location：BridgeMethodResolver
public static Method findBridgedMethod(Method bridgeMethod) {
	if (bridgeMethod == null || !bridgeMethod.isBridge()) {
		return bridgeMethod;
	}
	
	List<Method> candidateMethods = new ArrayList<Method>();
	Method[] methods = ReflectionUtils.getAllDeclaredMethods(bridgeMethod.getDeclaringClass());
	for (Method candidateMethod : methods) {
		if (isBridgedCandidateFor(candidateMethod, bridgeMethod)) {
			candidateMethods.add(candidateMethod);
		}
	}
	
	if (candidateMethods.size() == 1) {
		return candidateMethods.get(0);
	}
	
	Method bridgedMethod = searchCandidates(candidateMethods, bridgeMethod);
	if (bridgedMethod != null) {
		return bridgedMethod;
	} else {
		return bridgeMethod;
	}
}





/**
 * 
 */
location：AopUtils
public static Method selectInvocableMethod(Method method, Class<?> targetType) {
	Method methodToUse = MethodIntrospector.selectInvocableMethod(method, targetType);
	if (Modifier.isPrivate(methodToUse.getModifiers()) && !Modifier.isStatic(methodToUse.getModifiers()) && SpringProxy.class.isAssignableFrom(targetType)) {
		throw new IllegalStateException(String.format("Need to invoke method '%s' found on proxy for target class '%s' but cannot " + "be delegated to target bean. Switch its visibility to package or protected.", method.getName(), method.getDeclaringClass().getSimpleName()));
	}
	return methodToUse;
}

/**
 * 判断这个方法的声明类和给定的类是否是同一个。
 */
location：MethodIntrospector
public static Method selectInvocableMethod(Method method, Class<?> targetType) {
	if (method.getDeclaringClass().isAssignableFrom(targetType)) {
		return method;
	}
	
	try {
		String methodName = method.getName();
		Class<?>[] parameterTypes = method.getParameterTypes();
		for (Class<?> ifc : targetType.getInterfaces()) {
			try {
				return ifc.getMethod(methodName, parameterTypes);
			}catch (NoSuchMethodException ex) {
				
			}
		}
		return targetType.getMethod(methodName, parameterTypes);
	} catch (NoSuchMethodException ex) {
		throw new IllegalStateException(String.format(method.getName(), method.getDeclaringClass().getSimpleName()));
	}
}





################################################################################
#				注册RequestMapping			#
################################################################################

/**
 * this.mappingRegistry是AbstractHandlerMethodMapping的内部类。
 */
location：AbstractHandlerMethodMapping
protected void registerHandlerMethod(Object handler, Method method, T mapping) {
	this.mappingRegistry.register(mapping, handler, method);
}


/**
 * mapping：RequestMappingInfo。
 */
location：AbstractHandlerMethodMapping.MappingRegister
public void register(T mapping, Object handler, Method method) {
	this.readWriteLock.writeLock().lock();
	
	try {
		/**
		 * 构建HandlerMethod，并判断是否唯一。
		 */
		HandlerMethod handlerMethod = createHandlerMethod(handler, method);
		assertUniqueMethodMapping(handlerMethod, mapping);

		if (logger.isInfoEnabled()) {
			logger.info("Mapped \"" + mapping + "\" onto " + handlerMethod);
		}
		
		/**
		 * 以mapping（RequestMappingInfo）为键，以handlerMethod（HandlerMethod）为值放入Map中。
		 */
		this.mappingLookup.put(mapping, handlerMethod);

		/**
		 * 获取对应的Url。并以url为key，mapping（RequestMappingInfo）为值，放入Map中。
		 */
		List<String> directUrls = getDirectUrls(mapping);
		for (String url : directUrls) {
			this.urlLookup.add(url, mapping);
		}

		String name = null;
		if (getNamingStrategy() != null) {
			name = getNamingStrategy().getName(handlerMethod, mapping);
			addMappingName(name, handlerMethod);
		}

		CorsConfiguration corsConfig = initCorsConfiguration(handler, method, mapping);
		if (corsConfig != null) {
			this.corsLookup.put(handlerMethod, corsConfig);
		}

		/**
		 * private final Map<T, MappingRegistration<T>> registry = new HashMap<T, MappingRegistration<T>>();
		 */
		this.registry.put(mapping, new MappingRegistration<T>(mapping, handlerMethod, directUrls, name));
		
	} finally {
		this.readWriteLock.writeLock().unlock();
	}
}



/**
 * 构建HandlerMethod
 */
location：AbstractHandlerMethodMapping.MappingRegister
protected HandlerMethod createHandlerMethod(Object handler, Method method) {
	HandlerMethod handlerMethod;
	if (handler instanceof String) {
		String beanName = (String) handler;
		handlerMethod = new HandlerMethod(beanName, getApplicationContext().getAutowireCapableBeanFactory(), method);
	} else {
		handlerMethod = new HandlerMethod(handler, method);
	}
	return handlerMethod;
}

/**
 * HandlerMethod构造函数。
 */
location：HandlerMethod
public HandlerMethod(String beanName, BeanFactory beanFactory, Method method) {
	Assert.hasText(beanName, "Bean name is required");
	Assert.notNull(beanFactory, "BeanFactory is required");
	Assert.notNull(method, "Method is required");
	this.bean = beanName;
	this.beanFactory = beanFactory;
	this.beanType = ClassUtils.getUserClass(beanFactory.getType(beanName));
	this.method = method;
	this.bridgedMethod = BridgeMethodResolver.findBridgedMethod(method);
	this.parameters = initMethodParameters();
	evaluateResponseStatus();
}

/**
 *
 */
location：RequestMappingInfoHandlerMethodMappingNamingStrategy
public String getName(HandlerMethod handlerMethod, RequestMappingInfo mapping) {
	if (mapping.getName() != null) {
		return mapping.getName();
	}
	
	StringBuilder sb = new StringBuilder();
	String simpleTypeName = handlerMethod.getBeanType().getSimpleName();
	
	for (int i = 0 ; i < simpleTypeName.length(); i++) {
		if (Character.isUpperCase(simpleTypeName.charAt(i))) {
			sb.append(simpleTypeName.charAt(i));
		}
	}
	
	sb.append(SEPARATOR).append(handlerMethod.getMethod().getName());
	return sb.toString();
}

/**
 *
 */
location：MappingRegistration
public MappingRegistration(T mapping, HandlerMethod handlerMethod, List<String> directUrls, String mappingName) {
	Assert.notNull(mapping, "Mapping must not be null");
	Assert.notNull(handlerMethod, "HandlerMethod must not be null");
	this.mapping = mapping;
	this.handlerMethod = handlerMethod;
	this.directUrls = (directUrls != null ? directUrls : Collections.<String>emptyList());
	this.mappingName = mappingName;
}