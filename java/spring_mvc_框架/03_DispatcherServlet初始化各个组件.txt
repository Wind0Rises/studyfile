
一、总计


二、重要的类


三、源码	




/**
 *
 */
location：DispatcherServlet
protected void onRefresh(ApplicationContext context) {
	initStrategies(context);
}


/**
 *
 */
location：DispatcherServlet
protected void initStrategies(ApplicationContext context) {
	/**
	 * 1、MultipartResolver用于文件上传的。文件处理。如果没有，就没有了。
	 */
	initMultipartResolver(context);
	
	/**
	 * 2、国际化处理。并获取默认的LocaleResolver。
	 */
	initLocaleResolver(context);
	
	/**
	 * 3、个性化主题处理。
	 */
	initThemeResolver(context);
	
	/**
	 * 4、HandlerMapping。包含静态资源的映射，<mvc:resources>
	 */
	initHandlerMappings(context);
	
	/**
	 * 5、映射器适配器。
	 */
	initHandlerAdapters(context);
	
	/**
	 * 6、异常处理。
	 */
	initHandlerExceptionResolvers(context);
	
	/**
	 * 请求视图转换器。
	 */
	initRequestToViewNameTranslator(context);
	
	/**
	 * 图处理。
	 */
	initViewResolvers(context);
	
	/**
	 *
	 */
	initFlashMapManager(context);
}









#################################################
#        1、MultipartResolver【文件处理】  		#
#################################################
初始化第一步：初始化MultipartResolver。用于文件上传的接口。
		Multipart：['mʌlti:pɑ:t]：多部件的；
		Resolver[rɪ'zɒlvə]：解决，决定；


/**
 * MultipartResolver：用于处理文件请求的。
 * 		boolean isMultipart(HttpServletRequest request)：判断是否是Multipart类型的请求。
 *		MultipartHttpServletRequest resolveMultipart(HttpServletRequest request)：解析HTTP请求，并封装成MultipartHttpServletRequest请求。
 * 		cleanupMultipart(MultipartHttpServletRequest request)：
 * 
 * 初始化DispatcherServlet使用的MultipartResolver。如果没有在BeanFactory中没有获取给定名称的bean，则DispatcherServlet中的multipartResolver为null。
 */
location：DispatcherServlet
private void initMultipartResolver(ApplicationContext context) {
	try {
	
		// 从Context获取multipartResolver为名称，并且MultipartResolver类型的bean。
		this.multipartResolver = context.getBean(MULTIPART_RESOLVER_BEAN_NAME, MultipartResolver.class);
		if (logger.isDebugEnabled()) {
			logger.debug("Using MultipartResolver [" + this.multipartResolver + "]");
		}
		
	} catch (NoSuchBeanDefinitionException ex) { 
		// 默认没有multipart resolver.
		this.multipartResolver = null;
		if (logger.isDebugEnabled()) {
			logger.debug("Unable to locate MultipartResolver with name '" + MULTIPART_RESOLVER_BEAN_NAME + "': no multipart request handling provided");
		}
	}
}






#################################################
#         2、LocaleResolver【国际化】  			#
#################################################
/**
 * 初始化第二步：初始化LocaleResolver。国际化处理。如果没有配置，默认使用
 */
private void initLocaleResolver(ApplicationContext context) {
	try {
		/**
		 * 从Context中获取是否存在名称为localeResolver并且是LocaleResolver子类的Bean。
		 */
		this.localeResolver = context.getBean(LOCALE_RESOLVER_BEAN_NAME, LocaleResolver.class);
		if (logger.isDebugEnabled()) {
			logger.debug("Using LocaleResolver [" + this.localeResolver + "]");
		}
	} catch (NoSuchBeanDefinitionException ex) {
		/**
		 * 获取一个默认的LocaleResolver。
		 * org.springframework.web.servlet.i18n.AcceptHeaderLocaleResolver
		 */
		this.localeResolver = getDefaultStrategy(context, LocaleResolver.class);
		if (logger.isDebugEnabled()) {
			logger.debug("Unable to locate LocaleResolver with name '" + LOCALE_RESOLVER_BEAN_NAME + "': using default [" + this.localeResolver + "]");
		}
	}
}

/**
 * 获取默认的策略。
 */
location：DispatcherServlet
protected <T> T getDefaultStrategy(ApplicationContext context, Class<T> strategyInterface) {
	List<T> strategies = getDefaultStrategies(context, strategyInterface);
	if (strategies.size() != 1) {
		throw new BeanInitializationException("DispatcherServlet needs exactly 1 strategy for interface [" + strategyInterface.getName() + "]");
	}
	return strategies.get(0);
}

/**
 * 获取默认的策略。线程配置文件中获取对应的配置，然后加载配置，默认使用AcceptHeaderLocaleResolver。
 */
location：DispatcherServlet
protected <T> List<T> getDefaultStrategies(ApplicationContext context, Class<T> strategyInterface) {
	String key = strategyInterface.getName();
	String value = defaultStrategies.getProperty(key);
	
	if (value != null) {
		String[] classNames = StringUtils.commaDelimitedListToStringArray(value);
		List<T> strategies = new ArrayList<T>(classNames.length);
		for (String className : classNames) {
			try {
				Class<?> clazz = ClassUtils.forName(className, DispatcherServlet.class.getClassLoader());
				Object strategy = createDefaultStrategy(context, clazz);
				strategies.add((T) strategy);
			} catch (ClassNotFoundException ex) {
				throw new BeanInitializationException("Could not find DispatcherServlet's default strategy class [" + className + "] for interface [" + key + "]", ex);
			}
			catch (LinkageError err) {
				throw new BeanInitializationException("Error loading DispatcherServlet's default strategy class [" + className + "] for interface [" + key + "]: problem with class file or dependent class", err);
			}
		}
		return strategies;
	} else {
		return new LinkedList<T>();
	}
}

#########      DispatcherServlet的静态构造代码块    ##############
static {
	try {
		/**
		 * DEFAULT_STRATEGIES_PATH = "DispatcherServlet.properties";这个与文件DispatcherServlet类在同一包下。
		 */
		ClassPathResource resource = new ClassPathResource(DEFAULT_STRATEGIES_PATH, DispatcherServlet.class);
		defaultStrategies = PropertiesLoaderUtils.loadProperties(resource);
	}
	catch (IOException ex) {
		throw new IllegalStateException("Could not load '" + DEFAULT_STRATEGIES_PATH + "': " + ex.getMessage());
	}
}

#############################################################  DispatcherServlet.properties  ################################################################
org.springframework.web.servlet.LocaleResolver=org.springframework.web.servlet.i18n.AcceptHeaderLocaleResolver
org.springframework.web.servlet.ThemeResolver=org.springframework.web.servlet.theme.FixedThemeResolver
org.springframework.web.servlet.HandlerMapping=org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping,org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping
org.springframework.web.servlet.HandlerAdapter=org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter,org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter,
											   org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter
org.springframework.web.servlet.HandlerExceptionResolver=org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerExceptionResolver,org.springframework.web.servlet.mvc.annotation.ResponseStatusExceptionResolver,\
											   org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver
org.springframework.web.servlet.RequestToViewNameTranslator=org.springframework.web.servlet.view.DefaultRequestToViewNameTranslator
org.springframework.web.servlet.ViewResolver=org.springframework.web.servlet.view.InternalResourceViewResolver
org.springframework.web.servlet.FlashMapManager=org.springframework.web.servlet.support.SessionFlashMapManager
############################################################################################################################################################






#################################################
#         3、ThemeResolver【主题】  			#
#################################################
/**
 * 个性化主题
 * 初始化第三步：初始化ThemeResolver。默认使用FixedThemeResolver
 */
location：DispatcherServlet
private void initThemeResolver(ApplicationContext context) {
	try {
		this.themeResolver = context.getBean(THEME_RESOLVER_BEAN_NAME, ThemeResolver.class);
		if (logger.isDebugEnabled()) {
			logger.debug("Using ThemeResolver [" + this.themeResolver + "]");
		}
	} catch (NoSuchBeanDefinitionException ex) {
		/**
		 * 获取一个默认的ThemeResolver。
		 * org.springframework.web.servlet.theme.FixedThemeResolver
		 */
		this.themeResolver = getDefaultStrategy(context, ThemeResolver.class);
		if (logger.isDebugEnabled()) {
			logger.debug("Unable to locate ThemeResolver with name '" + THEME_RESOLVER_BEAN_NAME + "': using default [" + this.themeResolver + "]");
		}
	}
}








#########################################################
#         4、HandlerMapping【处理器映射器】  			#
#########################################################
/**
 * 初始化处理器映射器。
 */
location：DispatcherServlet
private void initHandlerMappings(ApplicationContext context) {

	/** 
	 * private List<HandlerMapping> handlerMappings;注意handlerMappings是一个集合。
	 */
	this.handlerMappings = null;

	// detectAllHandlerMappings默认为true，是否查找所有的处理器映射器；还是只使用默认的处理器映射器。
	if (this.detectAllHandlerMappings) {
	
	
		/**
		 * ##########################################################################################################################################################################
		 * #    查找所有的HandlerMappings在ApplicationContext，包含parent context。（以XML配置<mvc:annotaion-driven>为例）这里会在MvcNamespaceHandler解析<mvc:annotation-driven>    #
		 * #    标签时创建BeanNameUrlHandlerMapping和RequestMappingHandlerMapping这两个类对象的BeanDefinition。并注入到BeanFactory中。                                              #
		 * ##########################################################################################################################################################################
		 */
		Map<String, HandlerMapping> matchingBeans = BeanFactoryUtils.beansOfTypeIncludingAncestors(context, HandlerMapping.class, true, false);
		
		/**
		 * 按顺序排列HandlerMappings。
		 */
		if (!matchingBeans.isEmpty()) {
			this.handlerMappings = new ArrayList<HandlerMapping>(matchingBeans.values());
			AnnotationAwareOrderComparator.sort(this.handlerMappings);
		}
	} else {
		try {
			// HANDLER_MAPPING_BEAN_NAME = handlerMapping。
			// 这个Context是Spring的ApplicationContext还是Spring MVC WebApplicationContext。
			HandlerMapping hm = context.getBean(HANDLER_MAPPING_BEAN_NAME, HandlerMapping.class);
			this.handlerMappings = Collections.singletonList(hm);
		} catch (NoSuchBeanDefinitionException ex) {
			// 忽略，最后将添加一个默认的HandlerMapping
		}
	}

	/** 
	 * 如果没有找到其他映射，要确保我们至少有一个HandlerMapping，通过注册默认的HandlerMapping。
	 * 		默认初始化两个BeanNameUrlHandlerMapping和DefaultAnnotationHandlerMapping两个HandlerMapping.
	 */
	if (this.handlerMappings == null) {
		this.handlerMappings = getDefaultStrategies(context, HandlerMapping.class);
		if (logger.isDebugEnabled()) {
			logger.debug("No HandlerMappings found in servlet '" + getServletName() + "': using default");
		}
	}
}






#########################################################
#         5、HandlerAdapter【处理器适配器】  			#
#########################################################
/**
 *
 */ 
private void initHandlerAdapters(ApplicationContext context) {
	this.handlerAdapters = null;

	if (this.detectAllHandlerAdapters) {
		/**
		 * ##########################################################################################################################################################################
		 * #    查找所有的HandlerAdapter在ApplicationContext，包含parent context。（以XML配置<mvc:annotaion-driven>为例）这里会在MvcNamespaceHandler解析<mvc:annotation-driven>     #
		 * #    标签时创建RequestMappingHandlerAdapter、HttpRequestHandlerAdapter和SimpleControllerHandlerAdapter这三个类对象的BeanDefinition。并注入到BeanFactory中。 				#
		 * ##########################################################################################################################################################################
		 */
		Map<String, HandlerAdapter> matchingBeans = BeanFactoryUtils.beansOfTypeIncludingAncestors(context, HandlerAdapter.class, true, false);
		if (!matchingBeans.isEmpty()) {
			this.handlerAdapters = new ArrayList<HandlerAdapter>(matchingBeans.values());
			AnnotationAwareOrderComparator.sort(this.handlerAdapters);
		}
	} else {
		try {
			HandlerAdapter ha = context.getBean(HANDLER_ADAPTER_BEAN_NAME, HandlerAdapter.class);
			this.handlerAdapters = Collections.singletonList(ha);
		} catch (NoSuchBeanDefinitionException ex) {
			 
		}
	}

	// 默认创建HttpRequestHandlerAdapter、SimpleControllerHandlerAdapter
	if (this.handlerAdapters == null) {
		this.handlerAdapters = getDefaultStrategies(context, HandlerAdapter.class);
		if (logger.isDebugEnabled()) {
			logger.debug("No HandlerAdapters found in servlet '" + getServletName() + "': using default");
		}
	}
}






#########################################################
#         6、HandlerExceptionResolver【异常处理】  		#
#########################################################
/**
 *
 */
private void initHandlerExceptionResolvers(ApplicationContext context) {
	this.handlerExceptionResolvers = null;

	if (this.detectAllHandlerExceptionResolvers) {
		
		/**
		 * ###################################################################################################################################################################################
		 * #    查找所有的HandlerExceptionResolver在ApplicationContext，包含parent context。（以XML配置<mvc:annotaion-driven>为例）这里会在MvcNamespaceHandler解析<mvc:annotation-driven>    #
		 * #    标签时创建DefaultHandlerExceptionResolver、ExceptionHandlerExceptionResolver和ResponseStatusExceptionResolver这三个类对象的BeanDefinition。并注入到BeanFactory中。 		     #
		 * ###################################################################################################################################################################################
		 */
		Map<String, HandlerExceptionResolver> matchingBeans = BeanFactoryUtils.beansOfTypeIncludingAncestors(context, HandlerExceptionResolver.class, true, false);
		if (!matchingBeans.isEmpty()) {
			this.handlerExceptionResolvers = new ArrayList<HandlerExceptionResolver>(matchingBeans.values());
			AnnotationAwareOrderComparator.sort(this.handlerExceptionResolvers);
		}
	} else {
		try {
			HandlerExceptionResolver her = context.getBean(HANDLER_EXCEPTION_RESOLVER_BEAN_NAME, HandlerExceptionResolver.class);
			this.handlerExceptionResolvers = Collections.singletonList(her);
		} catch (NoSuchBeanDefinitionException ex) {
			// Ignore, no HandlerExceptionResolver is fine too.
		}
	}

	// 创建默认的异常处理AnnotationMethodHandlerExceptionResolver、ResponseStatusExceptionResolver、DefaultHandlerExceptionResolver。
	if (this.handlerExceptionResolvers == null) {
		this.handlerExceptionResolvers = getDefaultStrategies(context, HandlerExceptionResolver.class);
		if (logger.isDebugEnabled()) {
			logger.debug("No HandlerExceptionResolvers found in servlet '" + getServletName() + "': using default");
		}
	}
}




#############################################################
#       7、RequestToViewNameTranslator【请求视图转换器】  	#
#############################################################
/**
 *
 */
location：DispatcherServlet
private void initRequestToViewNameTranslator(ApplicationContext context) {
	try {
		this.viewNameTranslator = context.getBean(REQUEST_TO_VIEW_NAME_TRANSLATOR_BEAN_NAME, RequestToViewNameTranslator.class);
		if (logger.isDebugEnabled()) {
			logger.debug("Using RequestToViewNameTranslator [" + this.viewNameTranslator + "]");
		}
	} catch (NoSuchBeanDefinitionException ex) {
		
		/**
		 * 获取一个默认的ThemeResolver。
		 * org.springframework.web.servlet.view.DefaultRequestToViewNameTranslator
		 */
		this.viewNameTranslator = getDefaultStrategy(context, RequestToViewNameTranslator.class);
		if (logger.isDebugEnabled()) {
			logger.debug("Unable to locate RequestToViewNameTranslator with name '" + REQUEST_TO_VIEW_NAME_TRANSLATOR_BEAN_NAME + "': using default [" + this.viewNameTranslator + "]");
		}
	}
}




#########################################################
#       		8、ViewResolver【视图解析器】  			#
#########################################################
/**
 *
 */
location：DispatcherServlet
private void initViewResolvers(ApplicationContext context) {
	this.viewResolvers = null;

	if (this.detectAllViewResolvers) {
		/**
		 * 这个在解析mvc标签时，并没有设置，这里获取的是空的。
		 */
		Map<String, ViewResolver> matchingBeans = BeanFactoryUtils.beansOfTypeIncludingAncestors(context, ViewResolver.class, true, false);
		if (!matchingBeans.isEmpty()) {
			this.viewResolvers = new ArrayList<ViewResolver>(matchingBeans.values());
			AnnotationAwareOrderComparator.sort(this.viewResolvers);
		}
	} else {
		try {
			ViewResolver vr = context.getBean(VIEW_RESOLVER_BEAN_NAME, ViewResolver.class);
			this.viewResolvers = Collections.singletonList(vr);
		} catch (NoSuchBeanDefinitionException ex) {
			// 
		}
	}
	
	/**
	 * 获取一个默认的ThemeResolver。
	 * org.springframework.web.servlet.view.InternalResourceViewResolver
	 */
	if (this.viewResolvers == null) {
		this.viewResolvers = getDefaultStrategies(context, ViewResolver.class);
		if (logger.isDebugEnabled()) {
			logger.debug("No ViewResolvers found in servlet '" + getServletName() + "': using default");
		}
	}
}




#########################################################
#       		9、FlashMapManager【】  				#
#########################################################
/**
 *
 */
location：DispatcherServlet
private void initFlashMapManager(ApplicationContext context) {
	try {
		this.flashMapManager = context.getBean(FLASH_MAP_MANAGER_BEAN_NAME, FlashMapManager.class);
		if (logger.isDebugEnabled()) {
			logger.debug("Using FlashMapManager [" + this.flashMapManager + "]");
		}
	} catch (NoSuchBeanDefinitionException ex) { 
	
		/**
		 * 获取一个默认的ThemeResolver。
		 * org.springframework.web.servlet.support.SessionFlashMapManager
		 */
		this.flashMapManager = getDefaultStrategy(context, FlashMapManager.class);
		if (logger.isDebugEnabled()) {
			logger.debug("Unable to locate FlashMapManager with name '" + FLASH_MAP_MANAGER_BEAN_NAME + "': using default [" + this.flashMapManager + "]");
		}
	}
}

