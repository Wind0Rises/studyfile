


一、总结：
	1)、一个Http流程
		1、首先被请求被转到DispatcherServlet的service(..)方法，开始了一个请求处理。
	

	
二、重要的类
	1、LocaleContext（接口）一个策略接口，用于确定当前的（语言）环境。可以通过LocaleContextHolder类将LocaleContext实例与线程关联。
		方法。
			Locale getLocale()：返回当前的语言环境，它可以是固定的，也可以根据实现策略动态确定。
	
	
	2、Locale（final 类）
	
	
	3、LocaleContextHolder
		
	
三、源码。

#############################################
#				1、请求接入					#
#############################################
/**
 * Servlet extends GenericServlet
 * 		HttpServlet【public void service(..)：入口   protected void service(..)：处理】
 *					HttpServletBean
 * 								FrameworkServlet【protected void service(..)】
 * 												DispatcherServlet
 * 
 * 处理流程就是HttpServlet.【public】service   			-----》   		FrameworkServlet.【protected】service      	-----》
 * 			   HttpServlet.【protected】service			-----》			FrameworkServlet.doPost(Get、Push...)		-----》
 * 			   FrameworkServlet.processRequest			-----》			DispatcherServlet.doService					-----》
 * 			   FrameworkServlet.doDispatch
 * 
 * 这是一个DispatcherServlet实例。
 * 		HttpServlet的service(..)方法。
 */
location：HttpServlet
public void service(ServletRequest req, ServletResponse res) throws ServletException, IOException {
	HttpServletRequest request;
	HttpServletResponse	response;
	
	try {
	    request = (HttpServletRequest) req;
	    response = (HttpServletResponse) res;
	} catch (ClassCastException e) {
	    throw new ServletException("non-HTTP request or response");
	}
	service(request, response);
}

/**
 * 使用FrameworkServlet实例的对象处理。
 */
location：FrameworkServlet
protected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
	HttpMethod httpMethod = HttpMethod.resolve(request.getMethod());
	if (httpMethod != HttpMethod.PATCH && httpMethod != null) {
		super.service(request, response);
	} else {
		this.processRequest(request, response);
	}
}


/**
 * 这个是使用HttpServlet实例的service()方法。
 * 根据不同的请求方法进行不同的处理。
 */
location：HttpServlet
protected void service(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {

	String method = req.getMethod();

	if (method.equals(METHOD_GET)) {
	    long lastModified = getLastModified(req);
		
	    if (lastModified == -1) {
			doGet(req, resp);
	    } else {
			long ifModifiedSince = req.getDateHeader(HEADER_IFMODSINCE);
			if (ifModifiedSince < (lastModified / 1000 * 1000)) {
				maybeSetLastModified(resp, lastModified);
				doGet(req, resp);
			} else {
				resp.setStatus(HttpServletResponse.SC_NOT_MODIFIED);
			}
	    }

	} else if (method.equals(METHOD_HEAD)) {
	    long lastModified = getLastModified(req);
	    maybeSetLastModified(resp, lastModified);
	    doHead(req, resp);

	} else if (method.equals(METHOD_POST)) {
	    doPost(req, resp);
	    
	} else if (method.equals(METHOD_PUT)) {
	    doPut(req, resp);	
	    
	} else if (method.equals(METHOD_DELETE)) {
	    doDelete(req, resp);
	    
	} else if (method.equals(METHOD_OPTIONS)) {
	    doOptions(req,resp);
	    
	} else if (method.equals(METHOD_TRACE)) {
	    doTrace(req,resp);
	    
	} else {
	    String errMsg = lStrings.getString("http.method_not_implemented");
	    Object[] errArgs = new Object[1];
	    errArgs[0] = method;
	    errMsg = MessageFormat.format(errMsg, errArgs);
	    
	    resp.sendError(HttpServletResponse.SC_NOT_IMPLEMENTED, errMsg);
	}
}

/**
 * Post请求处理过程。
 */
location：FrameworkServlet
protected final void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
	processRequest(request, response);
}

/**
 * Put请求处理过程。
 */
location：FrameworkServlet
protected final void doPut(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
	processRequest(request, response);
}






#############################################
#		2、processRequest前置处理			#
#############################################
/**
 * 
 */
location：FrameworkServlet
protected final void processRequest(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {

	long startTime = System.currentTimeMillis();
	Throwable failureCause = null;

	/**
	 * 获取LocaleContext实例。
	 */
	LocaleContext previousLocaleContext = LocaleContextHolder.getLocaleContext();
	LocaleContext localeContext = buildLocaleContext(request);


	/**
	 * 构建ServletRequestAttributes实例对象。
	 */
	RequestAttributes previousAttributes = RequestContextHolder.getRequestAttributes();
	ServletRequestAttributes requestAttributes = buildRequestAttributes(request, response, previousAttributes);

	/**
	 * 获取WebAsyncManager并注册回调拦截器。
	 */
	WebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request);
	asyncManager.registerCallableInterceptor(FrameworkServlet.class.getName(), new RequestBindingInterceptor());

	initContextHolders(request, localeContext, requestAttributes);

	try {
		【【【处理过程。】】】
		doService(request, response);
	} catch (ServletException ex) {
		failureCause = ex;
		throw ex;
	} catch (IOException ex) {
		failureCause = ex;
		throw ex;
	} catch (Throwable ex) {
		failureCause = ex;
		throw new NestedServletException("Request processing failed", ex);
	} finally {
	
		resetContextHolders(request, previousLocaleContext, previousAttributes);
		if (requestAttributes != null) {
			requestAttributes.requestCompleted();
		}

		if (logger.isDebugEnabled()) {
			if (failureCause != null) {
				this.logger.debug("Could not complete request", failureCause);
			}
			else {
				if (asyncManager.isConcurrentHandlingStarted()) {
					logger.debug("Leaving response open for concurrent processing");
				}
				else {
					this.logger.debug("Successfully completed request");
				}
			}
		}

		publishRequestHandledEvent(request, response, startTime, failureCause);
	}
}

/**
 * 获取LocaleContext实例。localeContextHolder、inheritableLocaleContextHolder都是ThreadLocal，也就说
 * 可以通过线程获取对应的LocaleContext。
 */
location：LocaleContextHolder
public static LocaleContext getLocaleContext() {
	LocaleContext localeContext = localeContextHolder.get();
	if (localeContext == null) {
		localeContext = inheritableLocaleContextHolder.get();
	}
	return localeContext;
}


/**
 * 构建一个LocaleContext。
 */
location：FrameworkServlet
protected LocaleContext buildLocaleContext(final HttpServletRequest request) {
	if (this.localeResolver instanceof LocaleContextResolver) {
		return ((LocaleContextResolver) this.localeResolver).resolveLocaleContext(request);
	} else {
		return new LocaleContext() {
			@Override
			public Locale getLocale() {
				return localeResolver.resolveLocale(request);
			}
		};
	}
}




/**
 * 获取RequestAttributes实例。requestAttributesHolder、inheritableRequestAttributesHolder都是ThreadLocal，也就说
 * 可以通过线程获取对应的LocaleContext。
 */
location：LocaleContextHolder
public static RequestAttributes getRequestAttributes() {
	RequestAttributes attributes = requestAttributesHolder.get();
	if (attributes == null) {
		attributes = inheritableRequestAttributesHolder.get();
	}
	return attributes;
}

/**
 * 构建一个ServletRequestAttributes
 */
location：FrameworkServlet
protected ServletRequestAttributes buildRequestAttributes(
		HttpServletRequest request, HttpServletResponse response, RequestAttributes previousAttributes) {

	if (previousAttributes == null || previousAttributes instanceof ServletRequestAttributes) {
		return new ServletRequestAttributes(request, response);
	} else {
		return null;  
	}
}




/**
 * WebAsyncManager ： 用于管理异步请求处理的中央类，主要用作SPI，通常不被应用程序类直接使用。
 * 获取一个WebAsyncManager
 */
location：WebAsyncUtils
public static WebAsyncManager getAsyncManager(ServletRequest servletRequest) {
	WebAsyncManager asyncManager = null;
	Object asyncManagerAttr = servletRequest.getAttribute(WEB_ASYNC_MANAGER_ATTRIBUTE);
	if (asyncManagerAttr instanceof WebAsyncManager) {
		asyncManager = (WebAsyncManager) asyncManagerAttr;
	}
	if (asyncManager == null) {
		asyncManager = new WebAsyncManager();
		servletRequest.setAttribute(WEB_ASYNC_MANAGER_ATTRIBUTE, asyncManager);
	}
	return asyncManager;
}


/**
 * 初始化ContextHolders
 */
location：FrameworkServlet
private void initContextHolders(HttpServletRequest request, LocaleContext localeContext, RequestAttributes requestAttributes) {
	if (localeContext != null) {
		LocaleContextHolder.setLocaleContext(localeContext, this.threadContextInheritable);
	}
	if (requestAttributes != null) {
		RequestContextHolder.setRequestAttributes(requestAttributes, this.threadContextInheritable);
	}
	if (logger.isTraceEnabled()) {
		logger.trace("Bound request context to thread: " + request);
	}
}





#############################################
#			3、doService前置处理			#
#############################################
/**
 * 处理doService。
 */
location：DispatcherServlet
protected void doService(HttpServletRequest request, HttpServletResponse response) throws Exception {
	
	if (logger.isDebugEnabled()) {
		String resumed = WebAsyncUtils.getAsyncManager(request).hasConcurrentResult() ? " resumed" : "";
		logger.debug("DispatcherServlet with name '" + getServletName() + "'" + resumed + " processing " + request.getMethod() + " request for [" + getRequestUri(request) + "]");
	}

	/** 
	 * 保存请求属性的快照，以便include after之后进行恢复。
	 */
	Map<String, Object> attributesSnapshot = null;
	if (WebUtils.isIncludeRequest(request)) {
		attributesSnapshot = new HashMap<String, Object>();
		Enumeration<?> attrNames = request.getAttributeNames();
		
		// 遍历所有的属性。
		while (attrNames.hasMoreElements()) {
			String attrName = (String) attrNames.nextElement();
			if (this.cleanupAfterInclude || attrName.startsWith(DEFAULT_STRATEGIES_PREFIX)) {
				attributesSnapshot.put(attrName, request.getAttribute(attrName));
			}
		}
	}

	/**
	 * 把已经初始化完成的MVC组件设置到request对象，
	 */
	request.setAttribute(WEB_APPLICATION_CONTEXT_ATTRIBUTE, getWebApplicationContext());
	request.setAttribute(LOCALE_RESOLVER_ATTRIBUTE, this.localeResolver);
	request.setAttribute(THEME_RESOLVER_ATTRIBUTE, this.themeResolver);
	request.setAttribute(THEME_SOURCE_ATTRIBUTE, getThemeSource());


	/**
	 * 获取FlashMapManager组件。并设置到request中。
	 */
	FlashMap inputFlashMap = this.flashMapManager.retrieveAndUpdate(request, response);
	if (inputFlashMap != null) {
		request.setAttribute(INPUT_FLASH_MAP_ATTRIBUTE, Collections.unmodifiableMap(inputFlashMap));
	}
	request.setAttribute(OUTPUT_FLASH_MAP_ATTRIBUTE, new FlashMap());
	request.setAttribute(FLASH_MAP_MANAGER_ATTRIBUTE, this.flashMapManager);

	try {
		/**
		 * ☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆
		 * ☆					处理全过程，请看下一节							☆
		 * ☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆
		 */
		doDispatch(request, response);
	} finally {
		if (!WebAsyncUtils.getAsyncManager(request).isConcurrentHandlingStarted()) {		
			/**
			 * 如果是include，则还原原始属性快照。
			 */
			if (attributesSnapshot != null) {
				restoreAttributesAfterInclude(request, attributesSnapshot);
			}
		}
	}
}



/**
 * 从request中获取属性为javax.servlet.include.request_uri的参数值。
 *
 * javax.servlet.include.request_uri  这个作用。
 */
location：WebUtils
public static boolean isIncludeRequest(ServletRequest request) {
	// INCLUDE_REQUEST_URI_ATTRIBUTE = "javax.servlet.include.request_uri"
	return (request.getAttribute(INCLUDE_REQUEST_URI_ATTRIBUTE) != null);
}



