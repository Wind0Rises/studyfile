
一、总结
	1)、调用过程。
		1、创建Mapper.java接口的代理对象。MapperProxy这个类实现了InvocationHandler接口。所以操作都是调用MapperProxy类的invoke()方法。

二、实例

	1、测试方法。
		public static void secondTest() {
			// 01、加载config.xml。这里mapperConfiguration.xml就是config.xml。
			InputStream inputStream = User.class.getClassLoader().getResourceAsStream("mapperConfiguration.xml");
			Reader reader = new InputStreamReader(inputStream);

			// 02、解析对应的config.xml文件。获取SqlSessionFactory，并通过SqlSessionFactory获取SqlSession。
			// XMLConfigBuilder是解析config.xml文件的类。
			SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(reader);
			SqlSession sqlSession = sqlSessionFactory.openSession();

			// 03、调用SqlSession中获取接口的代理，直接通过代理去操作数据库。这个UserMapper是一个代理类，UserMapper本身就是一个接口，不可能有实例对象。
			UserMapper userMapper = sqlSession.getMapper(UserMapper.class);
			System.out.println(userMapper.selectUserBySeq(1).getUserName());
			System.out.println(userMapper.getClass());
		}



三、源码。
#################################
#			获取代理类			#
#################################
/**
 * 获取对应的Mapper.java的代理对象。
 */
location：DefaultSqlSession
public <T> T getMapper(Class<T> type) {
	return this.configuration.getMapper(type, this);
}


/**
 * 获取对应的Mapper.java的代理对象。
 */
public <T> T getMapper(Class<T> type, SqlSession sqlSession) {
	// 从注册表中获取Mapper
	return this.mapperRegistry.getMapper(type, sqlSession);
}


/**
 * 从Configuration中的MapperRegister中获取对应的Mapper.java的代理对象。
 */
location：MapperRegistry
public <T> T getMapper(Class<T> type, SqlSession sqlSession) {
	/**
	 * 通过Class获取对应的MapperProxyFactory。knownMappers中的数据是在解析mapper.xml的时候放入的，
	 * 通过addMapper(..)方法添加的。MapperProxyFactory中保存着对应的mapper.java的Class信息。
	 */
	MapperProxyFactory<T> mapperProxyFactory = (MapperProxyFactory)this.knownMappers.get(type);
	
	/**
	 * MapperProxyFactory是否已经注册。
	 */
	if (mapperProxyFactory == null) {
		throw new BindingException("Type " + type + " is not known to the MapperRegistry.");
	} else {
		try {
			return mapperProxyFactory.newInstance(sqlSession);
		} catch (Exception var5) {
			throw new BindingException("Error getting mapper instance. Cause: " + var5, var5);
		}
	}
}


/**
 * 获取Mapper.java的代理类。
 */
location：MapperProxyFactory
public T newInstance(SqlSession sqlSession) {
	/**
	 * MapperProxy实现了InvocationHandler接口，其原理就是是用了JDK的动态代理。被代理对象就是Mapper接口。
	 * 创建一个代理mapper。
	 */
	MapperProxy<T> mapperProxy = new MapperProxy(sqlSession, this.mapperInterface, this.methodCache);
	
	return this.newInstance(mapperProxy);
}

/** 
 * 生产代理对象。
 */
location：MapperProxyFactory
protected T newInstance(MapperProxy<T> mapperProxy) {
	return (T) Proxy.newProxyInstance(mapperInterface.getClassLoader(), new Class[] { mapperInterface }, mapperProxy);
}





####################################################################################################################
#######################################             调用过程           #############################################
####################################################################################################################
/** 
 * 【注意：】
 *		MapperProxy这里的invoke方法，就是在mapper.java被调用是要
 *
 *
 */
location：MapperProxy
public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
	try {
		/**
		 * 一般不会走入下面两个if。
		 */
		if (Object.class.equals(method.getDeclaringClass())) {
			return method.invoke(this, args);
		} else if (isDefaultMethod(method)) {
			return invokeDefaultMethod(proxy, method, args);
		}
	} catch (Throwable var5) {
		throw ExceptionUtil.unwrapThrowable(var5);
	}
	
	
	/**
	 * MapperMethod：有两个成员变量SqlCommand command; MethodSignature method;
	 * 一个执行方法。execute(SqlSession sqlSession, Object[] args)
	 */
	
	// 如果缓存中有对应MapperMethod，就直接从缓存中取，如果没有新建一个MapperMethod，放入缓存中。
	MapperMethod mapperMethod = this.cachedMapperMethod(method);
	
	/**
	 * ##############################
	 * #  		2-1、执行过程		#
	 * ##############################
	 */
	return mapperMethod.execute(this.sqlSession, args);
}

/**
 * 调用的mapperMethod如果存在，直接从缓存中获取，如果没有新建一个MapperMethod，放入缓存中。
 */
location：MapperProxy
private MapperMethod cachedMapperMethod(Method method) {
	// 从缓存中取。
	MapperMethod mapperMethod = (MapperMethod)this.methodCache.get(method);
	
	if (mapperMethod == null) {
		/**
		 * 新建一个MapperMethod对象，并放入缓存中。
		 */
		mapperMethod = new MapperMethod(this.mapperInterface, method, this.sqlSession.getConfiguration());
		this.methodCache.put(method, mapperMethod);
	}
	
	return mapperMethod;
}


/**
 * MapperMethod：
 *		属性：
 *			SqlCommand command：其是MapperMethod内部类
 *			MethodSignature method：其是MapperMethod内部类
 *
 * 构建一个MapperMethod
 */
location：MapperMethod
public MapperMethod(Class<?> mapperInterface, Method method, Configuration config) {
	this.command = new SqlCommand(config, mapperInterface, method);
	this.method = new MethodSignature(config, mapperInterface, method);
}


/**
 * SqlCommand
 *		属性：
 *			String name：对应的MappedStatement的Id
 *			SqlCommandType type：sql命令的类型。
 *	
 *
 * 构建SqlCommand。
 */
location：SqlCommand
public SqlCommand(Configuration configuration, Class<?> mapperInterface, Method method) {
	final String methodName = method.getName();
	final Class<?> declaringClass = method.getDeclaringClass();
	
	/**
	 * 获取给定mapper.java和给定方法对应的MappedStatement。
	 */
	MappedStatement ms = resolveMappedStatement(mapperInterface, methodName, declaringClass, configuration);
	
	if (ms == null) {
		if(method.getAnnotation(Flush.class) != null){
			name = null;
			type = SqlCommandType.FLUSH;
		} else {
			throw new BindingException("Invalid bound statement (not found): " + mapperInterface.getName() + "." + methodName);
		}
	} else {
		name = ms.getId();
		type = ms.getSqlCommandType();
		
		if (type == SqlCommandType.UNKNOWN) {
			throw new BindingException("Unknown execution method for: " + name);
		}
	}
}


/**
 * 获取给定mapper.java，给定方法对应的MappedStatement。
 */
location：SqlCommand
private MappedStatement resolveMappedStatement(Class<?> mapperInterface, String methodName, Class<?> declaringClass, Configuration configuration) {
	/**
	 * 获取MappedStatement的ID。Mapper.java的名称 + 方法名。
	 */
	String statementId = mapperInterface.getName() + "." + methodName;
	
	/**
	 * 从Configuration中获取对应的MappedStatement
	 */
	if (configuration.hasStatement(statementId)) {
		return configuration.getMappedStatement(statementId);
	} else if (mapperInterface.equals(declaringClass)) {
		return null;
	}
	
	/**
	 * 获取父接口中是否有。
	 */
	for (Class<?> superInterface : mapperInterface.getInterfaces()) {
		if (declaringClass.isAssignableFrom(superInterface)) {
			MappedStatement ms = resolveMappedStatement(superInterface, methodName, declaringClass, configuration);
			if (ms != null) {
				return ms;
			}
		}
	}
	return null;
}




* ##############################
* #  		2-1、执行过程	   #
* ##############################
/**
 *
 */
location：MapperMethod
public Object execute(SqlSession sqlSession, Object[] args) {
	Object param;
	Object result;
	
	/**
	 * 最终调用的还是通过SqlSession方法进行操作。这里只是坐了归类。
	 */
	switch(this.command.getType()) {
	
		case INSERT:
			param = this.method.convertArgsToSqlCommandParam(args);
			result = this.rowCountResult(sqlSession.insert(this.command.getName(), param));
			break;
			
		case UPDATE:
			param = this.method.convertArgsToSqlCommandParam(args);
			result = this.rowCountResult(sqlSession.update(this.command.getName(), param));
			break;
			
		case DELETE:
			param = this.method.convertArgsToSqlCommandParam(args);
			result = this.rowCountResult(sqlSession.delete(this.command.getName(), param));
			break;
			
		case SELECT:
			
			// 返回为空，并且有ResultHandler。
			if (this.method.returnsVoid() && this.method.hasResultHandler()) {
				this.executeWithResultHandler(sqlSession, args);
				result = null;
			
			// 返回多条数据。
			} else if (this.method.returnsMany()) {
				result = this.executeForMany(sqlSession, args);
				
			// 返回是以Map。
			} else if (this.method.returnsMap()) {
				result = this.executeForMap(sqlSession, args);
				
			// 返回游标
			} else if (this.method.returnsCursor()) {
				result = this.executeForCursor(sqlSession, args);
			
			// 其他
			} else {
				param = this.method.convertArgsToSqlCommandParam(args);
				/** 
				 * this.command.getName()   ===>  MappedStatement对应的id
				 */
				result = sqlSession.selectOne(this.command.getName(), param);
			}
			break;
			
		case FLUSH:
			result = sqlSession.flushStatements();
			break;
			
			
		default:
			throw new BindingException("Unknown execution method for: " + this.command.getName());
	}

	if (result == null && this.method.getReturnType().isPrimitive() && !this.method.returnsVoid()) {
		throw new BindingException("Mapper method '" + this.command.getName() + " attempted to return null from a method with a primitive return type (" + this.method.getReturnType() + ").");
	} else {
		return result;
	}
}

/**
 * statement：MappedStatement对应的id.
 */
location：DefaultSqlSession
public <T> T selectOne(String statement, Object parameter) {
	List<T> list = this.selectList(statement, parameter);
	if (list.size() == 1) {
		return list.get(0);
	} else if (list.size() > 1) {
		throw new TooManyResultsException("Expected one result (or null) to be returned by selectOne(), but found: " + list.size());
	} else {
		return null;
	}
}

/**
 * statement：MappedStatement对应的id.
 */
location：DefaultSqlSession
public <E> List<E> selectList(String statement, Object parameter) {
	return this.selectList(statement, parameter, RowBounds.DEFAULT);
}


/**
 *
 */
location：DefaultSqlSession
public <E> List<E> selectList(String statement, Object parameter, RowBounds rowBounds) {
	List var5;
	try {
		
		/**
		 * 这里的MappedStatement就是第一步解析Mapper以后生成的MappedStatement，并把其放入Configuration中。
		 * 根据statement（mapper.Mapper的名称.方法名）
		 */
		MappedStatement ms = this.configuration.getMappedStatement(statement);
		
		/**
		 * ########################################
		 * #     执行器执行具体操作				  #             这里会先走插件，为啥呢？？怎么实现的。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。
		 * ########################################
		 */
		var5 = this.executor.query(ms, this.wrapCollection(parameter), rowBounds, Executor.NO_RESULT_HANDLER);
		
	} catch (Exception var9) {
		throw ExceptionFactory.wrapException("Error querying database.  Cause: " + var9, var9);
	} finally {
		ErrorContext.instance().reset();
	}

	return var5;
}

/**
 * 从Configuration获取给定ID对应的MappedStatement
 */
location：Configuration
public MappedStatement getMappedStatement(String id) {
	return this.getMappedStatement(id, true);
}


/**
 * 从Configuration获取给定ID对应的MappedStatement
 */
location：Configuration
public MappedStatement getMappedStatement(String id, boolean validateIncompleteStatements) {
	if (validateIncompleteStatements) {
		this.buildAllStatements();
	}
	
	return (MappedStatement)this.mappedStatements.get(id);
}

/**
 *  验证是否是完整的Statement。
 */
location：Configuration
protected void buildAllStatements() {
	if (!incompleteResultMaps.isEmpty()) {
		synchronized (incompleteResultMaps) {
			incompleteResultMaps.iterator().next().resolve();
		}
	}
	if (!incompleteCacheRefs.isEmpty()) {
		synchronized (incompleteCacheRefs) {
			incompleteCacheRefs.iterator().next().resolveCacheRef();
		}
	}
	if (!incompleteStatements.isEmpty()) {
		synchronized (incompleteStatements) {
			incompleteStatements.iterator().next().parseStatementNode();
		}
	}
	if (!incompleteMethods.isEmpty()) {
		synchronized (incompleteMethods) {
			incompleteMethods.iterator().next().resolve();
		}	
	}
}






########################################
#    2-2、CachingExecutor执行操作	   #					委派模式。
########################################

/**
 * 执行具体的查询操作。
 * CachingExecutor中包含一个根据ExecutorType类型创建的Executor。这个CachingExecutor是装饰类型。
 */
location：CachingExecutor
public <E> List<E> query(MappedStatement ms, Object parameterObject, RowBounds rowBounds, ResultHandler resultHandler) throws SQLException {
	// 获取sql语句。
    BoundSql boundSql = ms.getBoundSql(parameterObject);
	
	// 创建缓存key。
    CacheKey key = createCacheKey(ms, parameterObject, rowBounds, boundSql);
	
    return query(ms, parameterObject, rowBounds, resultHandler, key, boundSql);
}


/**
 *
 */
location：MappedStatement
public BoundSql getBoundSql(Object parameterObject) {
	
	/**
	 * 获取BoundSql
	 */
	BoundSql boundSql = sqlSource.getBoundSql(parameterObject);
	
	List<ParameterMapping> parameterMappings = boundSql.getParameterMappings();
	if (parameterMappings == null || parameterMappings.size() <= 0) {
		boundSql = new BoundSql(configuration, boundSql.getSql(), parameterMap.getParameterMappings(), parameterObject);
	}

	for (ParameterMapping pm : boundSql.getParameterMappings()) {
		String rmId = pm.getResultMapId();
		
		if (rmId != null) {
			ResultMap rm = configuration.getResultMap(rmId);
			if (rm != null) {
				hasNestedResultMaps |= rm.hasNestedResultMaps();
			}
		}
	}

	return boundSql;
}



/**
 *
 */
location：CachingExecutor
public CacheKey createCacheKey(MappedStatement ms, Object parameterObject, RowBounds rowBounds, BoundSql boundSql) {
    return delegate.createCacheKey(ms, parameterObject, rowBounds, boundSql);
}


/**
 * 创建缓存Key
 */
location：BaseExecutor
public CacheKey createCacheKey(MappedStatement ms, Object parameterObject, RowBounds rowBounds, BoundSql boundSql) {
	if (closed) {
		throw new ExecutorException("Executor was closed.");
	}
	
	CacheKey cacheKey = new CacheKey();
	cacheKey.update(ms.getId());
	cacheKey.update(rowBounds.getOffset());
	cacheKey.update(rowBounds.getLimit());
	cacheKey.update(boundSql.getSql());
	
	List<ParameterMapping> parameterMappings = boundSql.getParameterMappings();
	TypeHandlerRegistry typeHandlerRegistry = ms.getConfiguration().getTypeHandlerRegistry();
	
	for (ParameterMapping parameterMapping : parameterMappings) {
		if (parameterMapping.getMode() != ParameterMode.OUT) {
			Object value;
			String propertyName = parameterMapping.getProperty();
			
			if (boundSql.hasAdditionalParameter(propertyName)) {
				value = boundSql.getAdditionalParameter(propertyName);
			} else if (parameterObject == null) {
				value = null;
			} else if (typeHandlerRegistry.hasTypeHandler(parameterObject.getClass())) {
				value = parameterObject;
			} else {
				MetaObject metaObject = configuration.newMetaObject(parameterObject);
				value = metaObject.getValue(propertyName);
			}
			cacheKey.update(value);
		}
	}
	if (configuration.getEnvironment() != null) {
		cacheKey.update(configuration.getEnvironment().getId());
	}
	
	return cacheKey;
}


/**
 * 这里主要是进行缓存操作【二级缓存操作】。
 * 如果没有命中缓存，会把查询操作委托给SimpleExecutor实例对象进行查询操作。
 */
location：CachingExecutor
public <E> List<E> query(MappedStatement ms, Object parameterObject, RowBounds rowBounds, ResultHandler resultHandler, CacheKey key, BoundSql boundSql)throws SQLException {
    
	// 获取这个MappedStatement的Cache。
	Cache cache = ms.getCache();
	
    if (cache != null) {
		/**
		 * 是否要求要刷新缓存。
		 */
		flushCacheIfRequired(ms);
		
		// 这个操作是否使用了缓存  并且resultHandler == null。默认resultHandler是等于null的。
		if (ms.isUseCache() && resultHandler == null) {
		
			ensureNoOutParams(ms, parameterObject, boundSql);
			
			
			if (!dirty) {
				
				// 上锁
				cache.getReadWriteLock().readLock().lock();
				
				try {
				
					// 从缓存中获取数据。有数据直接返回。
					List<E> cachedList = (List<E>) cache.getObject(key);
					if (cachedList != null) {
						return cachedList;
					}
					
				} finally {
					// 释放锁
					cache.getReadWriteLock().readLock().unlock();
				}
			}
			
			List<E> list = delegate.<E> query(ms, parameterObject, rowBounds, resultHandler, key, boundSql);
			
			tcm.putObject(cache, key, list);
			
			return list;
		}
    }
	
	// 最后还是通过SimpleExecutor执行查询的。
    return delegate.<E> query(ms, parameterObject, rowBounds, resultHandler, key, boundSql);
}


/**
 * isFlushCacheRequired：select都默认为false。
 *
 * 判断是否要进行刷新，如果是update、insert操作这里返回就true。
 */
location：CachingExecutor
private void flushCacheIfRequired(MappedStatement ms) {
	Cache cache = ms.getCache();
	
	if (cache != null && ms.isFlushCacheRequired()) {      
		tcm.clear(cache);
	}
}


/**
 * 
 */
location：CachingExecutor
private void ensureNoOutParams(MappedStatement ms, BoundSql boundSql) {
	if (ms.getStatementType() == StatementType.CALLABLE) {
		for (ParameterMapping parameterMapping : boundSql.getParameterMappings()) {
			if (parameterMapping.getMode() != ParameterMode.IN) {
				throw new ExecutorException("Caching stored procedures with OUT params is not supported.  Please configure useCache=false in " + ms.getId() + " statement.");
			}
		}
	}
}





#####################################
#		2-3、委托给SimpleExecutor	#
#####################################
/**
 * 
 */
location：BaseExecutor
public <E> List<E> query(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, CacheKey key, BoundSql boundSql) throws SQLException {
	
	ErrorContext.instance().resource(ms.getResource()).activity("executing a query").object(ms.getId());
	
	if (closed) {
		throw new ExecutorException("Executor was closed.");
	}
	
	if (queryStack == 0 && ms.isFlushCacheRequired()) {
		clearLocalCache();
	}
	
	List<E> list;
	try {
		queryStack++;
		
		/**
		 * 从本地缓存获取。这就是【一级缓存】
		 */
		list = resultHandler == null ? (List<E>) localCache.getObject(key) : null;
		
		
		if (list != null) {
			handleLocallyCachedOutputParameters(ms, key, parameter, boundSql);
		} else {
			list = queryFromDatabase(ms, parameter, rowBounds, resultHandler, key, boundSql);
		}
		
	} finally {
		queryStack--;
	}
	
	if (queryStack == 0) {
		for (DeferredLoad deferredLoad : deferredLoads) {
			deferredLoad.load();
		}
		
		deferredLoads.clear();
		
		if (configuration.getLocalCacheScope() == LocalCacheScope.STATEMENT) {
			clearLocalCache();
		}
	}
	
	return list;
}

/**
 * 刷新本地缓存。
 * ######################################################################################
 * #		缓存数据都是保存在Executor中。一个SqlSession内部维护一个Executor。			#
 * #	二级缓存保存在MappedStatement，一个SQL操作对应一个MappedStatement				#
 * # 	MappedStatement是被final修饰的并保存在Configuration里。所以只要是通				#
 * #		过通过Configuration创建的SqlSession，同一ID对应的就是同一个MappedStatement  #
 * ######################################################################################
 */
location：BaseExecutor
public void clearLocalCache() {
	if (!closed) {
		localCache.clear();
		localOutputParameterCache.clear();
	}
}

/**
 *
 */
location：BaseExecutor
private void handleLocallyCachedOutputParameters(MappedStatement ms, CacheKey key, Object parameter, BoundSql boundSql) {
	if (ms.getStatementType() == StatementType.CALLABLE) {
		final Object cachedParameter = localOutputParameterCache.getObject(key);
		
		if (cachedParameter != null && parameter != null) {
			final MetaObject metaCachedParameter = configuration.newMetaObject(cachedParameter);
			final MetaObject metaParameter = configuration.newMetaObject(parameter);
			for (ParameterMapping parameterMapping : boundSql.getParameterMappings()) {
				if (parameterMapping.getMode() != ParameterMode.IN) {
					final String parameterName = parameterMapping.getProperty();
					final Object cachedValue = metaCachedParameter.getValue(parameterName);
					metaParameter.setValue(parameterName, cachedValue);
				}
			}
		}
	}
}



/**
 *
 */
location：BaseExecutor
private <E> List<E> queryFromDatabase(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, CacheKey key, BoundSql boundSql) throws SQLException {
	List<E> list;
	
	// 添加本地缓存，但是缓存值为EXECUTION_PLACEHOLDER
	localCache.putObject(key, EXECUTION_PLACEHOLDER);
	
	try {
		list = doQuery(ms, parameter, rowBounds, resultHandler, boundSql);
	} finally {
		// 删除本地缓存
		localCache.removeObject(key);
	}
	
	// 添加本地缓存
	localCache.putObject(key, list);
	
	
	if (ms.getStatementType() == StatementType.CALLABLE) {
		localOutputParameterCache.putObject(key, parameter);
	}
	
	return list;
}



/**
 *
 */
location：SimpleExecutor
public <E> List<E> doQuery(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, BoundSql boundSql) throws SQLException {
	Statement stmt = null;
	try {
		Configuration configuration = ms.getConfiguration();
		StatementHandler handler = configuration.newStatementHandler(wrapper, ms, parameter, rowBounds, resultHandler, boundSql);
		
		/**
		 * 这里创建了Connection，
		 */ 
		stmt = prepareStatement(handler, ms.getStatementLog());
		
		return handler.query(stmt, resultHandler);
	} finally {
		closeStatement(stmt);
	}
}

/**
 * 创建StatementHandler的实例对象。RoutingStatementHandler也是使用委托的机制。
 */
location：Configuration
public StatementHandler newStatementHandler(Executor executor, MappedStatement mappedStatement, Object parameterObject, RowBounds rowBounds, ResultHandler resultHandler, BoundSql boundSql) {
	StatementHandler statementHandler = new RoutingStatementHandler(executor, mappedStatement, parameterObject, rowBounds, resultHandler, boundSql);
	statementHandler = (StatementHandler) interceptorChain.pluginAll(statementHandler);
	return statementHandler;
}


/**
 * 根据MappedStatement的类型，获取对应的实际操作StatementHandler。
 */
location：RoutingStatementHandler
public RoutingStatementHandler(Executor executor, MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, BoundSql boundSql) {

	switch (ms.getStatementType()) {
		case STATEMENT:
			delegate = new SimpleStatementHandler(executor, ms, parameter, rowBounds, resultHandler, boundSql);
			break;
	
		case PREPARED:
			delegate = new PreparedStatementHandler(executor, ms, parameter, rowBounds, resultHandler, boundSql);
			break;
	
		case CALLABLE:
			delegate = new CallableStatementHandler(executor, ms, parameter, rowBounds, resultHandler, boundSql);
			break;
	
		default:
			throw new ExecutorException("Unknown statement type: " + ms.getStatementType());
	}
}


/**
 *
 */
location：InterceptorChain
public Object pluginAll(Object target) {
	for (Interceptor interceptor : interceptors) {
		target = interceptor.plugin(target);
	}
	return target;
}



/**
 *
 */
location：SimpleExecutor
private Statement prepareStatement(StatementHandler handler, Log statementLog) throws SQLException {
	
	// 这个Statement就是java.sql中的Statement。
	Statement stmt;
	
	/**
	 * 创建连接。
	 */
	Connection connection = getConnection(statementLog);
	stmt = handler.prepare(connection, transaction.getTimeout());
	handler.parameterize(stmt);
	return stmt;
}

/**
 *
 */
location：BaseExecutor
protected Connection getConnection(Log statementLog) throws SQLException {
	
	// 以JdbcTransaction为例。
	Connection connection = transaction.getConnection();
	if (statementLog.isDebugEnabled()) {
		return ConnectionLogger.newInstance(connection, statementLog, queryStack);
	} else {
		return connection;
	}
}

/**
 *
 */
location：JdbcTransaction
public Connection getConnection() throws SQLException {
	if (connection == null) {
		openConnection();
	}
	return connection;
}


/**
 *
 */
location：JdbcTransaction
protected void openConnection() throws SQLException {
	if (log.isDebugEnabled()) {
		log.debug("Opening JDBC Connection");
	}
	connection = dataSource.getConnection();
	
	if (level != null) {
		/**
		 * 设置回话的事务级别。
		 */
		connection.setTransactionIsolation(level.getLevel());
	}
	
	setDesiredAutoCommit(autoCommit);
}


/**
 * ConnectionImpl extends JdbcConnection。这个方法是mysql-connector.jar里面的
 * 设置这次回话的事务等级。
 */
location：ConnectionImpl
public void setTransactionIsolation(int level) throws SQLException {
	
	synchronized (getConnectionMutex()) {
		checkClosed();

		String sql = null;

		boolean shouldSendSet = false;

		if (this.propertySet.getBooleanProperty(PropertyKey.alwaysSendSetIsolation).getValue()) {
			shouldSendSet = true;
		} else {
			if (level != this.isolationLevel) {
				shouldSendSet = true;
			}
		}

		if (this.useLocalSessionState.getValue()) {
			shouldSendSet = this.isolationLevel != level;
		}

		if (shouldSendSet) {
			switch (level) {
				case java.sql.Connection.TRANSACTION_NONE:
					throw SQLError.createSQLException(Messages.getString("Connection.24"), getExceptionInterceptor());

				case java.sql.Connection.TRANSACTION_READ_COMMITTED:
					sql = "SET SESSION TRANSACTION ISOLATION LEVEL READ COMMITTED";

					break;

				case java.sql.Connection.TRANSACTION_READ_UNCOMMITTED:
					sql = "SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED";

					break;

				case java.sql.Connection.TRANSACTION_REPEATABLE_READ:
					sql = "SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ";

					break;

				case java.sql.Connection.TRANSACTION_SERIALIZABLE:
					sql = "SET SESSION TRANSACTION ISOLATION LEVEL SERIALIZABLE";

					break;

				default:
					throw SQLError.createSQLException(Messages.getString("Connection.25", new Object[] { level }), MysqlErrorNumbers.SQL_STATE_DRIVER_NOT_CAPABLE, getExceptionInterceptor());
			}

			this.session.execSQL(null, sql, -1, null, false, this.nullStatementResultSetFactory, this.database, null, false);

			this.isolationLevel = level;
		}
	}
}

/**
 * 设置时候自动提交
 */
location：JdbcTransaction
protected void setDesiredAutoCommit(boolean desiredAutoCommit) {
	try {
		if (connection.getAutoCommit() != desiredAutoCommit) {
			if (log.isDebugEnabled()) {
				log.debug("Setting autocommit to " + desiredAutoCommit + " on JDBC Connection [" + connection + "]");
			}
			
			connection.setAutoCommit(desiredAutoCommit);
		}
	} catch (SQLException e) {
		throw new TransactionException("Error configuring AutoCommit.  " + "Your driver may not support getAutoCommit() or setAutoCommit(). " + "Requested setting: " + desiredAutoCommit + ".  Cause: " + e, e);
	}
}
