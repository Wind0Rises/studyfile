

一、总计
	1)、索引。
		1、如何创建索引
			create index index_name on table table_name(column_name);
			
			
		2、为什么使用B+树作为数据库索引。
			* 一般情况下索引的数据结构都是使用B+树，B+树的数据结构特点，叶子节点使用链表链接起来【对范围查找很有帮助】，B+树的B+树的中间节点不保存数据，所以磁盘页能容
			  纳更多节点元素，更“矮胖”【B+树相比于B树的查询优势】；
			* 哈希索引的局限性：对数据离散性比较大的数据可以使用哈希索引【Mysql基本不使用，个别引擎使用】，哈希索引对等值查询效果很明显，如果进行范围查询，进行排序
			  将不会起作用。
			  
			
		3、哪些情况下可以使索引失效？
			使用关键字：or	(要想使用or，又想让索引生效，只能将or条件中的每个列都加上索引)
			使用关键字：like（并且是%开头，如果不是，索引是可以使用的）、
			使用关键字：not  null、not in等。（is null是可以使用索引的、not exist也是可以使用索引）
			数据类型出现隐式转化。如varchar不加单引号的话可能会自动转换为int型，使索引无效，产生全表扫描。
			
			
		4、查询的时候使用多索引？
			一般一个复杂的查询可能会使用到多个索引，如果一个简单的查询如果使用多个索引，查询优化器只会选择一个最优的索引进行查询。
			
			
		5、总结
			* 索引列的类型尽量小（int/bigint）
			* 利用字符串的前缀作为索引
			* 删除没有用的缩影
			* 尽量所用覆盖索引，减少回表操作。

			
			
	2)、join、left join、right join、
		join：使用join时mysql会使用查询优化器，对查询进行优化，所有一般情况下尽量把使用内连接。left join、right left都是默认使用左边作为驱动表、或者右表作为
			  驱动表。
		
		
		
		
	3)、in和exits的理解。
		* in可能构建中间表，或者
		* in里面如果使用了子查询，会有一个去重操作。
	    * in里面如果使用了子查询，并且查出的结果是主键，这个使用就可以直接使用and然后in里面的查询。
		
		* exists后面如果的语句，每次执行如果返回true，前面的语句就会执行，如果每次执行返回false，前面的语句就不执行。
	
	
	4)、存储过程。
	
	
	5)、explain
		type: