

###################################################################################################################
#################################        从Boobstrap的main方法中的start开始的   	###############################
###################################################################################################################
/**
 * 启动了的start方法。
 */ 
localName：Bootstrap
public void start() throws Exception {
	if(catalinaDaemon == null) {
		init();
	}

	Method method = catalinaDaemon.getClass().getMethod("start", (Class [] )null);
	method.invoke(catalinaDaemon, (Object [])null);

}

/**
 * 启动的过程。
 */ 
localName：Catalina
public void start() {

	if (getServer() == null) {
		load();
	}

	if (getServer() == null) {
		log.fatal("Cannot start server. Server instance is not configured.");
		return;
	}

	long t1 = System.nanoTime();

	try {
		getServer().start();
	} catch (LifecycleException e) {
		log.fatal(sm.getString("catalina.serverStartFail"), e);
		try {
			getServer().destroy();
		} catch (LifecycleException e1) {
			log.debug("destroy() failed for failed Server ", e1);
		}
		return;
	}

	long t2 = System.nanoTime();
	if(log.isInfoEnabled()) {
		log.info("Server startup in " + ((t2 - t1) / 1000000) + " ms");
	}

	if (useShutdownHook) {
		if (shutdownHook == null) {
			shutdownHook = new CatalinaShutdownHook();
		}
		
		Runtime.getRuntime().addShutdownHook(shutdownHook);

		LogManager logManager = LogManager.getLogManager();
		if (logManager instanceof ClassLoaderLogManager) {
			((ClassLoaderLogManager) logManager).setUseShutdownHook(false);
		}
	}

	if (await) {
		await();
		stop();
	}
}

/**
 * 所有tomcat的组件都继承LifecycleBase
 */
location：LifecycleBase
public final synchronized void start() throws LifecycleException {

	if (LifecycleState.STARTING_PREP.equals(state) || LifecycleState.STARTING.equals(state) || LifecycleState.STARTED.equals(state)) {

		if (log.isDebugEnabled()) {
			Exception e = new LifecycleException();
			log.debug(sm.getString("lifecycleBase.alreadyStarted", toString()), e);
		} else if (log.isInfoEnabled()) {
			log.info(sm.getString("lifecycleBase.alreadyStarted", toString()));
		}

		return;
	}

	if (state.equals(LifecycleState.NEW)) {
		init();
	} else if (state.equals(LifecycleState.FAILED)) {
		stop();
	} else if (!state.equals(LifecycleState.INITIALIZED) &&
			!state.equals(LifecycleState.STOPPED)) {
		invalidTransition(Lifecycle.BEFORE_START_EVENT);
	}

	try {
		// 切换状态。
		setStateInternal(LifecycleState.STARTING_PREP, null, false);
		startInternal();
		if (state.equals(LifecycleState.FAILED)) {
			stop();
		} else if (!state.equals(LifecycleState.STARTING)) {
			invalidTransition(Lifecycle.AFTER_START_EVENT);
		} else {
			setStateInternal(LifecycleState.STARTED, null, false);
		}
	} catch (Throwable t) {
		ExceptionUtils.handleThrowable(t);
		setStateInternal(LifecycleState.FAILED, null, false);
		throw new LifecycleException(sm.getString("lifecycleBase.startFail", toString()), t);
	}
}




##########################################################    Server启动    ##########################################
/**
 * StandardServer
 */
location：StandardServer
protected void startInternal() throws LifecycleException {
	// 执行监听器。
	fireLifecycleEvent(CONFIGURE_START_EVENT, null);
	
	// 设置状态。
	setState(LifecycleState.STARTING);

	// 启动globalNamingResources  【【这个一直报错，原因不明】】
	globalNamingResources.start();

	synchronized (servicesLock) {
		for (int i = 0; i < services.length; i++) {
			services[i].start();
		}
	}
}


##########################################################    Server\globalNamingResources启动    ##########################################
/**
 *
 */
location：NamingResourcesImpl
protected void initInternal() throws LifecycleException {
    super.initInternal();

	resourceRequireExplicitRegistration = true;

	for (ContextResource cr : resources.values()) {
		try {
			MBeanUtils.createMBean(cr);
		} catch (Exception e) {
			log.warn(sm.getString("namingResources.mbeanCreateFail", cr.getName()), e);
		}
	}

	for (ContextEnvironment ce : envs.values()) {
		try {
			MBeanUtils.createMBean(ce);
		} catch (Exception e) {
			log.warn(sm.getString("namingResources.mbeanCreateFail", ce.getName()), e);
		}
	}

	for (ContextResourceLink crl : resourceLinks.values()) {
		try {
			MBeanUtils.createMBean(crl);
		} catch (Exception e) {
			log.warn(sm.getString("namingResources.mbeanCreateFail", crl.getName()), e);
		}
	}
}

##########################################################    Server\Service启动    ##########################################
/**
 * StandardService中比较重要的几个成员变量：Server server；Connector connectors[]；Engine engine；ArrayList<Executor> executors；
 * 
 */
location：StandardService
protected void startInternal() throws LifecycleException {

	if(log.isInfoEnabled()) (
		log.info(sm.getString("standardService.start.name", this.name));
	)
	
	setState(LifecycleState.STARTING);

	// Engine的start。
	if (engine != null) {
		synchronized (engine) {
			engine.start();
		}
	}

	// Executor的start
	synchronized (executors) {
		for (Executor executor: executors) {
			executor.start();
		}
	}

	// mapperListener的start
	mapperListener.start();

	
	synchronized (connectorsLock) {
		for (Connector connector: connectors) {
			try {
				if (connector.getState() != LifecycleState.FAILED) {
					connector.start();
				}
			} catch (Exception e) {
				log.error(sm.getString("standardService.connector.startFailed", connector), e);
			}
		}
	}
}


##########################################################    Server\Service\engine启动    ##########################################
/**
 *
 */
location：StandardEngine
protected synchronized void startInternal() throws LifecycleException {

	if(log.isInfoEnabled()) {
		log.info( "Starting Servlet Engine: " + ServerInfo.getServerInfo());
	}

	super.startInternal();
}

/**
 *
 */
location：ContainerBase
protected synchronized void startInternal() throws LifecycleException {

	logger = null;
	getLogger();
	
	// 启动Cluster。
	Cluster cluster = getClusterInternal();
	if (cluster instanceof Lifecycle) {
		((Lifecycle) cluster).start();
	}
	
	// 启动Realm.
	Realm realm = getRealmInternal();
	if (realm instanceof Lifecycle) {
		((Lifecycle) realm).start();
	}

	// 获取其子容器。
	Container children[] = findChildren();
	
	List<Future<Void>> results = new ArrayList<>();
	
	// 把任务提交给线程池，并获取一个执行结果Future。
	for (int i = 0; i < children.length; i++) {
		
		// 线程池会调用StartChild的call方法，同时在StartChild的call方法中会调用children的start()方法。
		// 所以调用children的start()方法是一个异步过程。【【【这里是Host启动过程。】】】
		results.add(startStopExecutor.submit(new StartChild(children[i])));
	}

	MultiThrowable multiThrowable = null;

	for (Future<Void> result : results) {
		try {
			result.get();
		} catch (Throwable e) {
			log.error(sm.getString("containerBase.threadedStartFailed"), e);
			if (multiThrowable == null) {
				multiThrowable = new MultiThrowable();
			}
			multiThrowable.add(e);
		}

	}
	if (multiThrowable != null) {
		throw new LifecycleException(sm.getString("containerBase.threadedStartFailed"), multiThrowable.getThrowable());
	}

	if (pipeline instanceof Lifecycle) {
		((Lifecycle) pipeline).start();
	}


	setState(LifecycleState.STARTING);

	threadStart();
}


/**
 * 其是StandardEngin实例。
 */
location：ContainerBase
public Container[] findChildren() {

	// HashMap<String, Container> children = new HashMap<>();  这里是在StandardEngin实例下。其key为：defaultHost属性对应的值。
	// children：就是就是实例的子元素。
	synchronized (children) {
		Container results[] = new Container[children.size()];
		return children.values().toArray(results);
	}
}

/**
 * ContainerBase的一个内部类。
 */
location：ContainerBase
private static class StartChild implements Callable<Void> {

	private Container child;

	public StartChild(Container child) {
		this.child = child;
	}

	@Override
	public Void call() throws LifecycleException {
		child.start();
		return null;
	}
}

##########################################################    Server\Service\engine\cluster启动    ##########################################
/**
 *
 */
location：SimpleTcpCluster
protected void initInternal() throws LifecycleException {
	super.initInternal();
	if (clusterDeployer != null) {
		StringBuilder name = new StringBuilder("type=Cluster");
		Container container = getContainer();
		if (container != null) {
			name.append(container.getMBeanKeyProperties());
		}
		name.append(",component=Deployer");
		
		onameClusterDeployer = register(clusterDeployer, name.toString());
	}
}

##########################################################    Server\Service\engine\Realm 启动    ##########################################
/**
 * LockoutRealm extends CombinedRealm
 */
location：LockoutRealm
protected void startInternal() throws LifecycleException {
	// 就是创建一个LinkedHashMap。
	failedUsers = new LinkedHashMap<String, LockRecord>(cacheSize, 0.75f, true) {
		private static final long serialVersionUID = 1L;
		
		@Override
		protected boolean removeEldestEntry(Map.Entry<String, LockRecord> eldest) {
			if (size() > cacheSize) {
				long timeInCache = (System.currentTimeMillis() - eldest.getValue().getLastFailureTime())/1000;

				if (timeInCache < cacheRemovalWarningTime) {
					log.warn(sm.getString("lockOutRealm.removeWarning", eldest.getKey(), Long.valueOf(timeInCache)));
				}
				return true;
			}
			return false;
		}
	};

	super.startInternal();
}

/**
 * 
 */
location：LockoutRealm
protected void startInternal() throws LifecycleException {

	Iterator<Realm> iter = realms.iterator();

	while (iter.hasNext()) {
		Realm realm = iter.next();
		
		// 循环启动Realm下面的Realm
		if (realm instanceof Lifecycle) {
			try {
				((Lifecycle) realm).start();
			} catch (LifecycleException e) {
				iter.remove();
				log.error(sm.getString("combinedRealm.realmStartFail", realm.getClass().getName()), e);
			}
		}
	}
	super.startInternal();
}

/**
 * 
 */
location：RealmBase
protected void startInternal() throws LifecycleException {
	if (credentialHandler == null) {
		credentialHandler = new MessageDigestCredentialHandler();
	}

	setState(LifecycleState.STARTING);
}

##########################################################    Server\Service\mapperListener启动    ##########################################
/**
 *
 */
location：MapperListener
public void startInternal() throws LifecycleException {

	setState(LifecycleState.STARTING);

	Engine engine = service.getContainer();
	if (engine == null) {
		return;
	}

	findDefaultHost();

	addListeners(engine);

	Container[] conHosts = engine.findChildren();
	for (Container conHost : conHosts) {
		Host host = (Host) conHost;
		if (!LifecycleState.NEW.equals(host.getState())) {
			registerHost(host);
		}
	}
}


##########################################################    Server\Service\Connector启动    ##########################################
/**
 * Connector：自己的start。
 */
location：Connector
protected void startInternal() throws LifecycleException {

	if (getPort() < 0) {
		throw new LifecycleException(sm.getString("coyoteConnector.invalidPort", Integer.valueOf(getPort())));
	}

	setState(LifecycleState.STARTING);

	try {
		// protocolHandler默认为org.apache.coyote.http11.Http11NioProtocol的实例。
		protocolHandler.start();
	} catch (Exception e) {
		throw new LifecycleException(sm.getString("coyoteConnector.protocolHandlerStartFailed"), e);
	}

}

/**
 *
 */
location：AbstractProtocol
public void start() throws Exception {
	if (getLog().isInfoEnabled()) {
		getLog().info(sm.getString("abstractProtocolHandler.start", getName()));
	}

	// endpoint --> NioEndpoint
	endpoint.start();

	// 开始异步超时线程。
	asyncTimeout = new AsyncTimeout();
	Thread timeoutThread = new Thread(asyncTimeout, getNameInternal() + "-AsyncTimeout");
	
	int priority = endpoint.getThreadPriority();
	if (priority < Thread.MIN_PRIORITY || priority > Thread.MAX_PRIORITY) {
		priority = Thread.NORM_PRIORITY;
	}
	timeoutThread.setPriority(priority);
	timeoutThread.setDaemon(true);
	timeoutThread.start();
}

/**
 *
 */
location：AbstractEndPoint
public final void start() throws Exception {
	// 如果没有启动，进行启动操作。
	if (bindState == BindState.UNBOUND) {
		bind();
		bindState = BindState.BOUND_ON_START;
	}
	startInternal();
}


##########################################################    Server\Service\engine\Host启动    ##########################################

		Host是异步启动的。而且Host还没有初始化。

/**
 * 其是StandardHost实例。
 */
location：ContainerBase
protected void initInternal() throws LifecycleException {
	BlockingQueue<Runnable> startStopQueue = new LinkedBlockingQueue<>();
	
	// 创建localhost-startStop-* 线程。
	startStopExecutor = new ThreadPoolExecutor(
			getStartStopThreadsInternal(),
			getStartStopThreadsInternal(), 10, TimeUnit.SECONDS,
			startStopQueue,
			new StartStopThreadFactory(getName() + "-startStop-"));
			
	startStopExecutor.allowCoreThreadTimeOut(true);
	super.initInternal();
}


/**
 *
 */
location：StandardHost
protected synchronized void startInternal() throws LifecycleException {
	String errorValve = getErrorReportValveClass();
	
	if ((errorValve != null) && (!errorValve.equals(""))) {
		try {
			boolean found = false;
			Valve[] valves = getPipeline().getValves();
			for (Valve valve : valves) {
				if (errorValve.equals(valve.getClass().getName())) {
					found = true;
					break;
				}
			}
			if(!found) {
				Valve valve =
					(Valve) Class.forName(errorValve).getConstructor().newInstance();
				getPipeline().addValve(valve);
			}
		} catch (Throwable t) {
			ExceptionUtils.handleThrowable(t);
			log.error(sm.getString("standardHost.invalidErrorReportValveClass", errorValve), t);
		}
	}
	super.startInternal();
}

/**
 * 其是StandardHost实例。
 */
location：ContainerBase
protected synchronized void startInternal() throws LifecycleException {

	logger = null;
	getLogger();
	
	// 启动Cluster。
	Cluster cluster = getClusterInternal();
	if (cluster instanceof Lifecycle) {
		((Lifecycle) cluster).start();
	}
	
	// 启动Realm.
	Realm realm = getRealmInternal();
	if (realm instanceof Lifecycle) {
		((Lifecycle) realm).start();
	}

	// 获取其子容器。
	Container children[] = findChildren();
	
	List<Future<Void>> results = new ArrayList<>();
	
	// 把任务提交给线程池，并获取一个执行结果Future。
	for (int i = 0; i < children.length; i++) {
		
		// 线程池会调用StartChild的call方法，同时在StartChild的call方法中会调用children的start()方法。
		// 所以调用children的start()方法是一个异步过程。【【【这里是Host启动过程。】】】
		results.add(startStopExecutor.submit(new StartChild(children[i])));
	}

	MultiThrowable multiThrowable = null;

	for (Future<Void> result : results) {
		try {
			result.get();
		} catch (Throwable e) {
			log.error(sm.getString("containerBase.threadedStartFailed"), e);
			if (multiThrowable == null) {
				multiThrowable = new MultiThrowable();
			}
			multiThrowable.add(e);
		}

	}
	if (multiThrowable != null) {
		throw new LifecycleException(sm.getString("containerBase.threadedStartFailed"), multiThrowable.getThrowable());
	}

	// 这里是StandardPipeline
	if (pipeline instanceof Lifecycle) {
		((Lifecycle) pipeline).start();
	}


	/**
	 * 在StandardHost的startInternal的方法中，解压appBase下的文件。
	 * 开始基本完成以后，会触发LifecycleListener监听器的lifecycleEvent的方法，传入的状态为start。
	 * 
	 */
	【【【这个做了很多事情。】】】
	setState(LifecycleState.STARTING);

	threadStart();
}

/**
 * 其是StandardHost实例。
 */
location：LifecycleBase
private synchronized void setStateInternal(LifecycleState state, Object data, boolean check) throws LifecycleException {

	if (log.isDebugEnabled()) {
		log.debug(sm.getString("lifecycleBase.setState", this, state));
	}

	if (check) {
		
		if (state == null) {
			invalidTransition("null");
			return;
		}

		if (!(state == LifecycleState.FAILED || (this.state == LifecycleState.STARTING_PREP && state == LifecycleState.STARTING) ||
				(this.state == LifecycleState.STOPPING_PREP && state == LifecycleState.STOPPING) ||
				(this.state == LifecycleState.FAILED && state == LifecycleState.STOPPING))) {
				
			invalidTransition(state.name());
		}
	}

	this.state = state;
	String lifecycleEvent = state.getLifecycleEvent();
	if (lifecycleEvent != null) {
		fireLifecycleEvent(lifecycleEvent, data);
	}
}

/**
 * 其是StandardHost实例。
 */
location：LifecycleBase
protected void fireLifecycleEvent(String type, Object data) {
	// 这时type为start了。
	LifecycleEvent event = new LifecycleEvent(this, type, data);
	
	for (LifecycleListener listener : lifecycleListeners) {
		// 【【【一个很重要的监听器HostConfig】】】
		listener.lifecycleEvent(event);
	}
}

/**
 *
 */
location：HostConfig
public void lifecycleEvent(LifecycleEvent event) {

	try {
		host = (Host) event.getLifecycle();
		
		if (host instanceof StandardHost) {
			setCopyXML(((StandardHost) host).isCopyXML());
			setDeployXML(((StandardHost) host).isDeployXML());
			setUnpackWARs(((StandardHost) host).isUnpackWARs());
			setContextClass(((StandardHost) host).getContextClass());
		}
	} catch (ClassCastException e) {
		log.error(sm.getString("hostConfig.cce", event.getLifecycle()), e);
		return;
	}

	if (event.getType().equals(Lifecycle.PERIODIC_EVENT)) {
		check();
	} else if (event.getType().equals(Lifecycle.BEFORE_START_EVENT)) {
		beforeStart();
	} else if (event.getType().equals(Lifecycle.START_EVENT)) {
		start();
	} else if (event.getType().equals(Lifecycle.STOP_EVENT)) {
		stop();
	}
}

/**
 *
 */
location：HostConfig
public void start() {

	if (log.isDebugEnabled()) {
		log.debug(sm.getString("hostConfig.start"));
	}

	try {
		ObjectName hostON = host.getObjectName();
		oname = new ObjectName(hostON.getDomain() + ":type=Deployer,host=" + host.getName());
		Registry.getRegistry(null, null).registerComponent(this, oname, this.getClass().getName());
	} catch (Exception e) {
		log.error(sm.getString("hostConfig.jmx.register", oname), e);
	}

	if (!host.getAppBaseFile().isDirectory()) {
		log.error(sm.getString("hostConfig.appBase", host.getName(), host.getAppBaseFile().getPath()));
		host.setDeployOnStartup(false);
		host.setAutoDeploy(false);
	}

	if (host.getDeployOnStartup()) {
		deployApps();
	}
}

/**
 * 解压文件。
 */
location：HostConfig
protected void deployApps() {
	// Host中配置的appBase对应的值。
	File appBase = host.getAppBaseFile();
	
	// 配置的路径。
	File configBase = host.getConfigBaseFile();
	
	// 获取过滤过可忽略文件及文件夹的剩余文件及文件夹。
	String[] filteredAppPaths = filterAppPaths(appBase.list());
	
	// 解压configBase文件夹下的xml描述文件。
	deployDescriptors(configBase, configBase.list());
	
	// 解压war包。
	deployWARs(appBase, filteredAppPaths);
	
	// 
	deployDirectories(appBase, filteredAppPaths);

}


##########################################################################################################################################################
##########################################                 具体的解压过程  ==》  06_Tomcat源码解压war       ##############################################
##########################################################################################################################################################



##########################################################    Server\Service\engine\Host.StandardPipeline启动    ##########################################

	先初始化，虽然初始化啥都没有做。

/**
 *
 */
location：StandardPipeline
protected synchronized void startInternal() throws LifecycleException {
	Valve current = first;
	if (current == null) {
		current = basic;
	}
	while (current != null) {
		if (current instanceof Lifecycle) {
			((Lifecycle) current).start();
		}
		current = current.getNext();
	}

	setState(LifecycleState.STARTING);
}
