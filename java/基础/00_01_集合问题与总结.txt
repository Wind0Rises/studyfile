一、面试
	1)、讲一下集合的结构
		1、Collection下的List【ArrayList、LinkedList、Vector【stack】】简单讲讲各个之间的区别。
		2、Set【HashSet、TreeSet】简单介绍一下
		3、Queue【LinkedList、PriorityQueue、ArrayBlockingQueue、LinkedBlockingQueue】简单介绍一下
		4、Map下的集合类：HashMap、TreeMap、HashTable、ConcurrentHashMap
	

	
	
二、Conllection
	1)、ArrayList与LinkedList扩容的区别。
		ArrayList：底层使用数组实现的，数组实现的，就有一个问题，就是原有的数组装满的时候，这个时候就需要进行扩容。ArrayList的put()操作先判断是否需要扩容，然后添加元素。
			扩容的容量[oldCapacity + (oldCapacity >> 1)]，什么时候扩容：在达到最大容量，比如容量为10的，在第11个元素的添加的时候扩容。
		LinkedList：底层是使用链表实现的，所有其是不需要扩容的。注意LinkedList的get(int index)方法，判断index是在链表的前半部分，还是链表的后办部分，然后使用就近原则遍历。
		
		
	2)、ArrayList不安全在哪里？
		1、在高并发场景下，如果在遍历List的时候，有线程对List进行了操作，这个时候遍历List就会报错，报错：ConcurrentModificationException。这个错也可能在线程安全的Vector中发生。
		   可以使用Collections中的SynchronizedList集合，SynchronizedList集合可以所有方法都使用Synchronized关键字。
		2、在add方法中有一步复制过程。elementData[size++] = e;线程1和线程2同时向List中添加元素。线程1和线程2读取到的size都是5，这个时候线程1执行了size++操作，并完成赋值。线程2
		   也进行了size++操作，这个时候size也是5，也就是说覆盖了线程1的操作的值，但是实际情况size自增了两次。
	
	
	3)、HashSet和TreeSet的区别。
		HashSet：底层使用的HashMap，HashMap的key就是HashSet的值。可以为null。
		TreeSet：底层使用TreeMap实现的。可以在new TreeSet(...)指定Comparator实例。
	
	
	4)、CopyOnWriteArrayList
		1、内部使用数组和ReentrantLock实现的。
		2、在add(..)方法中使用了Reentrant，把类中的数组赋值给一个新数组，新数组比原数组大一【Arrays.copyOf(elements, len + 1)】也没有扩容，每一次add操作，内部数组就被扩大1个长度，
		   然后把添加的值放到新数组最后，返回把新数组赋值给内部数组，这个操作都在Lock内。
		3、增add(..)、删remove(..)、改set(..)都会上锁。

	
	5)、CopyOnWriteArraySet
		1、内部使用的就是CopyOnWriteArrayList。
		2、判断给定的元素在其内部的CopyOnWriteArrayList是否存在，如果不存在，添加锁进行添加操作。
	
	
	
三、Map
	1)、简单介绍一下HashMap
		1、key-value参数
		2、数据结构，以及时间复杂度。
		3、怎么解决hash冲突的。
		4、
	

	2)、HashMap线程不安全在哪里？
		1、HashMap在put操作的时候，有一步先判断对应的数组的位置是否为空，然后直接把值赋值给数据，如果线程A判断了，数组对应的位置为空，然后进入if但是还没有赋值；这是线程B也来判断，线程B
		   判断了，数组对应的位置为空，然后也进入if，这是线程B覆盖线程A的操作。
		2、JDK1.7以及以前，头插法的弊端。
	

	3)、ConcurrentHashMap如何保证线程安全的。




	
		
		