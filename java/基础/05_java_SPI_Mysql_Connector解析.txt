

二、实例
	1、老的获取Connection。
		Class.forName("com.mysql.cj.jdbc.Driver");
		connection = DriverManager.getConnection(URL, USER, PASSWORD);
			
	2、新的获取Connection。
		connection = DriverManager.getConnection(URL, USER, PASSWORD);

三、源码

###################################################################################################
#									以JDK1.6为例解析老的模式									  #
###################################################################################################
#################################
#		老的获取Connection		#
#################################
/**
 * java.sql.DriverManager：这个是由BootstrapClassLoadler加载的。默认就会加载。
 * 
 * 
 */
location：com.mysql.cj.jdbc.Driver
public class Driver extends NonRegisteringDriver implements java.sql.Driver {

	static {
		try {
			/**
			 * 这个new Driver()：是com.mysql.cj.jdbc.Driver
			 *
			 * 调用DriverManager的registerDrive()方法。
			 */
			java.sql.DriverManager.registerDriver(new Driver());
		} catch (SQLException E) {
			throw new RuntimeException("Can't register driver!");
		}
	}
}
	
/**
 * 
 */
location：DriverManager
public static synchronized void registerDriver(java.sql.Driver driver) throws SQLException {
	if (!initialized) {
	    initialize();
	}
      
	DriverInfo di = new DriverInfo();

	di.driver = driver;
	di.driverClass = driver.getClass();
	di.driverClassName = di.driverClass.getName();

	writeDrivers.addElement(di); 
	println("registerDriver: " + di);
	
	readDrivers = (java.util.Vector) writeDrivers.clone();

}

/**
 * 
 */
location：DriverManager
static void initialize() {
	if (initialized) {
		return;
	}
	initialized = true;
	loadInitialDrivers();
	println("JDBC DriverManager initialized");
}

/**
 * 
 */
location：DriverManager
private static void loadInitialDrivers() {
	String drivers;

	try {
		drivers = (String) java.security.AccessController.doPrivileged(
		new sun.security.action.GetPropertyAction("jdbc.drivers"));
	} catch (Exception ex) {
		drivers = null;
	}

	DriverService ds = new DriverService();

	java.security.AccessController.doPrivileged(ds);		


	println("DriverManager.initialize: jdbc.drivers = " + drivers);

	if (drivers == null) {
		return;
	}
	
	while (drivers.length() != 0) {
		int x = drivers.indexOf(':');
		String driver;
		
		if (x < 0) {
			driver = drivers;
			drivers = "";
		} else {
			driver = drivers.substring(0, x);
			drivers = drivers.substring(x+1);
		}
		
		if (driver.length() == 0) {
			continue;
		}
		
		try {
			println("DriverManager.Initialize: loading " + driver);
			Class.forName(driver, true,
			ClassLoader.getSystemClassLoader());
		} catch (Exception ex) {
			println("DriverManager.Initialize: load failed: " + ex);
		}
	}
}



#################################
#		JDK6的DriverManager		#
#################################
/**
 * DriverManager：没有静态代码块。
 */
location：DriverManager
public static Connection getConnection(String url, String user, String password) throws SQLException {
        
	java.util.Properties info = new java.util.Properties();

	/**
	 * 这个获取的是哪个类加载器。
	 */
	ClassLoader callerCL = DriverManager.getCallerClassLoader();

	if (user != null) {
	    info.put("user", user);
	}

	if (password != null) {
	    info.put("password", password);
	}

	return (getConnection(url, info, callerCL));
}

/**
 * 
 */
location：DriverManager
private static Connection getConnection(String url, java.util.Properties info, ClassLoader callerCL) throws SQLException {
	java.util.Vector drivers = null;
	
	synchronized(DriverManager.class) {
		if(callerCL == null) {
			callerCL = Thread.currentThread().getContextClassLoader();
		}    
	} 

	if(url == null) {
		throw new SQLException("The url cannot be null", "08001");
	}

	println("DriverManager.getConnection(\"" + url + "\")");

	if (!initialized) {
		initialize();
	}

	
	synchronized (DriverManager.class){ 
		drivers = readDrivers;  
	}

	SQLException reason = null;
	
	/**
	 * 遍历注册到DriverManager中的Driver。
	 */
	for (int i = 0; i < drivers.size(); i++) {
		
		DriverInfo di = (DriverInfo)drivers.elementAt(i);

		if ( getCallerClass(callerCL, di.driverClassName ) != di.driverClass ) {
			println("    skipping: " + di);
			continue;
		}
		
		try {
			println("    trying " + di);
			
			/**
			 * 通过Driver获取连接并返回。 
			 */
			Connection result = di.driver.connect(url, info);
			if (result != null) {
				println("getConnection returning " + di);
				return (result);
			}
			
			
		} catch (SQLException ex) {
			if (reason == null) {
				reason = ex;
			}
		}
	}

	if (reason != null)    {
		println("getConnection failed: " + reason);
		throw reason;
	}

	println("getConnection: no suitable driver found for " + url);
	
	throw new SQLException("No suitable driver found for " + url, "08001");
}









###################################################################################################
#									以JDK1.8为例解析新的模式									  #
###################################################################################################
#################################
#		新的获取Connection		#
#################################

/**
 * DriverManager的静态构造函数。
 */
location：DriverManager
static {
	loadInitialDrivers();
	println("JDBC DriverManager initialized");
}

/**
 * 加载初始化驱动。
 */
location：DriverManager
private static void loadInitialDrivers() {
	String drivers;
	try {
		/**
		 * 从系统产参数获取jdbc.drivers
		 */
		drivers = AccessController.doPrivileged(new PrivilegedAction<String>() {
			public String run() {
				return System.getProperty("jdbc.drivers");
			}
		});
	} catch (Exception ex) {
		drivers = null;
	}
	
	AccessController.doPrivileged(new PrivilegedAction<Void>() {
		public Void run() {

			ServiceLoader<Driver> loadedDrivers = ServiceLoader.load(Driver.class);
			
			Iterator<Driver> driversIterator = loadedDrivers.iterator();
			try{
				while(driversIterator.hasNext()) {
					driversIterator.next();
				}
			} catch(Throwable t) {
				// 
			}
			return null;
		}
	});

	println("DriverManager.initialize: jdbc.drivers = " + drivers);

	if (drivers == null || drivers.equals("")) {
		return;
	}
	
	String[] driversList = drivers.split(":");
	println("number of Drivers:" + driversList.length);
	
	for (String aDriver : driversList) {
		try {
			println("DriverManager.Initialize: loading " + aDriver);
			/**
			 * 加载驱动。
			 */
			Class.forName(aDriver, true, ClassLoader.getSystemClassLoader());
		} catch (Exception ex) {
			println("DriverManager.Initialize: load failed: " + ex);
		}
	}
}


/**
 *
 */
location：ServiceLoader
public static <S> ServiceLoader<S> load(Class<S> service) {
	/**
	 * 获取当前线程。
	 */
    ClassLoader cl = Thread.currentThread().getContextClassLoader();
	return ServiceLoader.load(service, cl);
}


/**
 *
 */
location：ServiceLoader
public static <S> ServiceLoader<S> load(Class<S> service, ClassLoader loader) {
	return new ServiceLoader<>(service, loader);
}


/**
 *
 */
location：ServiceLoader
private ServiceLoader(Class<S> svc, ClassLoader cl) {
	service = Objects.requireNonNull(svc, "Service interface cannot be null");
	loader = (cl == null) ? ClassLoader.getSystemClassLoader() : cl;
	acc = (System.getSecurityManager() != null) ? AccessController.getContext() : null;
	reload();
}

/**
 *
 */
location：ServiceLoader
public void reload() {
	providers.clear();
	lookupIterator = new LazyIterator(service, loader);
}



/**
 * lookupIterator = new LazyIterator(service, loader);
 * LazyIterator是ServiceLoader的内部类。
 */
location：ServiceLoader
public Iterator<S> iterator() {
	return new Iterator<S>() {

		Iterator<Map.Entry<String,S>> knownProviders = providers.entrySet().iterator();

		public boolean hasNext() {
			if (knownProviders.hasNext()) {
				return true;
			}
			return lookupIterator.hasNext();
		}

		public S next() {
			if (knownProviders.hasNext()) {
				return knownProviders.next().getValue();
			}
			
			return lookupIterator.next();
		}

		public void remove() {
			throw new UnsupportedOperationException();
		}

	};
}


/**
 *
 */
location：ServiceLoader.LazyIterator
public boolean hasNext() {
	if (acc == null) {
		return hasNextService();
	} else {
		PrivilegedAction<Boolean> action = new PrivilegedAction<Boolean>() {
			public Boolean run() { 
				return hasNextService(); 
			}
		};
		return AccessController.doPrivileged(action, acc);
	}
}


/**
 *
 */
location：ServiceLoader.LazyIterator
private boolean hasNextService() {

	if (nextName != null) {
		return true;
	}
	
	if (configs == null) {
		try {
			/**
			 * ##############################################################
			 * #			PREFIX = "META-INF/services/"					#
			 * ##############################################################
			 */
			String fullName = PREFIX + service.getName();
			
			if (loader == null) {
				// Enumeration<URL> configs
				configs = ClassLoader.getSystemResources(fullName);
			} else {
				configs = loader.getResources(fullName);
			}
			
		} catch (IOException x) {
			fail(service, "Error locating configuration files", x);
		}
	}
	
	while ((pending == null) || !pending.hasNext()) {
		if (!configs.hasMoreElements()) {
			return false;
		}
		pending = parse(service, configs.nextElement());
	}
	
	nextName = pending.next();
	return true;
}



/**
 *
 */
location：ServiceLoader.LazyIterator
public S next() {
	if (acc == null) {
		return nextService();
	} else {
		PrivilegedAction<S> action = new PrivilegedAction<S>() {
			public S run() { return nextService(); }
		};
		return AccessController.doPrivileged(action, acc);
	}
}



/**
 *
 */
location：ServiceLoader.LazyIterator
private S nextService() {
	if (!hasNextService()) {
		throw new NoSuchElementException();
	}
	
	String cn = nextName;
	nextName = null;
	Class<?> c = null;
	try {
		/**
		 * ######################################################
		 * #			最终还是通过Class.forName(..)			#
		 * ######################################################
		 */
		c = Class.forName(cn, false, loader);
		
	} catch (ClassNotFoundException x) {
		fail(service, "Provider " + cn + " not found");
	}
	
	
	if (!service.isAssignableFrom(c)) {
		fail(service, "Provider " + cn  + " not a subtype");
	}
	
	try {
		/**
		 * 强制把c.newInstance()转换为service的类型。
		 */
		S p = service.cast(c.newInstance());
		
		/**
		 * 放入缓存
		 */
		providers.put(cn, p);
		return p;
		
		
	} catch (Throwable x) {
		fail(service, "Provider " + cn + " could not be instantiated", x);
	}
	
	throw new Error();
}

