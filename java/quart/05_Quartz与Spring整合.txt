1、spring如何与quartz结合的。
	SchedulerFactoryBean用于创建Scheduler实例对象的。
	SchedulerFactoryBean通过实现InitializingBean接口，在afterPropertiesSet方法中创建SchedulerFactory、并对SchedulerFactory进行初始化操作，这样就把
SchedulerFactory创建、初始化交给spring了。
	SchedulerFactoryBean通过实现SmartLifecycle接口，在start()方法中启动Scheduler，把定时任务的启动也交给Spring了。


	
	
	


	
####################################################################################################################################
##############################################     afterPropertiesSet      #########################################################
####################################################################################################################################
/**
 * 通过实现InitializingBean接口，在afterPropertiesSet方法中创建SchedulerFactory、并对SchedulerFactory进行初始化操作，这样就
 * 把SchedulerFactory创建、初始化交给spring了。
 */
location：SchedulerFactoryBean
public void afterPropertiesSet() throws Exception {

	// 设置SchedulerFactoryBean的数据源。
	if (this.dataSource == null && this.nonTransactionalDataSource != null) {
		this.dataSource = this.nonTransactionalDataSource;
	}

	// 设置加载资源。
	if (this.applicationContext != null && this.resourceLoader == null) {
		this.resourceLoader = this.applicationContext;
	}

	// 创建SchedulerFactory，默认为StdSchedulerFactory。
	SchedulerFactory schedulerFactory = BeanUtils.instantiateClass(this.schedulerFactoryClass);
	
	// 初始化SchedulerFactory
	initSchedulerFactory(schedulerFactory);

	// 设置SchedulerFactoryBean的ThreadLocal信息。
	if (this.resourceLoader != null) {
		configTimeResourceLoaderHolder.set(this.resourceLoader);
	}
	if (this.taskExecutor != null) {
		configTimeTaskExecutorHolder.set(this.taskExecutor);
	}
	if (this.dataSource != null) {
		configTimeDataSourceHolder.set(this.dataSource);
	}
	if (this.nonTransactionalDataSource != null) {
		configTimeNonTransactionalDataSourceHolder.set(this.nonTransactionalDataSource);
	}

	try {
		// 创建Scheduler
		this.scheduler = createScheduler(schedulerFactory, this.schedulerName);
		
		// 
		populateSchedulerContext();

		if (!this.jobFactorySet && !(this.scheduler instanceof RemoteScheduler)) {
			this.jobFactory = new AdaptableJobFactory();
		}
		
		if (this.jobFactory != null) {
			if (this.jobFactory instanceof SchedulerContextAware) {
				((SchedulerContextAware) this.jobFactory).setSchedulerContext(this.scheduler.getContext());
			}
			this.scheduler.setJobFactory(this.jobFactory);
		}
		
	} finally {
		if (this.resourceLoader != null) {
			configTimeResourceLoaderHolder.remove();
		}
		if (this.taskExecutor != null) {
			configTimeTaskExecutorHolder.remove();
		}
		if (this.dataSource != null) {
			configTimeDataSourceHolder.remove();
		}
		if (this.nonTransactionalDataSource != null) {
			configTimeNonTransactionalDataSourceHolder.remove();
		}
	}

	registerListeners();
	registerJobsAndTriggers();
}

/**
 * 初始化SchedulerFactory。
 */
location：SchedulerFactoryBean
private void initSchedulerFactory(SchedulerFactory schedulerFactory) throws SchedulerException, IOException {

	// 判断schedulerFactory是否是StdSchedulerFactory实例，默认创建的就是StdSchedulerFactory实例对象。
	if (!(schedulerFactory instanceof StdSchedulerFactory)) {
		if (this.configLocation != null || this.quartzProperties != null || this.taskExecutor != null || this.dataSource != null) {
			throw new IllegalArgumentException("StdSchedulerFactory required for applying Quartz properties: " + schedulerFactory);
		}
		return;
	}

	Properties mergedProps = new Properties();

	// PROP_SCHED_CLASS_LOAD_HELPER_CLASS = "org.quartz.scheduler.classLoadHelper.class"
	// 在配置中设置classLoadHelper。
	if (this.resourceLoader != null) {
		mergedProps.setProperty(StdSchedulerFactory.PROP_SCHED_CLASS_LOAD_HELPER_CLASS, ResourceLoaderClassLoadHelper.class.getName());
	}

	// PROP_THREAD_POOL_CLASS = "org.quartz.threadPool.class"
	// 在配置中设置线程池。
	if (this.taskExecutor != null) {
		mergedProps.setProperty(StdSchedulerFactory.PROP_THREAD_POOL_CLASS, LocalTaskExecutorThreadPool.class.getName());
	} else {
		mergedProps.setProperty(StdSchedulerFactory.PROP_THREAD_POOL_CLASS, SimpleThreadPool.class.getName());
		mergedProps.setProperty(PROP_THREAD_COUNT, Integer.toString(DEFAULT_THREAD_COUNT));
	}

	// 判断资源是否存在。
	if (this.configLocation != null) {
		if (logger.isInfoEnabled()) {
			logger.info("Loading Quartz config from [" + this.configLocation + "]");
		}
		PropertiesLoaderUtils.fillProperties(mergedProps, this.configLocation);
	}

	// 合并quartz配置文件
	CollectionUtils.mergePropertiesIntoMap(this.quartzProperties, mergedProps);

	// 设置JobStore。默认为LocalDataSourceJobStore
	if (this.dataSource != null) {
		mergedProps.put(StdSchedulerFactory.PROP_JOB_STORE_CLASS, LocalDataSourceJobStore.class.getName());
	}

	// 设置实例ID。
	if (this.schedulerName != null) {
		mergedProps.put(StdSchedulerFactory.PROP_SCHED_INSTANCE_NAME, this.schedulerName);
	}

	// 初始化SchedulerFactory。
	((StdSchedulerFactory) schedulerFactory).initialize(mergedProps);
}

/**
 * 初始化StdSchedulerFactory
 */
location：StdSchedulerFactory
public void initialize(Properties props) throws SchedulerException {
	if (propSrc == null) {
		propSrc = "an externally provided properties instance.";
	}

	this.cfg = new PropertiesParser(props);
}

/**
 * 创建Scheduler。
 */
location：SchedulerFactoryBean
protected Scheduler createScheduler(SchedulerFactory schedulerFactory, String schedulerName) throws SchedulerException {

	Thread currentThread = Thread.currentThread();
	ClassLoader threadContextClassLoader = currentThread.getContextClassLoader();
	boolean overrideClassLoader = (this.resourceLoader != null && !this.resourceLoader.getClassLoader().equals(threadContextClassLoader));
	
	if (overrideClassLoader) {
		currentThread.setContextClassLoader(this.resourceLoader.getClassLoader());
	}
	
	try {
		// 获取SchedulerRepository实例。
		SchedulerRepository repository = SchedulerRepository.getInstance();
		
		synchronized (repository) {
			Scheduler existingScheduler = (schedulerName != null ? repository.lookup(schedulerName) : null);
			
			#######################################################################
			###################          创建Scheduler     ########################
			#######################################################################
			// 这里就走的传统模式了。使用StdSchedulerFactory创建Scheduler。
			Scheduler newScheduler = schedulerFactory.getScheduler();
			
			if (newScheduler == existingScheduler) {
				throw new IllegalStateException("Active Scheduler of name '" + schedulerName + "' already registered " + "in Quartz SchedulerRepository. Cannot create a new Spring-managed Scheduler of the same name!");
			}
			
			if (!this.exposeSchedulerInRepository) {
				SchedulerRepository.getInstance().remove(newScheduler.getSchedulerName());
			}
			
			return newScheduler;
		}
	} finally {
		if (overrideClassLoader) {
			currentThread.setContextClassLoader(threadContextClassLoader);
		}
	}
}


####################################################################################################################################
#####################################################     生命周期处理  ############################################################
####################################################################################################################################

/**
 * 通过实现SmartLifecycle接口，在start()方法中启动Scheduler，把定时任务的启动也交给Spring了。
 */
location：SchedulerFactoryBean
public void start() throws SchedulingException {
	if (this.scheduler != null) {
		try {
			startScheduler(this.scheduler, this.startupDelay);
		}
		catch (SchedulerException ex) {
			throw new SchedulingException("Could not start Quartz Scheduler", ex);
		}
	}
}

/**
 * 启动
 */
location：SchedulerFactoryBean
protected void startScheduler(final Scheduler scheduler, final int startupDelay) throws SchedulerException {

	// 判断是否要延迟加载。如果不延迟，就直接启动。
	if (startupDelay <= 0) {
		logger.info("Starting Quartz Scheduler now");
		scheduler.start();
	} else {
		if (logger.isInfoEnabled()) {
			logger.info("Will start Quartz Scheduler [" + scheduler.getSchedulerName() + "] in " + startupDelay + " seconds");
		}
		
		Thread schedulerThread = new Thread() {
			@Override
			public void run() {
				try {
					Thread.sleep(startupDelay * 1000);
				} catch (InterruptedException ex) {
				
				}
				
				if (logger.isInfoEnabled()) {
					logger.info("Starting Quartz Scheduler now, after delay of " + startupDelay + " seconds");
				}
				
				try {
					scheduler.start();
				} catch (SchedulerException ex) {
					throw new SchedulingException("Could not start Quartz Scheduler after delay", ex);
				}
			}
		};
		
		schedulerThread.setName("Quartz Scheduler [" + scheduler.getSchedulerName() + "]");
		schedulerThread.setDaemon(true);
		schedulerThread.start();
	}
}