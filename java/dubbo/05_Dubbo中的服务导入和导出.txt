dubbo的版本：2.7.5


OneTimeExecutionApplicationContextEventListener


DubboBootstrapApplicationListener


一、服务的导出。
#########################################################
#         			Dubbo、Spring的入口					#
#########################################################
/**
 * Dubbo设置监听器。
 */
location：DubboBootstrapApplicationListener
public void onApplicationContextEvent(ApplicationContextEvent event) {
	if (event instanceof ContextRefreshedEvent) {
		onContextRefreshedEvent((ContextRefreshedEvent) event);
	} else if (event instanceof ContextClosedEvent) {
		onContextClosedEvent((ContextClosedEvent) event);
	}
}


/**
 * 启动DubboBoostrap这个类。
 */
location：DubboBootstrapApplicationListener
private void onContextRefreshedEvent(ContextRefreshedEvent event) {
	dubboBootstrap.start();
}




/**
 * 
 */
location：DubboBootstrap
public DubboBootstrap start() {
	if (started.compareAndSet(false, true)) {
		// ##################################################
		// #          	 		 初始化操作					#
		// ##################################################
		initialize();
		if (logger.isInfoEnabled()) {
			logger.info(NAME + " is starting...");
		}
		
		// ##################################################
		// #          	  Dubbo 服务导出操作				#
		// ##################################################
		exportServices();

		// Not only provider register
		if (!isOnlyRegisterProvider() || hasExportedServices()) {
			// 2. export MetadataService
			exportMetadataService();
			//3. Register the local ServiceInstance if required
			registerServiceInstance();
		}

		referServices();

		if (logger.isInfoEnabled()) {
			logger.info(NAME + " has started.");
		}
	}
	return this;
}

#########################################################
#         				Dubbo初始化过程					#
#########################################################
/**
 * 初始化总体流程。
 */
location：DubboBootstrap
private void initialize() {
	// 01、是否已经初始化了。
	if (!initialized.compareAndSet(false, true)) {
		return;
	}

	// 02、
	ApplicationModel.iniFrameworkExts();

	startConfigCenter();

	useRegistryAsConfigCenterIfNecessary();

	startMetadataReport();

	loadRemoteConfigs();

	checkGlobalConfigs();

	initMetadataService();

	initMetadataServiceExporter();

	initEventListener();

	if (logger.isInfoEnabled()) {
		logger.info(NAME + " has been initialized!");
	}
}


/**
 * initialize-02、拓展初始化
 * 
 * FrameworkExt三个实现类：ConfigManager、Environment、ServiceRepository。
 * 
 */
location：ApplicationModel
public static void iniFrameworkExts() {
	Set<FrameworkExt> exts = ExtensionLoader.getExtensionLoader(FrameworkExt.class).getSupportedExtensionInstances();
	for (FrameworkExt ext : exts) {
		ext.initialize();
	}
}

/**
 * initialize-03、配置中心初始化。
 * 
 */
location：DubboBootstrap
private void startConfigCenter() {

	Collection<ConfigCenterConfig> configCenters = configManager.getConfigCenters();

	if (CollectionUtils.isNotEmpty(configCenters)) {
		CompositeDynamicConfiguration compositeDynamicConfiguration = new CompositeDynamicConfiguration();
		for (ConfigCenterConfig configCenter : configCenters) {
			configCenter.refresh();
			ConfigValidationUtils.validateConfigCenterConfig(configCenter);
			compositeDynamicConfiguration.addConfiguration(prepareEnvironment(configCenter));
		}
		environment.setDynamicConfiguration(compositeDynamicConfiguration);
	}
	configManager.refreshAll();
}

/**
 * 
 * 
 */
location：ConfigManager
public Collection<ConfigCenterConfig> getConfigCenters() {
	return getConfigs(getTagName(ConfigCenterConfig.class));
}


/**
 * 
 * 
 */
location：AbstractConfig
public static String getTagName(Class<?> cls) {
	String tag = cls.getSimpleName();
	for (String suffix : SUFFIXES) {
		if (tag.endsWith(suffix)) {
			tag = tag.substring(0, tag.length() - suffix.length());
			break;
		}
	}
	return StringUtils.camelToSplitName(tag, "-");
}

/**
 * 
 * 
 */
location：ConfigManager
protected <C extends AbstractConfig> Collection<C> getConfigs(String configType) {
	return (Collection<C>) read(() -> getConfigsMap(configType).values());
}

/**
 * 
 * 
 */
location：ConfigManager
private <V> V read(Callable<V> callable) {
	Lock readLock = lock.readLock();
	V value = null;
	try {
		readLock.lock();
		value = callable.call();
	} catch (Throwable e) {
		throw new RuntimeException(e);
	} finally {
		readLock.unlock();
	}
	return value;
}

/**
 * 
 * 
 */
location：ConfigManager
public void refreshAll() {
	write(() -> {
		getApplication().ifPresent(ApplicationConfig::refresh);
		getMonitor().ifPresent(MonitorConfig::refresh);
		getModule().ifPresent(ModuleConfig::refresh);

		getProtocols().forEach(ProtocolConfig::refresh);
		getRegistries().forEach(RegistryConfig::refresh);
		getProviders().forEach(ProviderConfig::refresh);
		getConsumers().forEach(ConsumerConfig::refresh);
	});
}


#########################################################
#         			Dubbo服务导出过程					#
#########################################################
/**
 * 获取所有的服务，并进行导出服务。
 */
location：DubboBootstrap
private void exportServices() {
	configManager.getServices().forEach(sc -> {
		// 01、为每个服务设置DubboBoostrap。
		ServiceConfig serviceConfig = (ServiceConfig) sc;
		serviceConfig.setBootstrap(this);

		// 通过与异步导出不同的处理。
		if (exportAsync) {
			ExecutorService executor = executorRepository.getServiceExporterExecutor();
			Future<?> future = executor.submit(() -> {
				sc.export();
			});
			asyncExportingFutures.add(future);
		} else {
			sc.export();
			exportedServices.add(sc);
		}
	});
}



#####################################################################
#						每个服务导出的具体的操作					#
#####################################################################
/**
 * 每个服务导出的具体操作。
 */
location：ServiceConfig
public synchronized void export() {
	// 判断是否可以导出
	if (!shouldExport()) {
		return;
	}

	// 如果没有DubboBootstrap，获取并创建一个DubboBootstrap。
	if (bootstrap == null) {
		bootstrap = DubboBootstrap.getInstance();
		bootstrap.init();
	}

	checkAndUpdateSubConfigs();
	
	// 组织服务源数据。
	serviceMetadata.setVersion(version);
	serviceMetadata.setGroup(group);
	serviceMetadata.setDefaultGroup(group);
	serviceMetadata.setServiceType(getInterfaceClass());
	serviceMetadata.setServiceInterfaceName(getInterface());
	serviceMetadata.setTarget(getRef());

	if (shouldDelay()) {
		DELAY_EXPORT_EXECUTOR.schedule(this::doExport, getDelay(), TimeUnit.MILLISECONDS);
	} else {
		doExport();
	}
}

/**
 * 每个服务导出的具体操作。
 */
location：ServiceConfig
private void checkAndUpdateSubConfigs() {
	// 
	completeCompoundConfigs();
	
	// 设置provider。
	checkDefault();
	
	// 检查设置protocol。
	checkProtocol();
	
	// 检查设置register
	if (!isOnlyInJvm()) {
		checkRegistry();
	}
	
	this.refresh();

	if (StringUtils.isEmpty(interfaceName)) {
		throw new IllegalStateException("<dubbo:service interface=\"\" /> interface not allow null!");
	}

	if (ref instanceof GenericService) {
		interfaceClass = GenericService.class;
		if (StringUtils.isEmpty(generic)) {
			generic = Boolean.TRUE.toString();
		}
	} else {
		try {
			interfaceClass = Class.forName(interfaceName, true, Thread.currentThread()
					.getContextClassLoader());
		} catch (ClassNotFoundException e) {
			throw new IllegalStateException(e.getMessage(), e);
		}
		checkInterfaceAndMethods(interfaceClass, getMethods());
		checkRef();
		generic = Boolean.FALSE.toString();
	}
	if (local != null) {
		if ("true".equals(local)) {
			local = interfaceName + "Local";
		}
		Class<?> localClass;
		try {
			localClass = ClassUtils.forNameWithThreadContextClassLoader(local);
		} catch (ClassNotFoundException e) {
			throw new IllegalStateException(e.getMessage(), e);
		}
		if (!interfaceClass.isAssignableFrom(localClass)) {
			throw new IllegalStateException("The local implementation class " + localClass.getName() + " not implement interface " + interfaceName);
		}
	}
	if (stub != null) {
		if ("true".equals(stub)) {
			stub = interfaceName + "Stub";
		}
		Class<?> stubClass;
		try {
			stubClass = ClassUtils.forNameWithThreadContextClassLoader(stub);
		} catch (ClassNotFoundException e) {
			throw new IllegalStateException(e.getMessage(), e);
		}
		if (!interfaceClass.isAssignableFrom(stubClass)) {
			throw new IllegalStateException("The stub implementation class " + stubClass.getName() + " not implement interface " + interfaceName);
		}
	}
	checkStubAndLocal(interfaceClass);
	ConfigValidationUtils.checkMock(interfaceClass, this);
	ConfigValidationUtils.validateServiceConfig(this);
	appendParameters();
}

/**
 * 每个服务导出的具体操作。
 */
location：ServiceConfig
public void refresh() {
	Environment env = ApplicationModel.getEnvironment();
	try {
		CompositeConfiguration compositeConfiguration = env.getConfiguration(getPrefix(), getId());
		Configuration config = new ConfigConfigurationAdapter(this);
		if (env.isConfigCenterFirst()) {
			// The sequence would be: SystemConfiguration -> AppExternalConfiguration -> ExternalConfiguration -> AbstractConfig -> PropertiesConfiguration
			compositeConfiguration.addConfiguration(4, config);
		} else {
			// The sequence would be: SystemConfiguration -> AbstractConfig -> AppExternalConfiguration -> ExternalConfiguration -> PropertiesConfiguration
			compositeConfiguration.addConfiguration(2, config);
		}

		Method[] methods = getClass().getMethods();
		for (Method method : methods) {
			if (MethodUtils.isSetter(method)) {
				try {
					String value = StringUtils.trim(compositeConfiguration.getString(extractPropertyName(getClass(), method)));
					if (StringUtils.isNotEmpty(value) && ClassUtils.isTypeMatch(method.getParameterTypes()[0], value)) {
						method.invoke(this, ClassUtils.convertPrimitive(method.getParameterTypes()[0], value));
					}
				} catch (NoSuchMethodException e) {
					logger.info("Failed to override the property " + method.getName() + " in " + this.getClass().getSimpleName() + ", please make sure every property has getter/setter method provided.");
				}
			} else if (isParametersSetter(method)) {
				String value = StringUtils.trim(compositeConfiguration.getString(extractPropertyName(getClass(), method)));
				if (StringUtils.isNotEmpty(value)) {
					Map<String, String> map = invokeGetParameters(getClass(), this);
					map = map == null ? new HashMap<>() : map;
					map.putAll(convert(StringUtils.parseParameters(value), ""));
					invokeSetParameters(getClass(), this, map);
				}
			}
		}
	} catch (Exception e) {
		logger.error("Failed to override ", e);
	}
}