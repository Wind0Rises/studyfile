1、介绍一下zookeeper。
	它是一个分布式、开源的分布式应用程序协调服务。是Apache Hadoop的一个子项目，它主要是用来解决分布式应用中经常遇到的一些数据管理问题，如：统一命名服务、状态同步服务、
	集群管理、分布式应用配置项的管理等。
	

2、首先要搞懂分布式系统会存在哪些问题？


3、paxos算法原理。
	从二阶段提交到三阶段提交再到paxos算法。
	
	* 当集群中，超过半数的Acceptor接受了一个议案，那我们就可以说这个议案被选定了（Chosen）。
	* 一个Acceptor必须接受它收到的第一个议案。
	
	p1：一个Acceptor必须接受它收到的第一个议案。
	p2：如果编号为M0、value值为V0的提案（即为[M0、V0]）被选定了，那么所有比编号M0更高的，且被选定的提案，其Value值必须也是V0.
	p2a：如果编号为M0、value值为V0的提案（即为[M0、V0]）被选定了，那么所有比编号M0更高的，且被Acceptor选定的提案，其Value值也是V0。
	p2b：如果一个提案[M0、V0]被选定以后，那么之后任何proposer产生的更高编号的提案，其Value都为V0。
	
	paxos算法中proposer如何生成提案，accepter如何批准提案。
		生成提案：Proposer在产生一个编号Mn的提案时，必须要知道当前某一个将要或已经被半数以上Acceptor
			      批准的编号小于Mn但是为最大的编号的提案。并且，Proposer会要求所有的Acceptor都不要在批准
				  任何编号小于Mn的提案。
	
	
4、paxos算法：
	第一阶段：
		* proposer选择一个提案编号Mn,然后向Acceptor的某个超过半数的子集成员发送编号为Mn的Prepare请求。
		* 如果一个Acceptor收到一个编号Mn的Prepare请求，且编号Mn大于该Acceptor已经响应的所有Prepare请求编号
		  那么它就会将它已经批准过的最大编号的提案作为响应反馈给proposer,同时该Acceptor会承诺不会再批准任何
		  编号小于Mn的提案。
		  
	第二阶段:
		* 如果Proposer收到来自半数以上的Acceptor对其发出的编号为Mn的Prepare请求的响应，那么它就会发送一个针对
		  [Mn, Vn]提案的Accept请求给Acceptor。注意，Vn的值就是接收的响应中编号最大的提案的值，如果响应中不包含任何
		  提案，那么它就是任意值。
		  
		* 如果Acceptor收到这个针对[Mn, Vn]提案的Accept请求，只要改Acceptor尚未对编号大于Mn的Prepare请求做出响应，
		它就可以通过这个提案。
	
	
	
崩溃恢复和消息广播
	zkClient、Curator
	
	
5、使用zookeeper实现分布式锁。  https://www.cnblogs.com/tong-yuan/p/11619006.html
	* 获取锁
		首先创建一个持久化节点persistNode，用于表示某一个锁，如果有一个线程需要获取锁，需要在持久化节点persistNode下创建一个临时顺序节点。如果持久化节点下没有
		任何节点，该线程创建的节点为第一个节点，直接获取锁。如果又有其他线程过来获取锁，则继续创建锁，并在前一个临时节点上添加Watch。这样组成了一个等待队列。当
		第一个线程结束以后，会删除第一个临时节点，由于第二节点监听第一个节点，当第一节点被删除后，第二节点会立即接收到通知，如此线程二就可以获取锁。
		
	* 命令：
		create /persistNode dataMessage
			线程一： create -s -e /persistNode/thread1 thread1Message;
			线程二： create -s -e /persistNode/thread2 thread2Message;
	
6、比较redis和zookeeper实现分布式锁的优缺点。