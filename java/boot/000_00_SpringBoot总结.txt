
一、Spring Boot自动配置的原理
	
	1)、SpringBootApplication的源码
	
		@Target(ElementType.TYPE)
		@Retention(RetentionPolicy.RUNTIME)
		@Documented
		@Inherited
		@SpringBootConfiguration
		@EnableAutoConfiguration
		@ComponentScan(excludeFilters = { @Filter(type = FilterType.CUSTOM, classes = TypeExcludeFilter.class), @Filter(type = FilterType.CUSTOM, classes = AutoConfigurationExcludeFilter.class) })
		@ConfigurationPropertiesScan
		public @interface SpringBootApplication {

			@AliasFor(annotation = EnableAutoConfiguration.class)
			Class<?>[] exclude() default {};

			@AliasFor(annotation = EnableAutoConfiguration.class)
			String[] excludeName() default {};

			@AliasFor(annotation = ComponentScan.class, attribute = "basePackages")
			String[] scanBasePackages() default {};

			@AliasFor(annotation = ComponentScan.class, attribute = "basePackageClasses")
			Class<?>[] scanBasePackageClasses() default {};

			@AliasFor(annotation = Configuration.class)
			boolean proxyBeanMethods() default true;

		}


	2)、自动配置的流程
	
		1、在启动类使用@SpringBootApplication注解，@SpringBootApplication注解是一个符合注解，其包含@SpringBootConfiguration和@EnableAutoConfiguration等。
		2、@EnableAutoConfiguration注解也是一个派生注解，其中的关键功能由@Import提供，通过@Import导入AutoConfigurationImportSelector类，AutoConfigurationImportSelector的
		   selectImports()中可以通过SpringFactoriesLoader.loadFactoryNames()扫描所有具有META-INF/spring.factories的jar包。spring-boot-autoconfigure-x.x.x.x.jar里就有一个这样
		   的spring.factories文件。
		3、在spring-boot-autoconfigure-x.x.x.x.jar里面的有一个spring.factories文件中配置各种的EnableAutoConfiguration对应的类。
		4、spring会把spring.factories文件中的配置的类加载到spring容器中，但是这些EnableAutoConfigurac本上都是会使用@ConditionalOn*注解，当没有引入对应的包的
		   时候是无法把对应的类加载到spring容器。EnableAutoConfiguration对应的类都是各个组件的配置类。【可以用redis、rabbit进行观察。】
		5、这些不同组件的配置类会把其对应的配置导入到spring容器中。这些配置类通常会接口@ConditionalOn*，如果没有导入对应组件的jar包，就不会导入对应的配置。
	
	
二、Spring Boot自动配置之ImportSelector	
	ImportSelector的处理过程：ConfigurationClassPostProcessor
	