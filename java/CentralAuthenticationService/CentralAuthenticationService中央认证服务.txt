好的博客：https://blog.csdn.net/joeljx/category_7438264.html


1、SSO与Central Authentication Service（CAS）
	SSO 仅仅是一种架构，一种设计，而CAS则是实现SSO的一种手段。两者是抽象与具体的关系。当然，除了CAS之外，实现SSO还有其他手段，比如简单的cookie。
	
2、SSO的演化流程。
	模型一：同域SSO
		* 此时，两个产品都是在一个域名下，单点登录是很自然的选择。
		* 用户访问产品 a，向后台服务器发送登录请求。
		* 登录认证成功，服务器把用户的登录信息写入session。
		* 服务器为该用户生成一个cookie，并加入到response header 中，随着请求返回而写入浏览器。该 cookie 的域设定为 http://dxy.cn。
		* 下一次，当用户访问同域名的产品b时，由于a和 b在同一域名下，也是 http://dxy.cn，浏览器会自动带上之前的cookie。此时后台服务器就可以通过该cookie
		来验证登录状态了。
		* 实际上，这种场景就是最简单最传统的登录操作。虽然我们把产品a和b人为分开了，但由于它们在同域上，就算看成是同一产品的不同类目也未尝不可。我们没
		有设置独立的SSO服务器，因为业务后台服务器本身就足以承担SSO的职能。
		
		
	模型二：同父域SSO
		比如两个产品的地址分别为 http://a.dxy.cn和http://b.dxy.cn，那么cookie的域设置为 http://dxy.cn即可。在访问a和b时，这个cookie都能发送到服务器，本
		质上和同域SSO没有区别。
		
	模型三：跨域SSO
		当两个产品不同域时，cookie无法共享，所以我们必须设置独立的SSO服务器了。这个时候，我们就是通过标准的CAS方案来实现SSO的。下面我们就来详细介绍一下：
		* 术语：
			Client：用户。
			Server：中心服务器，也是SSO中负责单点登录的服务器。
			Service：需要使用单点登录的各个服务，相当于上文中的产品a/b。
		
		* 接口：
			/login：登录接口，用于登录到中心服务器。
			/logout：登出接口，用于从中心服务器登出。
			/validate：用于验证用户是否登录中心服务器。
			/serviceValidate：用于让各个 service 验证用户是否登录中心服务器。

		* 票据
			TGT：Ticket Grangting Ticket，TGT是CAS为用户签发的登录票据，【拥有了TGT，用户就可以证明自己在CAS成功登录过】。TGT封装了Cookie值以及此Cookie值对应
				的用户信息。当HTTP请求到来时，CAS以此Cookie值（TGC）为key查询缓存中有无TGT ，如果有的话，则相信用户已登录过。
			TGC：Ticket Granting Cookie，CAS Server生成TGT放入自己的Session中，而TGC就是这个Session的唯一标识（SessionId），以Cookie形式放到浏览器端，是 CAS 
				Server用来明确用户身份的凭证。
			ST：Service Ticket，ST是CAS为用户签发的访问某一service的票据。用户访问service时，service发现用户没有ST，则要求用户去CAS获取ST。用户向CAS发出获取ST
				的请求，CAS发现用户有TGT，则签发一个ST，返回给用户。用户拿着ST去访问service，service拿ST去CAS验证，验证通过后，允许用户访问资源。
			
				
		* Cookie：
			key            	value
		   CASTGC		    ${TGC}
		   
		* Session:
			key				value
			${TGC}			${TGT}
			${PGTIOU}		${PGT}
			
		* 票据关系：
			用户信息	签发	TGT
			TGT			签发	ST
			PGT			签发	PT
			
		* 注意，PGTIOU, PGT, PT是CAS 2.0中的内容
		
		* 一个完成的流程
			1、用户访问产品a，域名是http://www.a.cn。
			2、由于用户没有携带在a服务器上登录的a cookie，所以a服务器返回http重定向，重定向的url是SSO服务器的地址，同时url的query中通过参数指明登录成功后，
				回跳到a页面。重定向的url形如 http://sso.dxy.cn/login?service=https%3A%2F%2Fwww.a.cn。
			3、由于SSO服务器上没有登录的TGC，TGC存放在SSO服务器上的Session，所以判读用户并没有在SSO上已经登录了，如果没有登录，给用户显示统一登录界面。用
				户在SSO的页面上进行登录操作，并生成TGC，保存在SSO服务器上。
			4、登录成功后，SSO服务器构建用户在SSO登录的TGT（保存TGC的session的sessionId），同时返回一个http重定向。这里注意：
				# 重定向地址为之前写在query里的a页面。
				# 重定向地址的query中包含sso服务器派发给产品A的ST。
				# 重定向的http response中包含写cookie的header。这个cookie代表用户在SSO中的登录状态，它的值就是TGC。
			5、浏览器重定向到产品 a。此时重定向的url中携带着SSO服务器生成的ST。
			6、根据ST，a服务器向SSO服务器发送验证请求，SSO服务器验证票据的有效性。验证成功后，a服务器知道用户已经在sso登录了，于是a服务器构建用户登录session，
				记为a session。并将cookie写入浏览器。注意，此处的cookie和session保存的是用户在a服务器的登录状态，和CAS无关。
				
			7、之后用户访问产品b，域名是 http://www.b.cn。
			8、由于用户没有携带在b服务器上登录的b cookie，所以b服务器返回http重定向，重定向的url是SSO服务器的地址，去询问用户在SSO中的登录状态。
			9、浏览器重定向到SSO。注意，第4步中已经向浏览器写入了携带TGC的cookie，所以此时SSO服务器可以拿到，根据TGC去查找TGT，如果找到，就判断用户已经在sso 
				登录过了。
			10、SSO服务器返回一个重定向，重定向携带产品B的ST。注意，这里的ST 和第4步中的 ST是不一样的，事实上，每次生成的ST都是不一样的。
			11、浏览器带ST重定向到b服务器，和第5步一样。
			12、b服务器根据票据向SSO服务器发送请求，票据验证通过后，b服务器知道用户已经在sso登录了，于是生成b session，向浏览器写入 b cookie。