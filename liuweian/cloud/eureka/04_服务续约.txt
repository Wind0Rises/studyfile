##########################################################################################################################################################
#####################################################         Eureka Client			######################################################################
##########################################################################################################################################################
/**
 *
 */
location：DiscoveryClient
private void initScheduledTasks() {
	if (clientConfig.shouldFetchRegistry()) {
	
		int registryFetchIntervalSeconds = clientConfig.getRegistryFetchIntervalSeconds();
		int expBackOffBound = clientConfig.getCacheRefreshExecutorExponentialBackOffBound();
		
		// 【【【缓存刷线】】】
		scheduler.schedule(new TimedSupervisorTask("cacheRefresh", scheduler, cacheRefreshExecutor, registryFetchIntervalSeconds,
						TimeUnit.SECONDS, expBackOffBound, new CacheRefreshThread()), registryFetchIntervalSeconds, TimeUnit.SECONDS);
	}

	if (clientConfig.shouldRegisterWithEureka()) {
		int renewalIntervalInSecs = instanceInfo.getLeaseInfo().getRenewalIntervalInSecs();
		int expBackOffBound = clientConfig.getHeartbeatExecutorExponentialBackOffBound();
		logger.info("Starting heartbeat executor: " + "renew interval is: {}", renewalIntervalInSecs);

		// 【【【续约，心跳】】】
		scheduler.schedule(new TimedSupervisorTask("heartbeat", scheduler, heartbeatExecutor,
						renewalIntervalInSecs, TimeUnit.SECONDS, expBackOffBound, new HeartbeatThread()), renewalIntervalInSecs, TimeUnit.SECONDS);

		// instanceInfoReplicator内部会调用【注册】
		instanceInfoReplicator = new InstanceInfoReplicator(this, instanceInfo, clientConfig.getInstanceInfoReplicationIntervalSeconds(), 2);

		statusChangeListener = new ApplicationInfoManager.StatusChangeListener() {
		
			@Override
			public String getId() {
				return "statusChangeListener";
			}

			@Override
			public void notify(StatusChangeEvent statusChangeEvent) {
				if (InstanceStatus.DOWN == statusChangeEvent.getStatus() || InstanceStatus.DOWN == statusChangeEvent.getPreviousStatus()) {
					logger.warn("Saw local status change event {}", statusChangeEvent);
				} else {
					logger.info("Saw local status change event {}", statusChangeEvent);
				}
				instanceInfoReplicator.onDemandUpdate();
			}
		};

		if (clientConfig.shouldOnDemandUpdateStatusChange()) {
			applicationInfoManager.registerStatusChangeListener(statusChangeListener);
		}

		// 【【【重要】】】
		instanceInfoReplicator.start(clientConfig.getInitialInstanceInfoReplicationIntervalSeconds());
	} else {
		logger.info("Not registering with Eureka server per configuration");
	}
}

/**
 *
 */
location：TimedSupervisorTask
public void run() {
	Future<?> future = null;
	try {
	
		// 把传入的线程交给线程执行。这个task就是HeartbeatThread实例。
		future = executor.submit(task);
		
		
		threadPoolLevelGauge.set((long) executor.getActiveCount());
		future.get(timeoutMillis, TimeUnit.MILLISECONDS);  // block until done or timeout
		delay.set(timeoutMillis);
		threadPoolLevelGauge.set((long) executor.getActiveCount());
		successCounter.increment();
	} catch (TimeoutException e) {
		logger.warn("task supervisor timed out", e);
		timeoutCounter.increment();

		long currentDelay = delay.get();
		long newDelay = Math.min(maxDelay, currentDelay * 2);
		delay.compareAndSet(currentDelay, newDelay);

	} catch (RejectedExecutionException e) {
		if (executor.isShutdown() || scheduler.isShutdown()) {
			logger.warn("task supervisor shutting down, reject the task", e);
		} else {
			logger.warn("task supervisor rejected the task", e);
		}

		rejectedCounter.increment();
	} catch (Throwable e) {
		if (executor.isShutdown() || scheduler.isShutdown()) {
			logger.warn("task supervisor shutting down, can't accept the task");
		} else {
			logger.warn("task supervisor threw an exception", e);
		}

		throwableCounter.increment();
	} finally {
		if (future != null) {
			future.cancel(true);
		}

		if (!scheduler.isShutdown()) {
			scheduler.schedule(this, delay.get(), TimeUnit.MILLISECONDS);
		}
	}
}


/**
 *
 */
location：DiscoveryClient.HeartbeatThread
private class HeartbeatThread implements Runnable {
	public void run() {
		if (renew()) {
			lastSuccessfulHeartbeatTimestamp = System.currentTimeMillis();
		}
	}
}

/**
 *
 */
location：DiscoveryClient
boolean renew() {
	EurekaHttpResponse<InstanceInfo> httpResponse;
	try {

			
		httpResponse = eurekaTransport.registrationClient.sendHeartBeat(instanceInfo.getAppName(), instanceInfo.getId(), instanceInfo, null);
	
		logger.debug(PREFIX + "{} - Heartbeat status: {}", appPathIdentifier, httpResponse.getStatusCode());
		
		// 报404的处理
		if (httpResponse.getStatusCode() == Status.NOT_FOUND.getStatusCode()) {
		
			REREGISTER_COUNTER.increment();
			logger.info(PREFIX + "{} - Re-registering apps/{}", appPathIdentifier, instanceInfo.getAppName());
			
			long timestamp = instanceInfo.setIsDirtyWithTime();
			
			// 注册处理。
			boolean success = register();
			if (success) {
				instanceInfo.unsetIsDirty(timestamp);
			}
			return success;
		}
		
		// 是否续约成功。
		return httpResponse.getStatusCode() == Status.OK.getStatusCode();
	} catch (Throwable e) {
		logger.error(PREFIX + "{} - was unable to send heartbeat!", appPathIdentifier, e);
		return false;
	}
}

##########################################################################################################################################################
#####################################################         Eureka Server			######################################################################
##########################################################################################################################################################
/**
 *
 */
location：InstanceRegistry
public boolean renew(final String appName, final String serverId, boolean isReplication) {
	log("renew " + appName + " serverId " + serverId + ", isReplication {}" + isReplication);
	
	// Application：这个类是在客户端定义的，
	// 获取List<Application>这是一个复杂的过程。
	List<Application> applications = getSortedApplications();
	
	for (Application input : applications) {
		if (input.getName().equals(appName)) {
			InstanceInfo instance = null;
			
			// 获取InstanceInfo。
			for (InstanceInfo。 info : input.getInstances()) {
				if (info.getId().equals(serverId)) {
					instance = info;
					break;
				}
			}
			
			// 发布事件。
			publishEvent(new EurekaInstanceRenewedEvent(this, appName, serverId, instance, isReplication));
			
			break;
		}
	}
	return super.renew(appName, serverId, isReplication);
}
	
/**
 *
 */
location：PeerAwareInstanceRegistryImpl
public boolean renew(final String appName, final String id, final boolean isReplication) {
	if (super.renew(appName, id, isReplication)) {
		replicateToPeers(Action.Heartbeat, appName, id, null, null, isReplication);
		return true;
	}
	return false;
}

/**
 *
 */
location：AbstractInstanceRegistry
public boolean renew(String appName, String id, boolean isReplication) {
	RENEW.increment(isReplication);
	Map<String, Lease<InstanceInfo>> gMap = registry.get(appName);
	Lease<InstanceInfo> leaseToRenew = null;
	if (gMap != null) {
		leaseToRenew = gMap.get(id);
	}
	
	if (leaseToRenew == null) {
		RENEW_NOT_FOUND.increment(isReplication);
		logger.warn("DS: Registry: lease doesn't exist, registering resource: {} - {}", appName, id);
		return false;
	} else {
		InstanceInfo instanceInfo = leaseToRenew.getHolder();
		if (instanceInfo != null) {
			InstanceStatus overriddenInstanceStatus = this.getOverriddenInstanceStatus(instanceInfo, leaseToRenew, isReplication);
			if (overriddenInstanceStatus == InstanceStatus.UNKNOWN) {
				logger.info("Instance status UNKNOWN possibly due to deleted override for instance {}" + "; re-register required", instanceInfo.getId());
				RENEW_NOT_FOUND.increment(isReplication);
				return false;
			}
			if (!instanceInfo.getStatus().equals(overriddenInstanceStatus)) {
				logger.info("The instance status {} is different from overridden instance status {} for instance {}. " + "Hence setting the status to overridden status", instanceInfo.getStatus().name(),
								instanceInfo.getOverriddenStatus().name(), instanceInfo.getId());
				instanceInfo.setStatusWithoutDirty(overriddenInstanceStatus);

			}
		}
		renewsLastMin.increment();
		leaseToRenew.renew();
		return true;
	}
}
