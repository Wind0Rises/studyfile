private Scheduler instantiate() throws SchedulerException {
	
	// 如果cfg为空，重新初始换quartz.properties文件
	if (cfg == null) {
		initialize();
	}

	if (initException != null) {
		throw initException;
	}

	JobStore js = null;								// 存储Job的方式，可以使用RAMJobStore存储，可以使用JDBCJobStore
	ThreadPool tp = null;							// 数据库连接池
#############################################################################################################################################################
#	QuartzScheduler：这是Quartz的核心，间接地的实现了Scheduler接口，包含Scheduler的Job实现和JobListener的注册实例。QuartzScheduler中						#
#	的属性有很多核心属性；QuartzSchedulerResources用于存储一些QuartzScheduler的信息；QuartzSchedulerThread：QuartzScheduler线程，这个线程的run方法很重要;	#
#	ListenerManager:监听器管理器，用于管理监听器的。internalJobListeners、internalTriggerListeners和internalSchedulerListeners存放着内部JobListener、		#
#	TriggerListener和SchedulerListener的
#	JobFactory：Job工厂；
#		
##################################################################################################################################				
	QuartzScheduler qs = null;
	
	DBConnectionManager dbMgr = null;				// 数据库连接管理
	String instanceIdGeneratorClass = null;			// 
	Properties tProps = null;
	String userTXLocation = null;
	boolean wrapJobInTx = false;
	boolean autoId = false;
	long idleWaitTime = -1;
	long dbFailureRetry = 15000L; 			// 15 secs
	String classLoadHelperClass;
	String jobFactoryClass;
	ThreadExecutor threadExecutor;

	SchedulerRepository schedRep = SchedulerRepository.getInstance();											// 初始化一个SchedulerRepository
	String schedName = cfg.getStringProperty(PROP_SCHED_INSTANCE_NAME, "QuartzScheduler");						//从配置文件中读取scheduler的名字，默认使用：QuartzScheduler
	String threadName = cfg.getStringProperty(PROP_SCHED_THREAD_NAME, schedName + "_QuartzSchedulerThread"); 	//从配置文件中读取threadName，默认使用：_QuartzSchedulerThread
	String schedInstId = cfg.getStringProperty(PROP_SCHED_INSTANCE_ID, DEFAULT_INSTANCE_ID);					//读取或者设置instanceId，默认使用：NON_CLUSTERED

	// 获取生产实例ID的类名，
	// 如果是自动生产，从配置文件读取org.quartz.scheduler.instanceIdGenerator.class，如果没有使用org.quartz.simpl.SimpleInstanceIdGenerator
	if (schedInstId.equals(AUTO_GENERATE_INSTANCE_ID)) {
		autoId = true;
		instanceIdGeneratorClass = cfg.getStringProperty(PROP_SCHED_INSTANCE_ID_GENERATOR_CLASS, "org.quartz.simpl.SimpleInstanceIdGenerator");
	// 如果不是默认使用org.quartz.simpl.SystemPropertyInstanceIdGenerator生产实例ID	
	} else if (schedInstId.equals(SYSTEM_PROPERTY_AS_INSTANCE_ID)) {
		autoId = true;
		instanceIdGeneratorClass = "org.quartz.simpl.SystemPropertyInstanceIdGenerator";
	}

	// 从配置文件获取org.quartz.scheduler.userTransactionURL
	userTXLocation = cfg.getStringProperty(PROP_SCHED_USER_TX_URL, userTXLocation); 
	if (userTXLocation != null && userTXLocation.trim().length() == 0) {
		userTXLocation = null;
	}

	// 从配置文件获取。
	classLoadHelperClass = cfg.getStringProperty(PROP_SCHED_CLASS_LOAD_HELPER_CLASS, "org.quartz.simpl.CascadingClassLoadHelper");
	// 从配置文件读取。如果你想Quartz在执行你的Job的execute方法之前启动一个UserTransaction的话，这里设置问ture，这个事务将会在Job的execute方法执行完成以后或者是JobDataMap更新以后把事务提交，JTA事务的设置默认为false。
	wrapJobInTx = cfg.getBooleanProperty(PROP_SCHED_WRAP_JOB_IN_USER_TX, wrapJobInTx);	
	// 从配置文件读取。获取JobFactory的类名；默认使用org.quartz.simpl.SimpleJobFactory这个JobFactory工厂类。
	jobFactoryClass = cfg.getStringProperty( PROP_SCHED_JOB_FACTORY_CLASS, null);
	
	// 从配置文件读取。idleWaitTime = -1。空闲等待时间，等待时间至少要大于1秒钟。
	idleWaitTime = cfg.getLongProperty(PROP_SCHED_IDLE_WAIT_TIME, idleWaitTime);
	if(idleWaitTime > -1 && idleWaitTime < 1000) {
		throw new SchedulerException("org.quartz.scheduler.idleWaitTime of less than 1000ms is not legal.");
	}
	
	//  从配置文件读取。数据库失败重试时间，默认为long dbFailureRetry = 15000L; 
	dbFailureRetry = cfg.getLongProperty(PROP_SCHED_DB_FAILURE_RETRY_INTERVAL, dbFailureRetry);  
	if (dbFailureRetry < 0) {
		throw new SchedulerException(PROP_SCHED_DB_FAILURE_RETRY_INTERVAL + " of less than 0 ms is not legal.");
	}

	// 从配置文件读取。
	//####################################################################################################################################################
	//#  Quartz的顶级配置。
	//####################################################################################################################################################
	// 调度器是否是后台线程，默认为false。
	boolean makeSchedulerThreadDaemon = cfg.getBooleanProperty(PROP_SCHED_MAKE_SCHEDULER_THREAD_DAEMON);
	// 线程是否继承初始化类加载器，默认false。
	boolean threadsInheritInitalizersClassLoader = cfg.getBooleanProperty(PROP_SCHED_SCHEDULER_THREADS_INHERIT_CONTEXT_CLASS_LOADER_OF_INITIALIZING_THREAD);
	// Quartz是否可更新版本，默认为ture。
	boolean skipUpdateCheck = cfg.getBooleanProperty(PROP_SCHED_SKIP_UPDATE_CHECK, true);
	// 是否是在时间窗口前批量触发。
	long batchTimeWindow = cfg.getLongProperty(PROP_SCHED_BATCH_TIME_WINDOW, 0L);
	// 最大批量执行的作业数。
	int maxBatchSize = cfg.getIntProperty(PROP_SCHED_MAX_BATCH_SIZE, 1);
	// 当关闭Job时，是否中断Job的线程，默认为false。
	boolean interruptJobsOnShutdown = cfg.getBooleanProperty(PROP_SCHED_INTERRUPT_JOBS_ON_SHUTDOWN, false);
	// 当关闭Job时，是否等待中断Job的线程，默认为false
	boolean interruptJobsOnShutdownWithWait = cfg.getBooleanProperty(PROP_SCHED_INTERRUPT_JOBS_ON_SHUTDOWN_WITH_WAIT, false);
	boolean jmxExport = cfg.getBooleanProperty(PROP_SCHED_JMX_EXPORT);
	String jmxObjectName = cfg.getStringProperty(PROP_SCHED_JMX_OBJECT_NAME);
	boolean jmxProxy = cfg.getBooleanProperty(PROP_SCHED_JMX_PROXY);
	String jmxProxyClass = cfg.getStringProperty(PROP_SCHED_JMX_PROXY_CLASS);
	boolean rmiExport = cfg.getBooleanProperty(PROP_SCHED_RMI_EXPORT, false);
	boolean rmiProxy = cfg.getBooleanProperty(PROP_SCHED_RMI_PROXY, false);
	String rmiHost = cfg.getStringProperty(PROP_SCHED_RMI_HOST, "localhost");
	int rmiPort = cfg.getIntProperty(PROP_SCHED_RMI_PORT, 1099);
	int rmiServerPort = cfg.getIntProperty(PROP_SCHED_RMI_SERVER_PORT, -1);
	String rmiCreateRegistry = cfg.getStringProperty(PROP_SCHED_RMI_CREATE_REGISTRY, QuartzSchedulerResources.CREATE_REGISTRY_NEVER);
	String rmiBindName = cfg.getStringProperty(PROP_SCHED_RMI_BIND_NAME);

	if (jmxProxy && rmiProxy) {
		throw new SchedulerConfigException("Cannot proxy both RMI and JMX.");
	}
	
	boolean managementRESTServiceEnabled = cfg.getBooleanProperty(MANAGEMENT_REST_SERVICE_ENABLED, false);
	String managementRESTServiceHostAndPort = cfg.getStringProperty(MANAGEMENT_REST_SERVICE_HOST_PORT, "0.0.0.0:9889");

	Properties schedCtxtProps = cfg.getPropertyGroup(PROP_SCHED_CONTEXT_PREFIX, true);

	// 判断是否是远程调用，如果是远程的，从远程获取RemoteScheduler并返回
	if (rmiProxy) {
		if (autoId) {
			schedInstId = DEFAULT_INSTANCE_ID;
		}
		String uid = (rmiBindName == null) ? QuartzSchedulerResources.getUniqueIdentifier(schedName, schedInstId) : rmiBindName;
		RemoteScheduler remoteScheduler = new RemoteScheduler(uid, rmiHost, rmiPort);
		schedRep.bind(remoteScheduler);
		return remoteScheduler;
	}


	// 创建ClassLoadHelper，并初始化ClassLoadHelper。
	ClassLoadHelper loadHelper = null;
	try {
		loadHelper = (ClassLoadHelper) loadClass(classLoadHelperClass).newInstance();
	} catch (Exception e) {
		throw new SchedulerConfigException("Unable to instantiate class load helper class: " + e.getMessage(), e);
	}
	loadHelper.initialize();

	// 判断是否是远程JMX Scheduler
	if (jmxProxy) {
		if (autoId) {
			schedInstId = DEFAULT_INSTANCE_ID;
		}
		if (jmxProxyClass == null) {
			throw new SchedulerConfigException("No JMX Proxy Scheduler class provided");
		}
		RemoteMBeanScheduler jmxScheduler = null;
		try {
			jmxScheduler = (RemoteMBeanScheduler)loadHelper.loadClass(jmxProxyClass)
					.newInstance();
		} catch (Exception e) {
			throw new SchedulerConfigException(
					"Unable to instantiate RemoteMBeanScheduler class.", e);
		}
		if (jmxObjectName == null) {
			jmxObjectName = QuartzSchedulerResources.generateJMXObjectName(schedName, schedInstId);
		}
		jmxScheduler.setSchedulerObjectName(jmxObjectName);
		tProps = cfg.getPropertyGroup(PROP_SCHED_JMX_PROXY, true);	
		try {
			setBeanProps(jmxScheduler, tProps);
		} catch (Exception e) {
			initException = new SchedulerException("RemoteMBeanScheduler class '"
					+ jmxProxyClass + "' props could not be configured.", e);
			throw initException;
		}
		jmxScheduler.initialize();
		schedRep.bind(jmxScheduler);
		return jmxScheduler;
	}

	// 通过ClassLoadHelper创建JobFactory。
	JobFactory jobFactory = null;
	if(jobFactoryClass != null) {
		try {
			jobFactory = (JobFactory) loadHelper.loadClass(jobFactoryClass).newInstance();
		} catch (Exception e) {
			throw new SchedulerConfigException("Unable to instantiate JobFactory class: " + e.getMessage(), e);
		}
		// 获取配置信息
		tProps = cfg.getPropertyGroup(PROP_SCHED_JOB_FACTORY_PREFIX, true);
		try {
			// 把配置信息设置到对应的JobFactory
			setBeanProps(jobFactory, tProps);
		} catch (Exception e) {
			initException = new SchedulerException("JobFactory class '" + jobFactoryClass + "' props could not be configured.", e);
			throw initException;
		}
	}

	InstanceIdGenerator instanceIdGenerator = null;
	if(instanceIdGeneratorClass != null) {
		try {
			instanceIdGenerator = (InstanceIdGenerator) loadHelper.loadClass(instanceIdGeneratorClass).newInstance();
		} catch (Exception e) {
			throw new SchedulerConfigException("Unable to instantiate InstanceIdGenerator class: " + e.getMessage(), e);
		}
		tProps = cfg.getPropertyGroup(PROP_SCHED_INSTANCE_ID_GENERATOR_PREFIX, true);
		try {
			setBeanProps(instanceIdGenerator, tProps);
		} catch (Exception e) {
			initException = new SchedulerException("InstanceIdGenerator class '" + instanceIdGeneratorClass + "' props could not be configured.", e);
			throw initException;
		}
	}

	//######################################
	// 获取线程池配置
	//######################################
	String tpClass = cfg.getStringProperty(PROP_THREAD_POOL_CLASS, SimpleThreadPool.class.getName());
	if (tpClass == null) {
		initException = new SchedulerException("ThreadPool class not specified. ");
		throw initException;
	}
	try {
		// 创建ThreadPool线程池兑现
		tp = (ThreadPool) loadHelper.loadClass(tpClass).newInstance();
	} catch (Exception e) {
		initException = new SchedulerException("ThreadPool class '" + tpClass + "' could not be instantiated.", e);
		throw initException;
	}
	// 获取线程池配置
	tProps = cfg.getPropertyGroup(PROP_THREAD_POOL_PREFIX, true);  
	try {
		// 把线程池的配置设置这个给线程池
		setBeanProps(tp, tProps); 		
	} catch (Exception e) {
		initException = new SchedulerException("ThreadPool class '" + tpClass + "' props could not be configured.", e);
		throw initException;
	}

	//##################################
	// 获取Job_Store配置
	//##################################
	// 获取JobStore对象，默认使用RAMJobStore类
	String jsClass = cfg.getStringProperty(PROP_JOB_STORE_CLASS, RAMJobStore.class.getName());
	if (jsClass == null) {
		initException = new SchedulerException("JobStore class not specified. ");
		throw initException;
	}
	try {
		// 创建JobStore实例
		js = (JobStore) loadHelper.loadClass(jsClass).newInstance();
	} catch (Exception e) {
		initException = new SchedulerException("JobStore class '" + jsClass + "' could not be instantiated.", e);
		throw initException;
	}
	// 为JobStore设置对应的instanceName和instanceId
	SchedulerDetailsSetter.setDetails(js, schedName, schedInstId);
	// 获取属性信息。
	tProps = cfg.getPropertyGroup(PROP_JOB_STORE_PREFIX, true, new String[] {PROP_JOB_STORE_LOCK_HANDLER_PREFIX});
	try {
		// 为JobStore设置属性内容
		setBeanProps(js, tProps);
	} catch (Exception e) {
		initException = new SchedulerException("JobStore class '" + jsClass + "' props could not be configured.", e);
		throw initException;
	}
	// 如果JobStore是JobStoreCMT、LocalDataSourceJobStore或者JobStoreTX，进入if。JobStoreCMT、LocalDataSourceJobStore或者JobStoreTX这三个企业级应用
	// 比较多，使用数据库存储对应的Quartz信息。
	if (js instanceof JobStoreSupport) {
		// 进入自定义锁处理程序。
		String lockHandlerClass = cfg.getStringProperty(PROP_JOB_STORE_LOCK_HANDLER_CLASS);
		if (lockHandlerClass != null) {
			try {
				// 实例一个Semaphore对象。
				Semaphore lockHandler = (Semaphore)loadHelper.loadClass(lockHandlerClass).newInstance();
				// 获取属性信息。
				tProps = cfg.getPropertyGroup(PROP_JOB_STORE_LOCK_HANDLER_PREFIX, true);
				// 如果此锁定处理程序需要表前缀，需要将其添加到其属性中。
				if (lockHandler instanceof TablePrefixAware) {
					tProps.setProperty(PROP_TABLE_PREFIX, ((JobStoreSupport)js).getTablePrefix());
					tProps.setProperty(PROP_SCHED_NAME, schedName);
				}
				try {
					setBeanProps(lockHandler, tProps);
				} catch (Exception e) {
					initException = new SchedulerException("JobStore LockHandler class '" + lockHandlerClass + "' props could not be configured.", e);
					throw initException;
				}
				// 把对应Semaphore信息设置到JobStore中。
				((JobStoreSupport)js).setLockHandler(lockHandler);
				getLog().info("Using custom data access locking (synchronization): " + lockHandlerClass);
			} catch (Exception e) {
				initException = new SchedulerException("JobStore LockHandler class '" + lockHandlerClass + "' could not be instantiated.", e);
				throw initException;
			}
		}
	}
	
	//##################################
	// 设置数据源
	//##################################
	// 数据数据源对应的信息。org.quartz.dataSource这个前缀对应的信息。
	String[] dsNames = cfg.getPropertyGroups(PROP_DATASOURCE_PREFIX);
	
	for (int i = 0; i < dsNames.length; i++) {
		// 初始化一个PropertiesParser,通过org.quartz.dataSource.*初始化一个Properties。
		PropertiesParser pp = new PropertiesParser(cfg.getPropertyGroup(PROP_DATASOURCE_PREFIX + "." + dsNames[i], true));
		// 从PropertiesParser中获取ConnectionProvider
		String cpClass = pp.getStringProperty(PROP_CONNECTION_PROVIDER_CLASS, null);
		
		// 自定义ConnectionProvider
		if(cpClass != null) {
			ConnectionProvider cp = null;
			try {
				cp = (ConnectionProvider) loadHelper.loadClass(cpClass).newInstance();
			} catch (Exception e) {
				initException = new SchedulerException("ConnectionProvider class '" + cpClass + "' could not be instantiated.", e);
				throw initException;
			}

			try {
				// 删除类名，不会使用其的设置
				pp.getUnderlyingProperties().remove(PROP_CONNECTION_PROVIDER_CLASS);
				if (cp instanceof PoolingConnectionProvider) {
					populateProviderWithExtraProps((PoolingConnectionProvider)cp, pp.getUnderlyingProperties());
				} else {
					setBeanProps(cp, pp.getUnderlyingProperties());
				}
				cp.initialize();
			} catch (Exception e) {
				initException = new SchedulerException("ConnectionProvider class '" + cpClass + "' props could not be configured.", e);
				throw initException;
			}
			// DBConnectionManager进行初始化。
			dbMgr = DBConnectionManager.getInstance();
			dbMgr.addConnectionProvider(dsNames[i], cp);
		} else {
			String dsJndi = pp.getStringProperty(PROP_DATASOURCE_JNDI_URL, null);
			if (dsJndi != null) {
				boolean dsAlwaysLookup = pp.getBooleanProperty(PROP_DATASOURCE_JNDI_ALWAYS_LOOKUP);
				String dsJndiInitial = pp.getStringProperty(PROP_DATASOURCE_JNDI_INITIAL);
				String dsJndiProvider = pp.getStringProperty(PROP_DATASOURCE_JNDI_PROVDER);
				String dsJndiPrincipal = pp.getStringProperty(PROP_DATASOURCE_JNDI_PRINCIPAL);
				String dsJndiCredentials = pp.getStringProperty(PROP_DATASOURCE_JNDI_CREDENTIALS);
				Properties props = null;
				if (null != dsJndiInitial || null != dsJndiProvider || null != dsJndiPrincipal || null != dsJndiCredentials) {
					props = new Properties();
					if (dsJndiInitial != null) {
						props.put(PROP_DATASOURCE_JNDI_INITIAL, dsJndiInitial);
					}
					if (dsJndiProvider != null) {
						props.put(PROP_DATASOURCE_JNDI_PROVDER, dsJndiProvider);
					}
					if (dsJndiPrincipal != null) {
						props.put(PROP_DATASOURCE_JNDI_PRINCIPAL, dsJndiPrincipal);
					}
					if (dsJndiCredentials != null) {
						props.put(PROP_DATASOURCE_JNDI_CREDENTIALS, dsJndiCredentials);
					}
				}
				JNDIConnectionProvider cp = new JNDIConnectionProvider(dsJndi, props, dsAlwaysLookup);
				dbMgr = DBConnectionManager.getInstance();
				dbMgr.addConnectionProvider(dsNames[i], cp);
			} else {
				String dsDriver = pp.getStringProperty(PoolingConnectionProvider.DB_DRIVER);
				String dsURL = pp.getStringProperty(PoolingConnectionProvider.DB_URL);

				if (dsDriver == null) {
					initException = new SchedulerException("Driver not specified for DataSource: " + dsNames[i]);
					throw initException;
				}
				if (dsURL == null) {
					initException = new SchedulerException("DB URL not specified for DataSource: " + dsNames[i]);
					throw initException;
				}
				try {
					PoolingConnectionProvider cp = new PoolingConnectionProvider(pp.getUnderlyingProperties());
					dbMgr = DBConnectionManager.getInstance();
					dbMgr.addConnectionProvider(dsNames[i], cp);
					// Populate the underlying C3P0 data source pool properties
					populateProviderWithExtraProps(cp, pp.getUnderlyingProperties());
				} catch (Exception sqle) {
					initException = new SchedulerException("Could not initialize DataSource: " + dsNames[i], sqle);
					throw initException;
				}
			}
		}
	}
	
	//##################################
	// 设置其他Scheduler参数
	//##################################
	String[] pluginNames = cfg.getPropertyGroups(PROP_PLUGIN_PREFIX);
	SchedulerPlugin[] plugins = new SchedulerPlugin[pluginNames.length];
	for (int i = 0; i < pluginNames.length; i++) {
		Properties pp = cfg.getPropertyGroup(PROP_PLUGIN_PREFIX + "." + pluginNames[i], true);
		String plugInClass = pp.getProperty(PROP_PLUGIN_CLASS, null);

		if (plugInClass == null) {
			initException = new SchedulerException("SchedulerPlugin class not specified for plugin '" + pluginNames[i] + "'");
			throw initException;
		}
		SchedulerPlugin plugin = null;
		try {
			plugin = (SchedulerPlugin) loadHelper.loadClass(plugInClass).newInstance();
		} catch (Exception e) {
			initException = new SchedulerException("SchedulerPlugin class '" + plugInClass + "' could not be instantiated.", e);
			throw initException;
		}
		try {
			setBeanProps(plugin, pp);
		} catch (Exception e) {
			initException = new SchedulerException("JobStore SchedulerPlugin '" + plugInClass + "' props could not be configured.", e);
			throw initException;
		}
		plugins[i] = plugin;
	}

	//##################################
	// 设置JOB监听
	//##################################
	Class<?>[] strArg = new Class[] { String.class };
	String[] jobListenerNames = cfg.getPropertyGroups(PROP_JOB_LISTENER_PREFIX);
	JobListener[] jobListeners = new JobListener[jobListenerNames.length];
	for (int i = 0; i < jobListenerNames.length; i++) {
		Properties lp = cfg.getPropertyGroup(PROP_JOB_LISTENER_PREFIX + "." + jobListenerNames[i], true);
		// 重配置文件中获取配置配置的JobListener
		String listenerClass = lp.getProperty(PROP_LISTENER_CLASS, null);
		if (listenerClass == null) {
			initException = new SchedulerException("JobListener class not specified for listener '" + jobListenerNames[i] + "'");
			throw initException;
		}
		JobListener listener = null;
		try {
			// 初始化监听器
			listener = (JobListener) loadHelper.loadClass(listenerClass).newInstance();
		} catch (Exception e) {
			initException = new SchedulerException("JobListener class '" + listenerClass + "' could not be instantiated.", e);
			throw initException;
		}
		try {
			Method nameSetter = null;
			try { 
				nameSetter = listener.getClass().getMethod("setName", strArg);
			} catch(NoSuchMethodException ignore) { 
				/* do nothing */ 
			}
			if(nameSetter != null) {
				// 设置监听器名字
				nameSetter.invoke(listener, new Object[] {jobListenerNames[i] } );
			}
			setBeanProps(listener, lp);
		} catch (Exception e) {
			initException = new SchedulerException( "JobListener '" + listenerClass + "' props could not be configured.", e);
			throw initException;
		}
		jobListeners[i] = listener;
	}

	//################################################
	// 设置Trigger监听,和Job非常类型，比较着看
	//##################################################
	String[] triggerListenerNames = cfg.getPropertyGroups(PROP_TRIGGER_LISTENER_PREFIX);
	TriggerListener[] triggerListeners = new TriggerListener[triggerListenerNames.length];
	for (int i = 0; i < triggerListenerNames.length; i++) {
		Properties lp = cfg.getPropertyGroup(PROP_TRIGGER_LISTENER_PREFIX + "." + triggerListenerNames[i], true);
		String listenerClass = lp.getProperty(PROP_LISTENER_CLASS, null);
		if (listenerClass == null) {
			initException = new SchedulerException("TriggerListener class not specified for listener '" + triggerListenerNames[i] + "'");
			throw initException;
		}
		TriggerListener listener = null;
		try {
			listener = (TriggerListener)loadHelper.loadClass(listenerClass).newInstance();
		} catch (Exception e) {
			initException = new SchedulerException("TriggerListener class '" + listenerClass + "' could not be instantiated.", e);
			throw initException;
		}
		try {
			Method nameSetter = null;
			try { 
				nameSetter = listener.getClass().getMethod("setName", strArg);
			}
			catch(NoSuchMethodException ignore) {
				/* do nothing */ 
			}
			if(nameSetter != null) {
				nameSetter.invoke(listener, new Object[] {triggerListenerNames[i] } );
			}
			setBeanProps(listener, lp);
		} catch (Exception e) {
			initException = new SchedulerException("TriggerListener '" + listenerClass + "' props could not be configured.", e);
			throw initException;
		}
		triggerListeners[i] = listener;
	}
	boolean tpInited = false;
	boolean qsInited = false;


	//##################################
	// 设置ThreadExecutor配置
	//##################################
	// 从配置文件中获取org.quartz.threadExecutor.class参数。
	String threadExecutorClass = cfg.getStringProperty(PROP_THREAD_EXECUTOR_CLASS);
	// 判断是否配置了ThreadExecutor，如果有使用配置的ThreadExecute，如果没有DefaultThreadExecutor。
	if (threadExecutorClass != null) {
		tProps = cfg.getPropertyGroup(PROP_THREAD_EXECUTOR, true);
		try {
			threadExecutor = (ThreadExecutor) loadHelper.loadClass(threadExecutorClass).newInstance();
			log.info("Using custom implementation for ThreadExecutor: " + threadExecutorClass);
			setBeanProps(threadExecutor, tProps);
		} catch (Exception e) {
			initException = new SchedulerException(
					"ThreadExecutor class '" + threadExecutorClass + "' could not be instantiated.", e);
			throw initException;
		}
	} else {
		log.info("Using default implementation for ThreadExecutor");
		threadExecutor = new DefaultThreadExecutor();
	}

	//##################################
	// Fire everything up
	//##################################
	try {
		// JobRunShellFactory接口中有两个方法，一个initialize(Scheduler scheduler)方法，用于初始化；一个createJobRunShell(TriggerFiredBundle bundle)方法用于创建JobRunShell【TriggerFiredBundle用于将执行是数据返回到QuartzSchedulerThread中】
		// JobRunShell: JobRunShell实例负责为Job提供安全环境的，以及执行Job的所有工作，JobRunShell通过JobRunShellFactory被创建，
		JobRunShellFactory jrsf = null; // Create correct run-shell factory...
		if (userTXLocation != null) {
			UserTransactionHelper.setUserTxLocation(userTXLocation);
		}
		
		// wrapJobInTx默认为false
		if (wrapJobInTx) {
			jrsf = new JTAJobRunShellFactory();
		} else {
			jrsf = new JTAAnnotationAwareJobRunShellFactory();
		}
		if (autoId) {
			try {
			  schedInstId = DEFAULT_INSTANCE_ID;
			  if (js.isClustered()) {
				  schedInstId = instanceIdGenerator.generateInstanceId();
			  }
			} catch (Exception e) {
				getLog().error("Couldn't generate instance Id!", e);
				throw new IllegalStateException("Cannot run without an instance id.");
			}
		}
		if (js.getClass().getName().startsWith("org.terracotta.quartz")) {
			try {
				String uuid = (String) js.getClass().getMethod("getUUID").invoke(js);
				if(schedInstId.equals(DEFAULT_INSTANCE_ID)) {
					schedInstId = "TERRACOTTA_CLUSTERED,node=" + uuid;
					if (jmxObjectName == null) {
						jmxObjectName = QuartzSchedulerResources.generateJMXObjectName(schedName, schedInstId);
					}
				} else if(jmxObjectName == null) {
					jmxObjectName = QuartzSchedulerResources.generateJMXObjectName(schedName, schedInstId + ",node=" + uuid);
				}
			} catch(Exception e) {
				throw new RuntimeException("Problem obtaining node id from TerracottaJobStore.", e);
			}
			if(null == cfg.getStringProperty(PROP_SCHED_JMX_EXPORT)) {
				jmxExport = true;
			}
		}
		
		if (js instanceof JobStoreSupport) {
			JobStoreSupport jjs = (JobStoreSupport)js;
			jjs.setDbRetryInterval(dbFailureRetry);
			if(threadsInheritInitalizersClassLoader)
				jjs.setThreadsInheritInitializersClassLoadContext(threadsInheritInitalizersClassLoader);			
			jjs.setThreadExecutor(threadExecutor);
		}

		//###########################################################
		// 把获取到的各个信息设置在QuartzSchedulerResources中
		//###########################################################
		QuartzSchedulerResources rsrcs = new QuartzSchedulerResources();
		rsrcs.setName(schedName);
		rsrcs.setThreadName(threadName);
		rsrcs.setInstanceId(schedInstId);
		rsrcs.setJobRunShellFactory(jrsf);
		rsrcs.setMakeSchedulerThreadDaemon(makeSchedulerThreadDaemon);
		rsrcs.setThreadsInheritInitializersClassLoadContext(threadsInheritInitalizersClassLoader);
		rsrcs.setRunUpdateCheck(!skipUpdateCheck);
		rsrcs.setBatchTimeWindow(batchTimeWindow);
		rsrcs.setMaxBatchSize(maxBatchSize);
		rsrcs.setInterruptJobsOnShutdown(interruptJobsOnShutdown);
		rsrcs.setInterruptJobsOnShutdownWithWait(interruptJobsOnShutdownWithWait);
		rsrcs.setJMXExport(jmxExport);
		rsrcs.setJMXObjectName(jmxObjectName);

		if (managementRESTServiceEnabled) {
			ManagementRESTServiceConfiguration managementRESTServiceConfiguration = new ManagementRESTServiceConfiguration();
			managementRESTServiceConfiguration.setBind(managementRESTServiceHostAndPort);
			managementRESTServiceConfiguration.setEnabled(managementRESTServiceEnabled);
			rsrcs.setManagementRESTServiceConfiguration(managementRESTServiceConfiguration);
		}

		if (rmiExport) {
			rsrcs.setRMIRegistryHost(rmiHost);
			rsrcs.setRMIRegistryPort(rmiPort);
			rsrcs.setRMIServerPort(rmiServerPort);
			rsrcs.setRMICreateRegistryStrategy(rmiCreateRegistry);
			rsrcs.setRMIBindName(rmiBindName);
		}

		SchedulerDetailsSetter.setDetails(tp, schedName, schedInstId);

		rsrcs.setThreadExecutor(threadExecutor);
		threadExecutor.initialize();

		rsrcs.setThreadPool(tp);
		if(tp instanceof SimpleThreadPool) {
			if(threadsInheritInitalizersClassLoader)
				((SimpleThreadPool)tp).setThreadsInheritContextClassLoaderOfInitializingThread(threadsInheritInitalizersClassLoader);
		}
		//############################################################################################################
		// ThreadPool的初始化。很重要，
		//############################################################################################################
		tp.initialize();
		tpInited = true;

		rsrcs.setJobStore(js);

		// 添加插件
		for (int i = 0; i < plugins.length; i++) {
			rsrcs.addSchedulerPlugin(plugins[i]);
		}
		
		//########################################################################
		// 创建QuartzScheduler通过给定的rsrcs，idleWaitTime，dbFailureRetry
		// 在初始化QuartzScheduler有一个比较重要的操作，初始化有一个ThreadExecutor.execute(Thread thread)方法执行
		// #######################################################################
		qs = new QuartzScheduler(rsrcs, idleWaitTime, dbFailureRetry);
		qsInited = true;

		// 创建任务调度器
		Scheduler scheduler = instantiate(rsrcs, qs);
		
		// 设置指定JobFactory（如果有的话）
		if(jobFactory != null) {
			qs.setJobFactory(jobFactory);
		}

		// Initialize plugins now that we have a Scheduler instance.
		for (int i = 0; i < plugins.length; i++) {
			plugins[i].initialize(pluginNames[i], scheduler, loadHelper);
		}

		// 给QuartzScheduler设置监听器（前面获取的Job监听器,Trigger监听器）
		for (int i = 0; i < jobListeners.length; i++) {
			qs.getListenerManager().addJobListener(jobListeners[i], EverythingMatcher.allJobs());
		}
		for (int i = 0; i < triggerListeners.length; i++) {
			qs.getListenerManager().addTriggerListener(triggerListeners[i], EverythingMatcher.allTriggers());
		}

		// 设置scheduler数据
		for(Object key: schedCtxtProps.keySet()) {
			String val = schedCtxtProps.getProperty((String) key);    
			scheduler.getContext().put((String)key, val);
		}

		// 启动Job Store和runshell factory------fire up job store, and runshell factory
		js.setInstanceId(schedInstId);
		js.setInstanceName(schedName);
		js.setThreadPoolSize(tp.getPoolSize());
		js.initialize(loadHelper, qs.getSchedulerSignaler());

		jrsf.initialize(scheduler);		// JobRunShellFactory初始化配置		
		qs.initialize();				// QuartzScheduler初始化

		getLog().info("Quartz scheduler '" + scheduler.getSchedulerName() + "' initialized from " + propSrc);
		getLog().info("Quartz scheduler version: " + qs.getVersion());

		// 防止存储库被垃圾收集
		qs.addNoGCObject(schedRep);
		
		// 防止数据库管理器被垃圾回收
		if (dbMgr != null) {
			qs.addNoGCObject(dbMgr);
		}

		// 把Scheduler方法SchedulerRepository中
		schedRep.bind(scheduler);			
		return scheduler;
		
	} catch(SchedulerException e) {
		shutdownFromInstantiateException(tp, qs, tpInited, qsInited);
		throw e;
	} catch(RuntimeException re) {
		shutdownFromInstantiateException(tp, qs, tpInited, qsInited);
		throw re;
	} catch(Error re) {
		shutdownFromInstantiateException(tp, qs, tpInited, qsInited);
		throw re;
	}
}