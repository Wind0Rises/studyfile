Scheduler的具体实现中维护这QuartzScheduler对象。	
	可以通过scheduleJob各种重载把给定的JobDetail和Trigger设置到Scheduler中。
	可以通过unscheduleJob各种重载把给定的Trigger移除。

Scheduler（接口）：与调度程序交互的主要API，提供很多操作调度任务的方法，比如：start()方法；shutdown()方法；scheduleJob方法等。Scheduler的具体实现中维护一个QuartzScheduler实例，Scheduler中几乎所有的操作都是通过QuartzScheduler完成的，所以QuartzScheduler注释说其间接的实现了Scheduler。   

QuartzScheduler：任务调度真正实现操作的地方。是Quartz的核心。
其中维护这一个QuartzSchedulerThread，这是任务调度的线程，初始化一个QuartzScheduler时会实例一个QuartzSchedulerThread线程，并启动该线程。

QuartzSchedulerThread：任务调度的主线程，void halt(boolean wait)用于暂停该线程的方法；togglePause(boolean pause)方法用户暂停线程，参数为false时启动，ture为开始



通过JobDetail对象，可以给job实例配置的其它属性有：
Durability：如果一个job是非持久的，当没有活跃的trigger与之关联的时候，会被自动地从scheduler中删除。也就是说，非持久的job的生命期是由trigger的存在与否决定的；
RequestsRecovery：如果一个job是可恢复的，并且在其执行的时候，scheduler发生硬关闭（hard shutdown)（比如运行的进程崩溃了，或者关机了），则当scheduler重新启动的时候，该job会被重新执行。此时，该job的JobExecutionContext.isRecovering() 返回true。