


/**
 * 真正的工作线程，如果不是暂停状态，进入无限循环。
 *		如果QuartzSchedulerThread未启动：等待1s，并在次检查。【如果Quartz启动时，会调用sigLock的notifyAll()方法，跳过等待。】
 * 		
 *  	如果QuartzSchedulerThread启动：
 *			判断Scheduler中是否有可用的工作线程。
 * 			如果没有可用的工作线程：进入下次循环。
 *  		如果有可用的工作线程：从Scheduler中获取当前时间 + 30s的触发器。
 *
 */
location：QuartzSchedulerThread
public void run() {
	boolean lastAcquireFailed = false;

	// halted：用于判断quartz是否是暂停状态，默认不是暂停状态，初始化为false。
	// paused：用于判断是否启动，默认为未启动，初始化默认为ture。
	
	// 如果不是暂停状态，进入循环。
	while (!halted.get()) {
		try {
			
			// 初始化的时候Quartz不是暂停状态，但是是未启动状态。
			// 如果未启动，每1秒检查一次，Quartz是否启动并且不是暂停状态。如果QuartzScheduler的start()方法被调用以后paused会被置为ture.
			synchronized (sigLock) {
				while (paused && !halted.get()) {
					try {
						sigLock.wait(1000L);
					} catch (InterruptedException ignore) {
					
					}
				}

				if (halted.get()) {
					break;
				}
			}
			
			// 获取线程池中可用线程数。
			int availThreadCount = qsRsrcs.getThreadPool().blockForAvailableThreads();
			
			// 如果线程池中有可用的工作线程，这进入循环。
			if(availThreadCount > 0) { 
			
				List<OperableTrigger> triggers = null;
				
				
				long now = System.currentTimeMillis();
				
				// 清除信号记录，把signaled设为ture
				// 清空调度插队的信息，调度处理过程中，可以被集群管理线程或误点管理线程或job管理接口通知调度任务插队。
				clearSignaledSchedulingChange();
				
				try {
					
					// 获取可执行的Trigger。
					//(当前时间 + 30s, [availThreadCount(可用的线程数),maxBatchSize(最大的批量大小。初始化为1)]中小的一个, batchTimeWindow默认为0)
					triggers = qsRsrcs.getJobStore().acquireNextTriggers(now + idleWaitTime, Math.min(availThreadCount, qsRsrcs.getMaxBatchSize()), qsRsrcs.getBatchTimeWindow()); 
					
					lastAcquireFailed = false;
					
					if (log.isDebugEnabled()) {
						log.debug("batch acquisition of " + (triggers == null ? 0 : triggers.size()) + " triggers");
					}
				} catch (JobPersistenceException jpe) {
					if(!lastAcquireFailed) {
						qs.notifySchedulerListenersError("An error occurred while scanning for the next triggers to fire.", jpe);
					}
					lastAcquireFailed = true;
					continue;
				} catch (RuntimeException e) {
					if(!lastAcquireFailed) {
						getLog().error("quartzSchedulerThreadLoop: RuntimeException " + e.getMessage(), e);
					}
					lastAcquireFailed = true;
					continue;
				}

				// 判断是否有可执行的Trigger。
				if (triggers != null && !triggers.isEmpty()) {
				
					now = System.currentTimeMillis();
					
					// 获取可执行触发器的第一个触发器的下次执行的时间。
					long triggerTime = triggers.get(0).getNextFireTime().getTime();
					
					// 当前时间距离下次执行时间的间隔。
					long timeUntilTrigger = triggerTime - now;
					
					
					//【不明白】为什么要大于2？
					while(timeUntilTrigger > 2) {
					
						synchronized (sigLock) {
						
							// quartz是否是在暂停状态
							if (halted.get()) {
								break;
							}
							
							// QuartzSchedule是否被改变了，没有改变isCandidateNewTimeEarlierWithinReason返回false，
							if (!isCandidateNewTimeEarlierWithinReason(triggerTime, false)) {
								try {
									// 重新计算时间
									now = System.currentTimeMillis();
									timeUntilTrigger = triggerTime - now;
									
									// 如果没有到达触发时间，等到触发时间。  
									// 【【谁来唤醒他】】：当添加Job完成是，会调用QuartzSchedulerThread.signalSchedulingChange(..)，这个时候有可能会唤醒。
									if(timeUntilTrigger >= 1) {
										sigLock.wait(timeUntilTrigger);
									}
								} catch (InterruptedException ignore) {
								
								}
							}
						}
						
						// 
						if(releaseIfScheduleChangedSignificantly(triggers, triggerTime)) {
							break;
						}
						
						now = System.currentTimeMillis();
						timeUntilTrigger = triggerTime - now;
					}

					// 再次检查triggers是否为空。
					if(triggers.isEmpty()) {
						continue;
					}						

					List<TriggerFiredResult> bndles = new ArrayList<TriggerFiredResult>();
					
					boolean goAhead = true;
					
					// 判断是否暂停。
					synchronized(sigLock) {
						goAhead = !halted.get(); // 没有出现暂停情况goAhead都为ture
					}
					
					if(goAhead) {
						// 从QuartzSchedulerResources中获取对应的TriggerFiredResult集合，并赋给bndles；
						try {
						
							// 获取可执行的Trigger对应的TriggerFiredResult。
							List<TriggerFiredResult> res = qsRsrcs.getJobStore().triggersFired(triggers);
							if(res != null) {
								bndles = res;
							}
							
						} catch (SchedulerException se) {
							qs.notifySchedulerListenersError("An error occurred while firing triggers '" + triggers + "'", se);
							for (int i = 0; i < triggers.size(); i++) {
								qsRsrcs.getJobStore().releaseAcquiredTrigger(triggers.get(i));
							}
							continue;
						}
					}

					// 遍历TriggerFiredResult集合。
					for (int i = 0; i < bndles.size(); i++) {
						TriggerFiredResult result =  bndles.get(i);
						
						// 从TriggerFiredResult中获取TriggerFiredBundle和Exception，
						TriggerFiredBundle bndle =  result.getTriggerFiredBundle();
						Exception exception = result.getException();

						if (exception instanceof RuntimeException) {
							getLog().error("RuntimeException while firing trigger " + triggers.get(i), exception);
							qsRsrcs.getJobStore().releaseAcquiredTrigger(triggers.get(i));
							continue;
						}

						if (bndle == null) {
							qsRsrcs.getJobStore().releaseAcquiredTrigger(triggers.get(i));
							continue;
						}

						###################################################
						#         创建对应的JobRunShell，并初始化         #
						###################################################
						JobRunShell shell = null;
						try {
							shell = qsRsrcs.getJobRunShellFactory().createJobRunShell(bndle);
							shell.initialize(qs);
						} catch (SchedulerException se) {
							qsRsrcs.getJobStore().triggeredJobComplete(triggers.get(i), bndle.getJobDetail(), CompletedExecutionInstruction.SET_ALL_JOB_TRIGGERS_ERROR);
							continue;
						}

						###################################################
						#             执行对应的JobRunShell               #
						###################################################
						if (qsRsrcs.getThreadPool().runInThread(shell) == false) {
							getLog().error("ThreadPool.runInThread() return false!");
							qsRsrcs.getJobStore().triggeredJobComplete(triggers.get(i), bndle.getJobDetail(), CompletedExecutionInstruction.SET_ALL_JOB_TRIGGERS_ERROR);
						}

					}
					
					continue; 
				}
			} else { 
				continue; 
			}

			long now = System.currentTimeMillis();
			long waitTime = now + getRandomizedIdleWaitTime();
			long timeUntilContinue = waitTime - now;
			
			synchronized(sigLock) {
				try {
				  if(!halted.get()) {
					if (!isScheduleChanged()) {
					  sigLock.wait(timeUntilContinue);
					}
				  }
				} catch (InterruptedException ignore) {
				
				}
			}
		} catch(RuntimeException re) {
			getLog().error("Runtime error occurred in main trigger firing loop.", re);
		}
	}

	qs = null;
	qsRsrcs = null;
}



##############################################################################################################################
#########################################     从RAMJobStore获取将要执行Trigger   #############################################
##############################################################################################################################
/**
 * 获取接下来要执行的Trigger。
 * 主要是遍历timeTriggers.判断下次执行时间。
 */
location：RAMJobStore
public List<OperableTrigger> acquireNextTriggers(long noLaterThan, int maxCount, long timeWindow) {

	// 上锁。
	synchronized (lock) {
		List<OperableTrigger> result = new ArrayList<OperableTrigger>();
		Set<JobKey> acquiredJobKeysForNoConcurrentExec = new HashSet<JobKey>();
		Set<TriggerWrapper> excludedTriggers = new HashSet<TriggerWrapper>();
		
		long batchEnd = noLaterThan;
		
		// 可执行Trigger为0，直接返回
		if (timeTriggers.size() == 0) {
			return result;
		}
		
		while (true) {
		
			TriggerWrapper tw;

			// 获取Triggers集合中的第一个元素，并从集合中移除该元素。
			try {
				tw = timeTriggers.first();
				if (tw == null) {
					break;
				}
				
				timeTriggers.remove(tw);
			} catch (java.util.NoSuchElementException nsee) {
				break;
			}
			
			// 如果trigger下次触发时间为null直接进行下次操作。
			if (tw.trigger.getNextFireTime() == null) {
				continue;
			}

			// 延迟操作处理，如果进行处理了，返回true。
			if (applyMisfire(tw)) {
				
				// 如果Trigger的下次执行时间不为null，把Trigger从新添加到timeTriggers。
				if (tw.trigger.getNextFireTime() != null) {
					timeTriggers.add(tw);
				}
				continue;
			}

			// 判断下次执行时间是否在批量的结束时间内？如果不在，把Trigger从新添加到timeTriggers集合中，直接结束循环。
			if (tw.getTrigger().getNextFireTime().getTime() > batchEnd) {
				timeTriggers.add(tw);
				break;
			}
			
			// 如果Trigger的Job设置为@DisallowConcurrentExecution，并且它已经被添加到result，然后将其放回timeTriggers结合中，并继续搜索下一个触发器。
			
			
			JobKey jobKey = tw.trigger.getJobKey();
			JobDetail job = jobsByKey.get(tw.trigger.getJobKey()).jobDetail;
			
			// 判断Job是否被@DisallowConcurrentExecution注解注释，该注解标记为不能同时执行多个实例
			if (job.isConcurrentExectionDisallowed()) {
				
				if (acquiredJobKeysForNoConcurrentExec.contains(jobKey)) {
					excludedTriggers.add(tw);
					continue;
				} else {
					acquiredJobKeysForNoConcurrentExec.add(jobKey);
				}
			}

			// 修改Trigger的状态，
			tw.state = TriggerWrapper.STATE_ACQUIRED;
			tw.trigger.setFireInstanceId(getFiredTriggerRecordId());
			
			// 赋值trigger。
			OperableTrigger trig = (OperableTrigger) tw.trigger.clone();
			
			// 如果要执行的Trigger等于空，修改batchEnd值。
			if (result.isEmpty()) {
				batchEnd = Math.max(tw.trigger.getNextFireTime().getTime(), System.currentTimeMillis()) + timeWindow;
			}
			
			// 把Trigger放入result中。
			result.add(trig);
			
			// 判读是否到达执行的上限
			if (result.size() == maxCount) {
				break;
			}
		}

		// 如果由于DisallowConcurrentExecution而确实排除了触发器以防止ACQUIRE状态，则需要将它们重新添加回存储。
		if (excludedTriggers.size() > 0) {
			timeTriggers.addAll(excludedTriggers);
		}
		
		return result;
	}
}

/**
 * 如果Trigger的下次执行时间，小于【当前时间减去延迟间隔，延迟间隔默认为5000毫秒】，进行更新Trigger的下次执行时间（具体怎么操作和Trigger的延迟策略有关），
 * 如果更新前后的下次执行时间不一致的话，则更新成功。
 */
location：RAMJobStore
protected boolean applyMisfire(TriggerWrapper tw) {

	long misfireTime = System.currentTimeMillis();
	
	// getMisfireThreshold()：默认为5000L。misfireTime为当前时间减去5000L毫秒。
	if (getMisfireThreshold() > 0) {
		misfireTime -= getMisfireThreshold();
	}
	
	// 获取给定Trigger的下一次执行时间。
	Date tnft = tw.trigger.getNextFireTime();
	
	// 下次执行时间为null  或者  下次执行时间大于misfireTime  或者  给定的Trigger忽略错过执行。
	if (tnft == null || tnft.getTime() > misfireTime  || tw.trigger.getMisfireInstruction() == Trigger.MISFIRE_INSTRUCTION_IGNORE_MISFIRE_POLICY) { 
		return false; 
	}

	// 获取Trigger的Calender，如果Trigger有的话。
	Calendar cal = null;
	if (tw.trigger.getCalendarName() != null) {
		cal = retrieveCalendar(tw.trigger.getCalendarName());
	}

	// 通知Trigger监听器。
	signaler.notifyTriggerListenersMisfired((OperableTrigger)tw.trigger.clone());

	// 延迟处理。
	tw.trigger.updateAfterMisfire(cal);

	// 下次执行时间，如果线程执行时间为null，把Trigger状态修改为STATE_COMPLETE，并通知。
	if (tw.trigger.getNextFireTime() == null) {
	
		// 修改Trigger的状态，
		tw.state = TriggerWrapper.STATE_COMPLETE;
		
		// 通知SchedulerListener监听器，Trigger结束。
		signaler.notifySchedulerListenersFinalized(tw.trigger);
		
		// 从timeTriggers集合移除Trigger。
		synchronized (lock) {
			timeTriggers.remove(tw);
		}
		
	// 判断trigger前后的下一次执行时间是否一致。如果一直返回false。
	} else if (tnft.equals(tw.trigger.getNextFireTime())) {
		return false;
	}

	return true;
}

/**
 *
 */
location：SchedulerSignalerImpl
public void notifyTriggerListenersMisfired(Trigger trigger) {
	try {
		// sched是QuartzScheduler类的实例。
		sched.notifyTriggerListenersMisfired(trigger);
	} catch (SchedulerException se) {
		sched.getLog().error("Error notifying listeners of trigger misfire.", se);
		sched.notifySchedulerListenersError("Error notifying listeners of trigger misfire.", se);
	}
}

/**
 * 获取Trigger监听器，并执行监听器的triggerMisfired操作。
 */
location：SchedulerSignalerImpl
public void notifyTriggerListenersMisfired(Trigger trigger) throws SchedulerException { 
	List<TriggerListener> triggerListeners = buildTriggerListenerList();

	for(TriggerListener tl: triggerListeners) {
		try {
			if(!matchTriggerListener(tl, trigger.getKey())) {
				continue;
			}	
			tl.triggerMisfired(trigger);
		} catch (Exception e) {
			SchedulerException se = new SchedulerException("TriggerListener '" + tl.getName() + "' threw exception: " + e.getMessage(), e);
			throw se;
		}
	}
} 

/**
 * 更新延迟处理。根据Trigger的具体延迟策略进行处理。
 * 		MISFIRE_INSTRUCTION_IGNORE_MISFIRE_POLICY		----	直接忽略			
 * 		MISFIRE_INSTRUCTION_DO_NOTHING      			----    什么是都不做，或者当前时间的下一次执行时间。		
 * 		MISFIRE_INSTRUCTION_SMART_POLICY                ----    会跳转到MISFIRE_INSTRUCTION_DO_NOTHING		
 *		MISFIRE_INSTRUCTION_FIRE_ONCE_NOW               ----    立即执行一次				
 */
location：CronTriggerImpl
public void updateAfterMisfire(org.quartz.Calendar cal) {
	
	// 默认为MISFIRE_INSTRUCTION_SMART_POLICY = 0。
	int instr = getMisfireInstruction();

	// 忽略策略，如果出现延迟，直接忽略。
	if(instr == Trigger.MISFIRE_INSTRUCTION_IGNORE_MISFIRE_POLICY) {
		return;
	}

	// 这个“聪明策略”对于不同类型的触发器其具体行为是不同的。
	if (instr == MISFIRE_INSTRUCTION_SMART_POLICY) {
		// 立刻执行一次，然后就按照正常的计划执行。
		instr = MISFIRE_INSTRUCTION_FIRE_ONCE_NOW;
	}

	// 目前不执行，然后就按照正常的计划执行。这意味着如果下次执行时间超过了end time，实际上就没有执行机会了。
	if (instr == MISFIRE_INSTRUCTION_DO_NOTHING) {
		// 获取当前时间的下一个执行时间。
		Date newFireTime = getFireTimeAfter(new Date());
		
		while (newFireTime != null && cal != null && !cal.isTimeIncluded(newFireTime.getTime())) {
			newFireTime = getFireTimeAfter(newFireTime);
		}
		
		// 设置下一次执行时间。
		setNextFireTime(newFireTime);
		
	// 立刻执行一次，然后就按照正常的计划执行。
	} else if (instr == MISFIRE_INSTRUCTION_FIRE_ONCE_NOW) {
		setNextFireTime(new Date());
	}
}

/**
 * 候选时间更早与内部推论的时间。
 * 首先Scheduler要发生改变了。
 * 
 * oldTime：Trigger集合中第一个Trigger的执行时间。
 * clearSignal：如果是QuartzSchedulerThread的run方法调用，clearSignal为false。
 */
location：QuartzSchedulerThread
private boolean isCandidateNewTimeEarlierWithinReason(long oldTime, boolean clearSignal) {

	synchronized(sigLock) {

		// 判断Scheduler是否发生改变。如果Scheduler发生改变，会把signaled设为true。
		if (!isScheduleChanged()) {
			// 如果没有改变直接返回
			return false;
		}

		boolean earlier = false;

		if(getSignaledNextFireTime() == 0) {
			earlier = true;
		} else if(getSignaledNextFireTime() < oldTime) {
			earlier = true;
		}

		if(earlier) {
			long diff = oldTime - System.currentTimeMillis();
			if(diff < (qsRsrcs.getJobStore().supportsPersistence() ? 70L : 7L)) {
				earlier = false;
			}
		}

		if(clearSignal) {
			clearSignaledSchedulingChange();
		}

		return earlier;
	}
}

/**
 *
 */
location：QuartzSchedulerThread
private boolean releaseIfScheduleChangedSignificantly(List<OperableTrigger> triggers, long triggerTime) {
	if (isCandidateNewTimeEarlierWithinReason(triggerTime, true)) {
		for (OperableTrigger trigger : triggers) {
			qsRsrcs.getJobStore().releaseAcquiredTrigger(trigger);
		}
		triggers.clear();
		return true;
	}
	return false;
}



/**
 * firedTriggers：符合条件的触发器，即将要触发。 
 * 把Trigger等信息包装成TriggerFiredResult，并返回回去。
 */
location：RAMJobStore
public List<TriggerFiredResult> triggersFired(List<OperableTrigger> firedTriggers) {
	synchronized (lock) {
	
		List<TriggerFiredResult> results = new ArrayList<TriggerFiredResult>();

		// 循环遍历OperableTrigger集合。
		for (OperableTrigger trigger : firedTriggers) {
			// 获取TriggerWrapper
			TriggerWrapper tw = triggersByKey.get(trigger.getKey()); 
			
			if (tw == null || tw.trigger == null) {
				continue;
			}
			
			// 判读状态。
			if (tw.state != TriggerWrapper.STATE_ACQUIRED) {
				continue;
			}

			Calendar cal = null;
			if (tw.trigger.getCalendarName() != null) {
				cal = retrieveCalendar(tw.trigger.getCalendarName());
				if(cal == null) {
					continue;
				}
			}
			
			// 获取上一次执行时间。
			Date prevFireTime = trigger.getPreviousFireTime();
			
			// 【【timeTriggers中移除】】
			timeTriggers.remove(tw);
			
			
			// 【【更新Trigger下一次执行时间】】
			tw.trigger.triggered(cal);
			trigger.triggered(cal);
			
			// 把Trigger的状态重新设置为STATE_WAITING
			tw.state = TriggerWrapper.STATE_WAITING;

			// 实例化TriggerFiredBundle需要：Job、Trigger、下次执行使劲等等，把Trigger和Job和执行信息都封装到TriggerFiredBundle中。
			// retrieveJob(tw.jobKey)：从Job集合总获取对应的Job。
			TriggerFiredBundle bndle = new TriggerFiredBundle(retrieveJob(tw.jobKey), trigger, cal, false, new Date(), 
					trigger.getPreviousFireTime(), prevFireTime, trigger.getNextFireTime());

			JobDetail job = bndle.getJobDetail();

			// 判读同一个时间，是否可以执行多个。
			if (job.isConcurrentExectionDisallowed()) {
				ArrayList<TriggerWrapper> trigs = getTriggerWrappersForJob(job.getKey());
				for (TriggerWrapper ttw : trigs) {
					if (ttw.state == TriggerWrapper.STATE_WAITING) {
						ttw.state = TriggerWrapper.STATE_BLOCKED;
					}
					if (ttw.state == TriggerWrapper.STATE_PAUSED) {
						ttw.state = TriggerWrapper.STATE_PAUSED_BLOCKED;
					}
					timeTriggers.remove(ttw);
				}
				blockedJobs.add(job.getKey());
			} else if (tw.trigger.getNextFireTime() != null) {
				synchronized (lock) {
					timeTriggers.add(tw);
				}
			}

			results.add(new TriggerFiredResult(bndle));
		}
		return results;
	}
}

/**
 * 更新Trigger下一次执行时间
 */
location：RAMJobStore
public void triggered(org.quartz.Calendar calendar) {
	previousFireTime = nextFireTime;
	nextFireTime = getFireTimeAfter(nextFireTime);

	while (nextFireTime != null && calendar != null && !calendar.isTimeIncluded(nextFireTime.getTime())) {
		nextFireTime = getFireTimeAfter(nextFireTime);
	}
}


###################################################
#         创建对应的JobRunShell，并初始化         #
###################################################
/**
 * 创建对应的JobRunShell。
 */
location：JTAAnnotationAwareJobRunShellFactory
public JobRunShell createJobRunShell(TriggerFiredBundle bundle) throws SchedulerException {
	// 判断给定的Job使用使用@ExecuteInJTATransaction注解，这个注解标记这个Job使用JTA事务。
	ExecuteInJTATransaction jtaAnnotation = ClassUtils.getAnnotation(bundle.getJobDetail().getJobClass(), ExecuteInJTATransaction.class);
	
	// 判断使用哪一种JobRunShell。
	if(jtaAnnotation == null)
		return new JobRunShell(scheduler, bundle);
	else {
		int timeout = jtaAnnotation.timeout();
		if (timeout >= 0) {
			return new JTAJobRunShell(scheduler, bundle, timeout);
		} else {
			return new JTAJobRunShell(scheduler, bundle);
		}
	}
}

/**
 * 初始化JobRunShell。
 * 主要就是设置JobRunShell中的QuartzScheduler、和创建一个Job。
 */
location：JobRunShell
public void initialize(QuartzScheduler sched) throws SchedulerException {
	this.qs = sched;

	Job job = null;
	JobDetail jobDetail = firedTriggerBundle.getJobDetail();

	try {
		job = sched.getJobFactory().newJob(firedTriggerBundle, scheduler);
	} catch (SchedulerException se) {
		sched.notifySchedulerListenersError("An error occured instantiating job to be executed. job= '" + jobDetail.getKey() + "'", se);
		throw se;
	} catch (Throwable ncdfe) { 
		SchedulerException se = new SchedulerException("Problem instantiating class '" + jobDetail.getJobClass().getName() + "' - ", ncdfe);
		sched.notifySchedulerListenersError("An error occured instantiating job to be executed. job= '" + jobDetail.getKey() + "'", se);
		throw se;
	}

	this.jec = new JobExecutionContextImpl(scheduler, firedTriggerBundle, job);
}


###################################################
#        	  执行对应的JobRunShell               #
###################################################
/**
 * JobRunShell实现了Runnable接口。
 * 如果线程
 */
location：SimpleThreadPool
public boolean runInThread(Runnable runnable) {
	if (runnable == null) {
		return false;
	}

	synchronized (nextRunnableLock) {
		handoffPending = true;

		// 等待工作线程可用。
		while ((availWorkers.size() < 1) && !isShutdown) {
			try {
				nextRunnableLock.wait(500);
			} catch (InterruptedException ignore) {
			
			}
		}

		// 线程是否在关闭。
		if (!isShutdown) {
			WorkerThread wt = (WorkerThread)availWorkers.removeFirst();
			busyWorkers.add(wt);
			
			// 这是WorkerThread的run(Runnable runnable)方法，并非是Runnable的run()方法。
			wt.run(runnable);
		} else {
			// 如果线程池正在关闭，在新的其他工作线程执行Runnable
			WorkerThread wt = new WorkerThread(this, threadGroup, "WorkerThread-LastJob", prio, isMakeThreadsDaemons(), runnable);
			busyWorkers.add(wt);
			workers.add(wt);
			wt.start();
		}
		nextRunnableLock.notifyAll();
		handoffPending = false;
	}

	return true;
}

/**
 * WorkerThread的Run方法。就是把WorkerThread的内部runnable设置为给定的Runnable。
 */
location：SimpleWorkerThread
public void run(Runnable newRunnable) {
	synchronized(lock) {
		if(runnable != null) {
			throw new IllegalStateException("Already running a Runnable!");
		}

		runnable = newRunnable;
		lock.notifyAll();
	}
}

/**
 * WorkerThread的Run方法，这个run方法就是实现Runnable方法。
 * 这个run方法启动以后，就是无限循环等待WorkerThread内部runnable被设上值，如果被设值，就执行runnable的run方法。
 * 
 */
location：SimpleWorkerThread
public void run() {
	boolean ran = false;
	
	while (run.get()) {
		try {
			synchronized(lock) {
				while (runnable == null && run.get()) {
					lock.wait(500);
				}

				if (runnable != null) {
					ran = true;
					runnable.run();
				}
			}
		} catch (InterruptedException unblock) {
			try {
				getLog().error("Worker thread was interrupt()'ed.", unblock);
			} catch(Exception e) {
				//
			}
		} catch (Throwable exceptionInRunnable) {
			try {
				getLog().error("Error while executing the Runnable: ", exceptionInRunnable);
			} catch(Exception e) {
				// 
			}
		} finally {
		
			// 执行完成第一件事就是把WorkerThread内部的runnable设置为null。
			synchronized(lock) {
				runnable = null;
			}
			
			if(getPriority() != tp.getThreadPriority()) {
				setPriority(tp.getThreadPriority());
			}

			if (runOnce) {
				run.set(false);
				clearFromBusyWorkersList(this);
			} else if(ran) {
				ran = false;
				makeAvailable(this);
			}

		}
	}

	try {
		getLog().debug("WorkerThread is shut down.");
	} catch(Exception e) {
		// 
	}
}

/**
 * 
 */
location：JobRunShell
public void run() {

	qs.addInternalSchedulerListener(this);
	
	try {
		// 获取对应的Trigger和Job。
		OperableTrigger trigger = (OperableTrigger) jec.getTrigger();
		JobDetail jobDetail = jec.getJobDetail();

		do {
			JobExecutionException jobExEx = null;
			
			// 获取一个Job实例，就是保持到JobDetail中的Job。在初始化JobRunShell时，通过反射创建的。
			Job job = jec.getJobInstance();

			try {
				begin();
			} catch (SchedulerException se) {
				qs.notifySchedulerListenersError("Error executing Job (" + jec.getJobDetail().getKey() + ": couldn't begin execution.", se);
				break;
			}

			
			try {
				// 通知监听器。
				if (!notifyListenersBeginning(jec)) {
					break;
				}
			} catch(VetoedException ve) {
				try {
					CompletedExecutionInstruction instCode = trigger.executionComplete(jec, null);
					qs.notifyJobStoreJobVetoed(trigger, jobDetail, instCode);
					
					// 即使Trigger被否决，仍然需要检查它是否是Trigger的最终运行。
					if (jec.getTrigger().getNextFireTime() == null) {
						qs.notifySchedulerListenersFinalized(jec.getTrigger());
					}
					
					complete(true);
					
				} catch (SchedulerException se) {
					qs.notifySchedulerListenersError("Error during veto of Job (" + jec.getJobDetail().getKey() + ": couldn't finalize execution.", se);
				}
				break;
			}

			long startTime = System.currentTimeMillis();
			long endTime = startTime;
			
			###############################################
			# 					执行Job					  #
			###############################################
			try {
				log.debug("Calling execute on job " + jobDetail.getKey());
				job.execute(jec);
				endTime = System.currentTimeMillis();
			} catch (JobExecutionException jee) {
				endTime = System.currentTimeMillis();
				jobExEx = jee;
				getLog().info("Job " + jobDetail.getKey() + " threw a JobExecutionException: ", jobExEx);
			} catch (Throwable e) {
				endTime = System.currentTimeMillis();
				getLog().error("Job " + jobDetail.getKey() + " threw an unhandled Exception: ", e);
				SchedulerException se = new SchedulerException("Job threw an unhandled exception.", e);
				qs.notifySchedulerListenersError("Job (" + jec.getJobDetail().getKey() + " threw an exception.", se);
				jobExEx = new JobExecutionException(se, false);
			}

			// 设置执行时间
			jec.setJobRunTime(endTime - startTime);

			// 通知所有的Job监听器,Job处理完成。
			if (!notifyJobListenersComplete(jec, jobExEx)) {
				break;
			}

			CompletedExecutionInstruction instCode = CompletedExecutionInstruction.NOOP;

			//  更新trigger
			try {
				instCode = trigger.executionComplete(jec, jobExEx);
			} catch (Exception e) {
				SchedulerException se = new SchedulerException("Trigger threw an unhandled exception.", e);
				qs.notifySchedulerListenersError("Please report this error to the Quartz developers.", se);
			}

			// 通知所有的trigger监听器,
			if (!notifyTriggerListenersComplete(jec, instCode)) {
				break;
			}

			// 更新job和trigger，或者重新执行job
			if (instCode == CompletedExecutionInstruction.RE_EXECUTE_JOB) { 	
				jec.incrementRefireCount();
				try {
					complete(false);
				} catch (SchedulerException se) {
					qs.notifySchedulerListenersError("Error executing Job (" + jec.getJobDetail().getKey() + ": couldn't finalize execution.", se);
				}
				continue;
			}

			try {
				complete(true);
			} catch (SchedulerException se) {
				qs.notifySchedulerListenersError("Error executing Job ("+ jec.getJobDetail().getKey() + ": couldn't finalize execution.", se);
				continue;
			}

			qs.notifyJobStoreJobComplete(trigger, jobDetail, instCode);
			
			break;
		} while (true);
	} finally {
		qs.removeInternalSchedulerListener(this);
	}
}