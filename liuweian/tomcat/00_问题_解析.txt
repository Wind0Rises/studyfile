零、tomcat的容器模型。
	* 一个tomcat只能有一个Server。
	* Connector是连接器，是Service的核心组件之一，一个Service可以有多个Connector，主要是连接客户端请求；
	* Container是Service的另一个核心组件，按照层级有Engine，Host，Context，Wrapper四种，【【一个Service只有一个Engine】】其主要作用是执行业务逻辑；
	* Host ---> webapps，里面可以多个应用。  Context  --->  webapps里的具体应用ssm    Wrapper  --->  ssm应用的某一个Servlet。
	

一、Tomcat的类加载器。
	1、tomcat的类加载器的模型：
				Bootstrap ClassLoader									jdk\jre\lib\resources.jar、rt.jar、sunrsasign.jar、jsse.jar、jce.jar、charsets.jar、jfr.jar、jdk\jre\classes
						||
				Extension ClassLoader			默认ExtClassLoader 		jdk\jre\lib\ext
						||
				Application ClassLoader			默认AppClassLoader
						||	
				common ClassLoader ---> 加载的类：
						||
				---------------------------
			   ||						  ||
		server ClassLoader			shared ClassLoadler
		
	* Common ClassLoader：加载的是common.loader配置的路径，默认为"${catalina.base}/lib","${catalina.base}/lib/*.jar","${catalina.home}/lib", "${catalina.home}
	/lib/*.jar"。 当没有配置时，或者对应的值为空时，默认使用加载Bootstrap这个类的ClassLoader，也就是使用AppClassLoader。
	* Server ClassLoader：加载的是server.loader配置的路径，如果没有设置，默认使用CommonClassLoader。
	* shared ClassLoader：加载的是shared.loader配置的路径，如果没有设置，默认使用CommonClassLoader。
			
	2、tomcat自定义ClassLoader原因？？
		* 实现应用与应用之间的隔离，应用A的Servlet只能访问应用A的WEB-INF/classes目录及其子目录下的类，而不能访问其他应用的类。
		* 提供自动重载的功能，即当WEB-INF/classes目录或者WEB-INF/lib目录发生改变时，Web应用会重新载入这些类。
		
		
二、如何理解tomcat的server.xml，tomcat是如何解析server.xml的？？
	构建一个Digester对象，并为xml中的每一个元素，绑定一些方法，
	通过digester.addObjectCreate(..)：添加创建元素的规则；
	通过digester.addSetProperties(..)：添加设置属性的规则；
	通过digester.setNextRule(..)：添加执行下一个元素钱的规则；


三、CoyoteAdapter这干什么的。


四、Tomcat中的Container和Connector是什么？有什么联系？



五、tomcat如何一个请求的过程。
	* 首先Tcp监听到连接请求，获取到对应的socket。然后把请求交给Handler处理（这里是ConnectionHandler），然后把请求信息交给Handler处理。
	
	* 在Handler中获取Adapter【CoyoteAdapter】，所有的处理过程都是通过CoyoteAdapter进行处理的，通过CoyoteAdapter的service(...)方法。
	
	* 通过请求的信息从Mapper【Mapper：实现了Servlet API映射规则。】中获取到对应的Wrapper，放入org.apache.coyote.Request。这里会把请求和Wrapper
	进行绑定，这是就知道要处理哪一个servlet了。
	
	* 通过Connector获取Service，并通过Service获取对应容器，也就顶层容器Engin，然后会容器的pipeline（管道），然后按顺序调用阀，【先处理Engin的管道
	的阀，然后再执行Host的管道的阀，接着处理Context管的阀，最后处理Wrapper管的的阀。基础阀的作用，是调用下一个子容器的阀。】
	
	* 在StandardWrapperValve是最后调用Servlet的过程。首先获取过滤器链，然后执行过滤器链。过滤器链执行完成以后，从Wrapper中获取Servlet的实例，然后调用
	Servlet实例的service(..)方法。
	
	
六、pipeline、valves、container之间的联系。
	pipeline：其是接口，描述了一组Valve的集合，当调用invoke（）方法时应按顺序执行这些阀门。 要求管道中某个地方的Valve（通常是最后一个）必须处理请求并
创建相应的响应，而不是尝试将请求继续传递。在StandardEngine、StandardContext、StandardHost、StandardWrapper都继承了ContainerBase，ContainerBase实现了Container
接口，在ContainerBase有一个Pipeline属性。可以通过调用addValve(Valve valve)向管道中添加Valve。


七、什么时候解压war和解析应用的web.xml?
	在StandardHost的setStateInternal(..)方法里，会调用StandardHost绑定的监听器的lifecycleEvent(..)，这里StandardHost只有一个默认的HostConfig，这个监听器是
在ContextRuleSet中添加的。HostConfig会调用start()方法，在start()方法中会调用deployApps()方法，进行解压操作。


八、Tomcat的协议。


	