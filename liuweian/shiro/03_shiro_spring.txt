1、web.xml设置过滤器，DelegatingFilterProxy实现了Filter，在初始化DelegatingFilterProxy时，会根据web.xml中配置targetBeanName参数从applicationContext中加载对应的Filter。

2、spring-shiro.xml配置名称为shiroFilter的过滤器。


1、web.xml设置过滤器
<filter>
	<filter-name>shiroFilter</filter-name>
	<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
	<init-param>
		<param-name>targetFilterLifecycle</param-name>
		<param-value>true</param-value>
	</init-param>
	<init-param>
		<param-name>targetBeanName</param-name>
		<param-value>shiroFilter</param-value>
	</init-param>
</filter>
<filter-mapping>
	<filter-name>shiroFilter</filter-name>
	<url-pattern>/*</url-pattern>
</filter-mapping>

/**
 * 初始化过滤器Bean
 */
location：DelegatingFilterProxy
protected void initFilterBean() throws ServletException {
	synchronized (this.delegateMonitor) {
		if (this.delegate == null) {
			if (this.targetBeanName == null) {
				this.targetBeanName = getFilterName();
			}
			
			WebApplicationContext wac = findWebApplicationContext();
			if (wac != null) {
				this.delegate = initDelegate(wac);
			}
		}
	}
}

/**
 * 获取Filter。
 */
location：DelegatingFilterProxy
protected Filter initDelegate(WebApplicationContext wac) throws ServletException {
	// 从ApplicationContext加载名称为shiroFilter的Filter。这个shiroFilter名称，是在web.xml配置的。
	Filter delegate = wac.getBean(getTargetBeanName(), Filter.class);
	
	// targetFilterLifecycle这个值也是在web.xml中配置的。   ===》  这里就到名称为shiroFilter的Filter中了。
	if (isTargetFilterLifecycle()) {
		delegate.init(getFilterConfig());
	}
	return delegate;
}