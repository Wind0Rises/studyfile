一、问题
	1、DelegatingFilterProxy【delegate/ˈdelɪɡət/ :委托】起什么作用？？？
			web.xml设置过滤器，实现了InitializingBean接口，在afterPropertiesSet()方法中调用了initFilterBean()方法。在initFilterBean()方法在会从applicationContext中
		加载web.xml中配置的targetBeanName参数对应的beanname的Bean。一般这个bean是ShiroFilterFactoryBean类的内部类SpringShiroFilter，SpringShiroFilter是实现了Filter接口
		的。
			由于DelegatingFilterProxy是配置在web.xml中，并且DelegatingFilterProxy实现了Filter，当有请求请求应用时，都会被DelegatingFilterProxy进行拦截【真正拦截的url是
		自己配置的，这里默认拦击所有请求】。



	2、spring-shiro.xml配置名称为shiroFilter的过滤器。

web.xml设置过滤器
<filter>
	<filter-name>shiroFilter</filter-name>
	<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
	<init-param>
		<param-name>targetFilterLifecycle</param-name>
		<param-value>true</param-value>
	</init-param>
	<init-param>
		<param-name>targetBeanName</param-name>
		<param-value>shiroFilter</param-value>
	</init-param>
</filter>
<filter-mapping>
	<filter-name>shiroFilter</filter-name>
	<url-pattern>/*</url-pattern>
</filter-mapping>


shiro.xml配置
<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">


######################################################################################################################################
###################################################      初始化过程     ##############################################################
######################################################################################################################################
/**
 * 初始化过滤器Bean
 */
location：DelegatingFilterProxy
protected void initFilterBean() throws ServletException {
	synchronized (this.delegateMonitor) {
		if (this.delegate == null) {
			if (this.targetBeanName == null) {
				this.targetBeanName = getFilterName();
			}
			
			WebApplicationContext wac = findWebApplicationContext();
			if (wac != null) {
				this.delegate = initDelegate(wac);
			}
		}
	}
}

/**
 * 获取Filter。
 */
location：DelegatingFilterProxy
protected Filter initDelegate(WebApplicationContext wac) throws ServletException {
	// 从ApplicationContext加载名称为shiroFilter的Filter。这个shiroFilter名称，是在web.xml配置的。
	Filter delegate = wac.getBean(getTargetBeanName(), Filter.class);
	
	// targetFilterLifecycle这个值也是在web.xml中配置的。   ===》  这里就到名称为shiroFilter的Filter中了。
	if (isTargetFilterLifecycle()) {
		delegate.init(getFilterConfig());
	}
	return delegate;
}





######################################################################################################################################
###################################################      处理请求过程     ############################################################
######################################################################################################################################
/**
 * DelegatingFilterProxy配置在web.xml中的Filter域上，并且实现了Filter。
 */
location：DelegatingFilterProxy
public void doFilter(ServletRequest request, ServletResponse response, FilterChain filterChain) throws ServletException, IOException {

	// delegate：是shiro.xml中配置的，一般情况都是ShiroFilterFactoryBean的内部类SpringShiroFilter
	Filter delegateToUse = this.delegate;
	
	if (delegateToUse == null) {
		synchronized (this.delegateMonitor) {
			delegateToUse = this.delegate;
			if (delegateToUse == null) {
				WebApplicationContext wac = findWebApplicationContext();
				if (wac == null) {
					throw new IllegalStateException("No WebApplicationContext found: " + "no ContextLoaderListener or DispatcherServlet registered?");
				}
				delegateToUse = initDelegate(wac);
			}
			this.delegate = delegateToUse;
		}
	}

	invokeDelegate(delegateToUse, request, response, filterChain);
	
}

/**
 * DelegatingFilterProxy相当一个代理，DelegatingFilterProxy内部也维护者一个Filter。
 * 为什么不在web.xml中配置shiro的过滤器，而是使用DelegatingFilterProxy做一个代理操作。
 * 真正的Filter调用。
 */
location：DelegatingFilterProxy
protected void invokeDelegate(Filter delegate, ServletRequest request, ServletResponse response, FilterChain filterChain) ServletException, IOException {
	delegate.doFilter(request, response, filterChain);
}

/**
 * 其是ShiroFilterFactoryBean.SpringShiroFilter的实例，继承了OncePerRequestFilter
 */
location：OncePerRequestFilter
public final void doFilter(ServletRequest request, ServletResponse response, FilterChain filterChain) throws ServletException, IOException {

	String alreadyFilteredAttributeName = getAlreadyFilteredAttributeName();
	
	if (request.getAttribute(alreadyFilteredAttributeName) != null) {
		log.trace("Filter '{}' already executed.  Proceeding without invoking this filter.", getName());
		filterChain.doFilter(request, response);
	} else if (!isEnabled(request, response) || shouldNotFilter(request) ) {
		log.debug("Filter '{}' is not enabled for the current request.  Proceeding without invoking this filter.", getName());
		filterChain.doFilter(request, response);
	} else {	
		log.trace("Filter '{}' not yet executed.  Executing now.", getName());
		request.setAttribute(alreadyFilteredAttributeName, Boolean.TRUE);
		try {
			doFilterInternal(request, response, filterChain);
		} finally {
			request.removeAttribute(alreadyFilteredAttributeName);
		}
	}
}

/**
 * 其是ShiroFilterFactoryBean.SpringShiroFilter的实例，继承了OncePerRequestFilter
 */
location：AbstractShiroFilter
protected void doFilterInternal(ServletRequest servletRequest, ServletResponse servletResponse, final FilterChain chain) throws ServletException, IOException {

	Throwable t = null;

	try {
	
		// 准备ServletRequest和准备ServletResponse
		final ServletRequest request = prepareServletRequest(servletRequest, servletResponse, chain);
		final ServletResponse response = prepareServletResponse(request, servletResponse, chain);
		
		
		final Subject subject = createSubject(request, response);
		
		subject.execute(new Callable() {
			public Object call() throws Exception {
				updateSessionLastAccessTime(request, response);
				executeChain(request, response, chain);
				return null;
			}
		});
	} catch (ExecutionException ex) {
		t = ex.getCause();
	} catch (Throwable throwable) {
		t = throwable;
	}

	if (t != null) {
		if (t instanceof ServletException) {
			throw (ServletException) t;
		}
		
		if (t instanceof IOException) {
			throw (IOException) t;
		}
		
		String msg = "Filtered request failed.";
		throw new ServletException(msg, t);
	}
}

/**
 * 准备ServletRequest
 */
location：AbstractShiroFilter
protected ServletRequest prepareServletRequest(ServletRequest request, ServletResponse response, FilterChain chain) {
	ServletRequest toUse = request;
	
	if (request instanceof HttpServletRequest) {
		HttpServletRequest http = (HttpServletRequest) request;
		toUse = wrapServletRequest(http);
	}
	return toUse;
}

/**
 * 包装ServletRequest
 */
location：AbstractShiroFilter
protected ServletRequest wrapServletRequest(HttpServletRequest orig) {
	return new ShiroHttpServletRequest(orig, getServletContext(), isHttpSessions());
}

/**
 * 
 */
location：AbstractShiroFilter
protected WebSubject createSubject(ServletRequest request, ServletResponse response) {
	// getSecurityManager()：获取的就是在shiro.xml配置的SecurityManager。
	// 构建一个WebSubject对象。
	return new WebSubject.Builder(getSecurityManager(), request, response).buildWebSubject();
}


/**
 * WebSubject，创建一个Builder实例。
 */
location：WebSubject
public Builder(SecurityManager securityManager, ServletRequest request, ServletResponse response) {
	super(securityManager);
	if (request == null) {
		throw new IllegalArgumentException("ServletRequest argument cannot be null.");
	}
	
	if (response == null) {
		throw new IllegalArgumentException("ServletResponse argument cannot be null.");
	}
	setRequest(request);
	setResponse(response);
}


/**
 * 创建WebSubject对象。
 */
location：WebSubject.Builder
public WebSubject buildWebSubject() {

	// 构建一个Subject对象。
	Subject subject = super.buildSubject();
	
	if (!(subject instanceof WebSubject)) {
		String msg = "Subject implementation returned from the SecurityManager was not a " + WebSubject.class.getName() + " implementation.  
			Please ensure a Web-enabled SecurityManager " +"has been configured and made available to this builder.";
		throw new IllegalStateException(msg);
	}
	return (WebSubject) subject;
}

/**
 * 通过securityManager创建Subject对象。
 */
location：Subject.Builder
public Subject buildSubject() {
	// subjectContext为DefaultSubjectContext()。
	return this.securityManager.createSubject(this.subjectContext);
}


/**
 * 
 */
location：DefaultSecurityManager
public Subject createSubject(SubjectContext subjectContext) {
	SubjectContext context = copy(subjectContext);

	// 确定SubjectContext中有SecurityManager，如果没有进行添加操作。
	context = ensureSecurityManager(context);

	// 获取session。
	context = resolveSession(context);

	// 获取PrincipalCollection。
	context = resolvePrincipals(context);

	// 创建Subject对象。
	Subject subject = doCreateSubject(context);

	save(subject);

	return subject;
}

/**
 * 确定SubjectContext中有SecurityManager，如果没有进行添加操作。
 */
location：DefaultSecurityManager
protected SubjectContext ensureSecurityManager(SubjectContext context) {
	if (context.resolveSecurityManager() != null) {
		log.trace("Context already contains a SecurityManager instance.  Returning.");
		return context;
	}
	log.trace("No SecurityManager found in context.  Adding self reference.");
	context.setSecurityManager(this);
	return context;
}

/**
 * 向SubjectContext中设置Session
 */
location：DefaultSecurityManager
protected SubjectContext resolveSession(SubjectContext context) {
	// 从SubjectContext中获取Session。
	if (context.resolveSession() != null) {
		log.debug("Context already contains a session.  Returning.");
		return context;
	}
	try {
		// 获取Session从SessionsSecurityManager中。注意这个Session是org.apache.shiro.session.Session。
		Session session = resolveContextSession(context);
		if (session != null) {
			context.setSession(session);
		}
	} catch (InvalidSessionException e) {
		log.debug("Resolved SubjectContext context session is invalid.  Ignoring and creating an anonymous " + "(session-less) Subject instance.", e);
	}
	return context;
}

/**
 * 获取Session
 */
location：DefaultSecurityManager
protected Session resolveContextSession(SubjectContext context) throws InvalidSessionException {
	SessionKey key = getSessionKey(context);
	if (key != null) {
		return getSession(key);
	}
	return null;
}

/**
 * 通过Session管理器获取Session
 */
location：SessionsSecurityManager
public Session getSession(SessionKey key) throws SessionException {
	return this.sessionManager.getSession(key);
}

/**
 * 获取Session
 */
location：DefaultSecurityManager
protected SubjectContext resolvePrincipals(SubjectContext context) {

	// principal/ˈprɪnsəpl/：主要的。
	// 获取PrincipalCollection。
	PrincipalCollection principals = context.resolvePrincipals();

	if (isEmpty(principals)) {
		log.trace("No identity (PrincipalCollection) found in the context.  Looking for a remembered identity.");
		
		principals = getRememberedIdentity(context);

		if (!isEmpty(principals)) {
			log.debug("Found remembered PrincipalCollection.  Adding to the context to be used " +  "for subject construction by the SubjectFactory.");

			context.setPrincipals(principals);
		} else {
			log.trace("No remembered identity found.  Returning original context.");
		}
	}

	return context;
}

/**
 * 获取PrincipalCollection，分别从AuthenticationInfo -->  Subject  -->  Session  中获取。
 */
location：DefaultSubjectContext
public PrincipalCollection resolvePrincipals() {
	PrincipalCollection principals = getPrincipals();

	if (isEmpty(principals)) {
		AuthenticationInfo info = getAuthenticationInfo();
		if (info != null) {
			principals = info.getPrincipals();
		}
	}

	if (isEmpty(principals)) {
		Subject subject = getSubject();
		if (subject != null) {
			principals = subject.getPrincipals();
		}
	}

	if (isEmpty(principals)) {
		Session session = resolveSession();
		if (session != null) {
			principals = (PrincipalCollection) session.getAttribute(PRINCIPALS_SESSION_KEY);
		}
	}

	return principals;
}

/**
 * 从RememberMeManager中获取PrincipalCollection。
 */
location：DefaultSecurityManager
protected PrincipalCollection getRememberedIdentity(SubjectContext subjectContext) {
	RememberMeManager rmm = getRememberMeManager();
	if (rmm != null) {
		try {
			return rmm.getRememberedPrincipals(subjectContext);
		} catch (Exception e) {
			if (log.isWarnEnabled()) {
				String msg = "Delegate RememberMeManager instance of type [" + rmm.getClass().getName() +
						"] threw an exception during getRememberedPrincipals().";
				log.warn(msg, e);
			}
		}
	}
	return null;
}

/**
 * 构建一个Subject对象。
 */
location：DefaultSecurityManager
protected Subject doCreateSubject(SubjectContext context) {
	return getSubjectFactory().createSubject(context);
}


public Subject createSubject(SubjectContext context) {
	boolean isNotBasedOnWebSubject = context.getSubject() != null && !(context.getSubject() instanceof WebSubject);
	
	if (!(context instanceof WebSubjectContext) || isNotBasedOnWebSubject) {
		return super.createSubject(context);
	}
	
	// 强转为WebSubjectContext。
	WebSubjectContext wsc = (WebSubjectContext) context;
	
	SecurityManager securityManager = wsc.resolveSecurityManager();
	Session session = wsc.resolveSession();
	boolean sessionEnabled = wsc.isSessionCreationEnabled();
	PrincipalCollection principals = wsc.resolvePrincipals();
	boolean authenticated = wsc.resolveAuthenticated();
	String host = wsc.resolveHost();
	ServletRequest request = wsc.resolveServletRequest();
	ServletResponse response = wsc.resolveServletResponse();

	// 构建一个WebDelegatingSubject对象。
	return new WebDelegatingSubject(principals, authenticated, host, session, sessionEnabled, request, response, securityManager);
}

/**
 * 保存Subject对象。
 */
location：DefaultSecurityManager
protected void save(Subject subject) {
	this.subjectDAO.save(subject);
}