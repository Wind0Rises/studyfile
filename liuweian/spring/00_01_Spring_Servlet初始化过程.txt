Web项目初始化bean

1、web.xml中配置ContextLoaderListener监听器，该监听器实现了Servlet的ServletContextListener接口，所以在web启动的时候，第二加载（第一个context-param）监听器，
   然后进行初始操作。
2、ContextLoaderListener还继承了ContextLoader类，ContextLoader类主要是Context初始化操。

首先：创建一个WebApplicationContext。    创建过程：通过加载ContextLoader.properties文件获取到XmlWebApplicationContext完全限定名。通过获取的全限定名和ClassLoader获取对应的WebApplicationContext的Class对象，通过反射获取对应的WebApplicationContext实例对象。
其次：设置父ApplicationContenx
然后：给ApplicationContext配置xml中配置的xml文件【context-param标签。】
接着：为ApplicationContext配置配置环境。
然后：refresh()方法
最后：把初始化好的ApplicationContext设置到ServletContext中。

ContextLoaderListener中实现了ContextInitialized(ServletContextEvent event)方法。

##########   1   ######################
location：ContextLoaderListener
public void contextInitialized(ServletContextEvent event) {
	initWebApplicationContext(event.getServletContext());
}


##########    2  ####################
// 初始化Spring的WebApplicationContext通过给定的ServletContext。
location：ContextLoader
public WebApplicationContext initWebApplicationContext(ServletContext servletContext) {
	// 判断Context是否已经进行过初始化操作了
	if (servletContext.getAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE) != null) {
		throw new IllegalStateException("Cannot initialize context because there is already a root application context present - " + "check whether you have multiple ContextLoader* definitions in your web.xml!");
	}

	Log logger = LogFactory.getLog(ContextLoader.class);
	servletContext.log("Initializing Spring root WebApplicationContext");
	if (logger.isInfoEnabled()) {
		logger.info("Root WebApplicationContext: initialization started");
	}
	
	// 初始化开始时间
	long startTime = System.currentTimeMillis();

	try {
		// 将context存储在本地实例变量中，以保证它在ServletContext关闭时可用。
		if (this.context == null) {
			// 创建WebApplicationContext。createWebApplicationContext(servletContext)方法中有XmlWebApplicationContext初始化的
			// 全过程，包括基本的属性设置，环境设置。【初始化过程很重要，需要仔细研究一下】
			this.context = createWebApplicationContext(servletContext);
		}
		
		// 以XmlWebApplicationContext为Context实例说明。XmlWebApplicationContext是ConfigurableWebApplicationContext子类
		if (this.context instanceof ConfigurableWebApplicationContext) {
			ConfigurableWebApplicationContext cwac = (ConfigurableWebApplicationContext) this.context;
			
			// 没有做refresh，或者refresh失败或者context已关闭，cwac.isActive()返回为false。
			if (!cwac.isActive()) {
				// 上下文如果还没有刷新 - > 提供诸如设置父上下文，设置应用程序上下文ID等服务
				if (cwac.getParent() == null) {
					// 注入上下文实例时没有显式父级 - > 确定根Web应用程序上下文的父级（如果有）,初始化时为父Context为null。
					ApplicationContext parent = loadParentContext(servletContext);
					cwac.setParent(parent);
				}
				
				// 配置并刷新ApplicationContext.【设置配置文件属性----》创建environment----》【【refresh()操作】】】
				configureAndRefreshWebApplicationContext(cwac, servletContext);
			}
		}
		
		// 把初始化初始化完成的ApplicationContext复制给servletContext
		servletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, this.context);

		ClassLoader ccl = Thread.currentThread().getContextClassLoader();
		if (ccl == ContextLoader.class.getClassLoader()) {
			currentContext = this.context;
		} else if (ccl != null) {
			currentContextPerThread.put(ccl, this.context);
		}

		if (logger.isDebugEnabled()) {
			logger.debug("Published root WebApplicationContext as ServletContext attribute with name [" + WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE + "]");
		}

		if (logger.isInfoEnabled()) {
			long elapsedTime = System.currentTimeMillis() - startTime;
			logger.info("Root WebApplicationContext: initialization completed in " + elapsedTime + " ms");
		}

		return this.context;
	} catch (RuntimeException ex) {
		logger.error("Context initialization failed", ex);
		servletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, ex);
		throw ex;
	} catch (Error err) {
		logger.error("Context initialization failed", err);
		servletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, err);
		throw err;
	}
}


// 创建WebApplicationContext实例对象。
protected WebApplicationContext createWebApplicationContext(ServletContext sc) {
	Class<?> contextClass = determineContextClass(sc);
	if (!ConfigurableWebApplicationContext.class.isAssignableFrom(contextClass)) {
		throw new ApplicationContextException("Custom context class [" + contextClass.getName() + "] is not of type [" + ConfigurableWebApplicationContext.class.getName() + "]");
	}
	// 使用反射通过Class获取WebApplicationContext实例对象。
	//【这里没有细看，后续有时间可以细看】
	return (ConfigurableWebApplicationContext) BeanUtils.instantiateClass(contextClass);
}


// 确定Context的Class，默认情况下为XmlWebApplicationContext
protected Class<?> determineContextClass(ServletContext servletContext) {
	// 初始化操作为null
	String contextClassName = servletContext.getInitParameter(CONTEXT_CLASS_PARAM);
	
	if (contextClassName != null) {
		try {	
			// 如果不为null,返回对应的类的Class
			return ClassUtils.forName(contextClassName, ClassUtils.getDefaultClassLoader());
		} catch (ClassNotFoundException ex) {
			throw new ApplicationContextException("Failed to load custom context class [" + contextClassName + "]", ex);
		}
	} else {
		// defaultStrategies是在ContextLoader初始化的时候，通过加载相对路径的ContextLoader.properties文件获取的，ContextLoader.properties内容如下。
		// org.springframework.web.context.WebApplicationContext=org.springframework.web.context.support.【XmlWebApplicationContext】
		contextClassName = defaultStrategies.getProperty(WebApplicationContext.class.getName());
		try {
			return ClassUtils.forName(contextClassName, ContextLoader.class.getClassLoader());
		} catch (ClassNotFoundException ex) {
			throw new ApplicationContextException("Failed to load default context class [" + contextClassName + "]", ex);
		}
	}
}


org.springframework.web.context.support.XmlWebApplicationContext@5dd1c9f2
org.springframework.web.context.WebApplicationContext:/spring

location：ContextLoader
// 配置并刷新ApplicationContext------》这里以XmlWebApplicationContext为例
protected void configureAndRefreshWebApplicationContext(ConfigurableWebApplicationContext wac, ServletContext sc) {
	// 判断ConfigurableWebApplicationContext【XmlWebApplicationContext】初始化是否改变，如果没有改变，根据可用信息分配有用的新ID
	if (ObjectUtils.identityToString(wac).equals(wac.getId())) {
		String idParam = sc.getInitParameter(CONTEXT_ID_PARAM);
		if (idParam != null) {
			wac.setId(idParam);
		} else {
			// 生成默认ID
			wac.setId(ConfigurableWebApplicationContext.APPLICATION_CONTEXT_ID_PREFIX + ObjectUtils.getDisplayString(sc.getContextPath()));
		}
	}
	
	// XmlWebApplicationContext设置ServletContext
	wac.setServletContext(sc);
	
	// 获取web.xml配置的contextConfigLocation参数，web.xml最先加载的。
	String configLocationParam = sc.getInitParameter(CONFIG_LOCATION_PARAM);
	
	// XmlWebApplicationContext设置ConfigLocation
	if (configLocationParam != null) {
		wac.setConfigLocation(configLocationParam);
	}
	
	// 在刷新Context的时environment的initPropertySources都会被调用【WebApplicationContext的getEnvironment()方法返回的就是一个ConfigurableEnvironment。】
	// 确保servlet属性源适用于，在refresh之前发生的任何post-processing或者initialization 
	// 就是给context增加环境变量数据(数据来自servlet相关的配置信息)，这样spring环境就能从context中随时key取得对应的变量了；
	ConfigurableEnvironment env = wac.getEnvironment();
	if (env instanceof ConfigurableWebEnvironment) {
		((ConfigurableWebEnvironment) env).initPropertySources(sc, null);
	}

	customizeContext(sc, wac);
	
	// 【Bean的真正的初始化过程】
	wac.refresh();
}

location：AbstractRefreshableConfigApplicationContext
public void setConfigLocation(String location) {
	setConfigLocations(StringUtils.tokenizeToStringArray(location, CONFIG_LOCATION_DELIMITERS));
}


// 把web.xml中配置的xml文件复制给configLocations参数。
<context-param>
	<param-name>contextConfigLocation</param-name>
	<param-value>
		classpath*:spring/*.xml
	</param-value>
</context-param>
配置的参数。
public void setConfigLocations(String... locations) {
	if (locations != null) {
		Assert.noNullElements(locations, "Config locations must not be null");
		this.configLocations = new String[locations.length];
		for (int i = 0; i < locations.length; i++) {
			this.configLocations[i] = resolvePath(locations[i]).trim();
		}
	}
	else {
		this.configLocations = null;
	}
}

// 获取这个ApplicationContext的Environment。如果没有则创建。
location：AbstractApplicationContext
public ConfigurableEnvironment getEnvironment() {
	if (this.environment == null) {
		this.environment = createEnvironment();
	}
	return this.environment;
}

protected ConfigurableEnvironment createEnvironment() {
	return new StandardEnvironment();
}