1、问题？
	Spring的ApplicationContext和Servlet中的ApplicationContext是一个吗？？



// 初始化SpringMVC开始。该类实现【ApplicationContextAware】和继承【HttpServletBean】
location：FrameworkServlet
protected final void initServletBean() throws ServletException {
	getServletContext().log("Initializing Spring FrameworkServlet '" + getServletName() + "'");
	
	if (this.logger.isInfoEnabled()) {
		this.logger.info("FrameworkServlet '" + getServletName() + "': initialization started");
	}
	
	long startTime = System.currentTimeMillis();

	try {
		this.webApplicationContext = initWebApplicationContext();
		initFrameworkServlet();
	} catch (ServletException ex) {
		this.logger.error("Context initialization failed", ex);
		throw ex;
	} catch (RuntimeException ex) {
		this.logger.error("Context initialization failed", ex);
		throw ex;
	}

	if (this.logger.isInfoEnabled()) {
		long elapsedTime = System.currentTimeMillis() - startTime;
		this.logger.info("FrameworkServlet '" + getServletName() + "': initialization completed in " + elapsedTime + elapsedTime + " ms");
	}
}


// 初始化并发布此servlet的WebApplicationContext。
location: FrameworkServlet
protected WebApplicationContext initWebApplicationContext() {
	// 获取ApplicationContext
	WebApplicationContext rootContext = WebApplicationContextUtils.getWebApplicationContext(getServletContext());
	
	WebApplicationContext wac = null;
	
	if (this.webApplicationContext != null) {
		
		wac = this.webApplicationContext;
		
		if (wac instanceof ConfigurableWebApplicationContext) {
			ConfigurableWebApplicationContext cwac = (ConfigurableWebApplicationContext) wac;
			ddddd
			if (!cwac.isActive()) {				
				if (cwac.getParent() == null) {
					cwac.setParent(rootContext);
				}
				configureAndRefreshWebApplicationContext(cwac);
			}
		}
	}
	
	if (wac == null) {
		// 从ServletContext获取已经存在的WebApplicationContext。
		wac = findWebApplicationContext();
	}
	
	if (wac == null) {
		// 如果没有为此servlet定义上下文实例 -> 创建本地实例
		wac = createWebApplicationContext(rootContext);
	}

	if (!this.refreshEventReceived) {
		// 上下文不是具有刷新支持的ConfigurableApplicationContext，或者在构造时注入的上下文已经刷新 - >在此手动触发初始onRefresh。	
		onRefresh(wac);
	}

	if (this.publishContext) {
		String attrName = getServletContextAttributeName();
		getServletContext().setAttribute(attrName, wac);
		if (this.logger.isDebugEnabled()) {
			this.logger.debug("Published WebApplicationContext of servlet '" + getServletName() + "' as ServletContext attribute with name [" + attrName + "]");
		}
	}

	return wac;
}


location：FrameworkServlet
protected WebApplicationContext findWebApplicationContext() {
	String attrName = getContextAttribute();
	if (attrName == null) {
		return null;
	}
	WebApplicationContext wac = WebApplicationContextUtils.getWebApplicationContext(getServletContext(), attrName);
	if (wac == null) {
		throw new IllegalStateException("No WebApplicationContext found: initializer not registered?");
	}
	return wac;
}

// 创建一个WebApplicationContext实例。
location：FrameworkServlet
protected WebApplicationContext createWebApplicationContext(WebApplicationContext parent) {
	return createWebApplicationContext((ApplicationContext) parent);
}

// 具体创建一个WebApplicationContext的过程。
location：FrameworkServlet
protected WebApplicationContext createWebApplicationContext(ApplicationContext parent) {

	// contextClass = org.springframework.web.context.support.XmlWebApplicationContext
	Class<?> contextClass = getContextClass();
	
	if (this.logger.isDebugEnabled()) {
		this.logger.debug("Servlet with name '" + getServletName() + "' will try to create custom WebApplicationContext context of class '" + contextClass.getName() + "'" + ", using parent context [" + parent + "]");
	}
	
	if (!ConfigurableWebApplicationContext.class.isAssignableFrom(contextClass)) {
		throw new ApplicationContextException("Fatal initialization error in servlet with name '" + getServletName() + "': custom WebApplicationContext class [" + contextClass.getName() + "] is not of type ConfigurableWebApplicationContext");
	}
	
	// 初始化XmlWebApplicationContext这个Bean
	ConfigurableWebApplicationContext wac = (ConfigurableWebApplicationContext) BeanUtils.instantiateClass(contextClass);

	// 为WebApplicationContext设置环境信息。
	wac.setEnvironment(getEnvironment());
	// 为父属性。
	wac.setParent(parent);
	// 设置ConfigLocation这个值是Web.xml配饰Spring mvc时候的ConfigLocation的值。要加载的配置文件。
	wac.setConfigLocation(getContextConfigLocation());

	// 刷新WebApplicationContext。
	configureAndRefreshWebApplicationContext(wac);
	
	return wac;
}

location：FrameworkServlet
public Class<?> getContextClass() {
	// private Class<?> contextClass = DEFAULT_CONTEXT_CLASS;
	// public static final Class<?> DEFAULT_CONTEXT_CLASS = XmlWebApplicationContext.class;
	return this.contextClass;
}


protected void configureAndRefreshWebApplicationContext(ConfigurableWebApplicationContext wac) {
	// 判断WebApplicationContext生产的id是否正确。如果没有设置ID设置Id
	if (ObjectUtils.identityToString(wac).equals(wac.getId())) {
		if (this.contextId != null) {
			wac.setId(this.contextId);
		} else {
			wac.setId(ConfigurableWebApplicationContext.APPLICATION_CONTEXT_ID_PREFIX + ObjectUtils.getDisplayString(getServletContext().getContextPath()) + '/' + getServletName());
		}
	}

	// 设置WebApplicationContext对应的属性。
	wac.setServletContext(getServletContext());
	wac.setServletConfig(getServletConfig());
	wac.setNamespace(getNamespace());
	
	// SourceFilteringListener这监听器的作用，解释为了在ApplicationContext做refresh()时，进行Web初始化。
	// ContextRefreshListener
	wac.addApplicationListener(new SourceFilteringListener(wac, new ContextRefreshListener()));

	// 获取环境信息。
	ConfigurableEnvironment env = wac.getEnvironment();
	if (env instanceof ConfigurableWebEnvironment) {
		((ConfigurableWebEnvironment) env).initPropertySources(getServletContext(), getServletConfig());
	}

	// 什么都没做。
	postProcessWebApplicationContext(wac);
	applyInitializers(wac);
	wac.refresh();
}


protected void applyInitializers(ConfigurableApplicationContext wac) {
	String globalClassNames = getServletContext().getInitParameter(ContextLoader.GLOBAL_INITIALIZER_CLASSES_PARAM);
	if (globalClassNames != null) {
		for (String className : StringUtils.tokenizeToStringArray(globalClassNames, INIT_PARAM_DELIMITERS)) {
			this.contextInitializers.add(loadInitializer(className, wac));
		}
	}

	if (this.contextInitializerClasses != null) {
		for (String className : StringUtils.tokenizeToStringArray(this.contextInitializerClasses, INIT_PARAM_DELIMITERS)) {
			this.contextInitializers.add(loadInitializer(className, wac));
		}
	}

	AnnotationAwareOrderComparator.sort(this.contextInitializers);
	for (ApplicationContextInitializer<ConfigurableApplicationContext> initializer : this.contextInitializers) {
		initializer.initialize(wac);
	}
}




#######################################################################################################################################################


在WebApplicationContext做refresh()时，finishRefresh()
	-->  publishEvent(new ContextRefreshedEvent(this));

【SourceFilteringListener】：注意是在执行这个监听器时候做的。


location：SourceFilteringListener
protected void onApplicationEventInternal(ApplicationEvent event) {
	if (this.delegate == null) {
		throw new IllegalStateException( "Must specify a delegate object or override the onApplicationEventInternal method");
	}
	// delegate = GenericApplicationListenerAdapter
	this.delegate.onApplicationEvent(event);
}


location：GenericApplicationListenerAdapter
public void onApplicationEvent(ApplicationEvent event) {
	// delegate = FrameworkServlet
	this.delegate.onApplicationEvent(event);
}

location：FrameworkServlet
// FrameworkServlet内部类。
private class ContextRefreshListener implements ApplicationListener<ContextRefreshedEvent> {
	@Override
	public void onApplicationEvent(ContextRefreshedEvent event) {
		FrameworkServlet.this.onApplicationEvent(event);
	}
}

location：FrameworkServlet
public void onApplicationEvent(ContextRefreshedEvent event) {
	this.refreshEventReceived = true;
	onRefresh(event.getApplicationContext());
}
		||
		||
		\/
		
// #########################   初始化操作开始  ##########################
location：DispatcherServlet
protected void onRefresh(ApplicationContext context) {
	initStrategies(context);
}


location：DispatcherServlet
protected void initStrategies(ApplicationContext context) {
	initMultipartResolver(context);
	initLocaleResolver(context);
	initThemeResolver(context);
	initHandlerMappings(context);
	initHandlerAdapters(context);
	initHandlerExceptionResolvers(context);
	initRequestToViewNameTranslator(context);
	initViewResolvers(context);
	initFlashMapManager(context);
}








