
1、RequestMappingHandlerMapping的初始化流程。
	RequestMappingHandlerMapping 继承了initializingBean接口，启动Spring MVC时会调用其afterPropertiesSet()方法。初始化的时候会获取所有的bean，并从中筛选
出是否是Handler的Bean[即有@Controller和@RequestMapping注解修饰]。
	然后获取Bean中的所有符合条件的方法，把符合条件的方法封装成HandlerMethod对象，并注册到注册表中。HandlerMethod保存着RequestMappingInfo信息，方法信息、
使用mapping[@RequestMapping的value作为key]。这里并没有尝试一个代理类。
	SpringMVC并没有使用动态代理，而是使用反射直接调用的。



2、HandlerMethod方法的bridgedMethod怎么理解？？



/**
 *
 */
location：RequestMappingHandlerMapping
public void afterPropertiesSet() {
	// 构建RequestMappingInfo.BuilderConfiguration实例对象。
	this.config = new RequestMappingInfo.BuilderConfiguration();
	
	// 设置属性。
	this.config.setUrlPathHelper(getUrlPathHelper());
	this.config.setPathMatcher(getPathMatcher());
	this.config.setSuffixPatternMatch(this.useSuffixPatternMatch);
	this.config.setTrailingSlashMatch(this.useTrailingSlashMatch);
	this.config.setRegisteredSuffixPatternMatch(this.useRegisteredSuffixPatternMatch);
	this.config.setContentNegotiationManager(getContentNegotiationManager());

	// 调用父类的方法
	super.afterPropertiesSet();
}

/**
 * RequestMappingHandlerMapping的父类的afterPropertiesSet方法。
 */
location：AbstractHandlerMethodMapping
public void afterPropertiesSet() {
	initHandlerMethods();
}


/**
 * 
 */
location：AbstractHandlerMethodMapping
protected void initHandlerMethods() {
	if (logger.isDebugEnabled()) {
		logger.debug("Looking for request mappings in application context: " + getApplicationContext());
	}
	
	// detectHandlerMethodsInAncestorContexts默认为false。
	// 获取所有的Object的Bean。就是回去所有的原生Bean。
	String[] beanNames = (this.detectHandlerMethodsInAncestorContexts ?
			BeanFactoryUtils.beanNamesForTypeIncludingAncestors(getApplicationContext(), Object.class) : getApplicationContext().getBeanNamesForType(Object.class));

	for (String beanName : beanNames) {
		
		// SCOPED_TARGET_NAME_PREFIX = "scopedTarget."
		// 判读beanName是否以scopedTarget.开头。
		if (!beanName.startsWith(SCOPED_TARGET_NAME_PREFIX)) {
			Class<?> beanType = null;
			
			try {
				
				// 获取bean对应的类型。
				beanType = getApplicationContext().getType(beanName);
				
			} catch (Throwable ex) {
				if (logger.isDebugEnabled()) {
					logger.debug("Could not resolve target class for bean with name '" + beanName + "'", ex);
				}
			}
			
			// bean的类型不为null，并且判读是否是Handler[有@Controller和@RequestMapping注解修饰]。
			if (beanType != null && isHandler(beanType)) {
				detectHandlerMethods(beanName);
			}
		}
	}
	handlerMethodsInitialized(getHandlerMethods());
}

/**
 * 
 */
location：ApplicationObjectSupport
public String[] getBeanNamesForType(Class<?> type) {
	this.assertBeanFactoryActive();
	return this.getBeanFactory().getBeanNamesForType(type);
}


/**
 * 获取给定类型的Bean。
 */
location：DefaultListableBeanFactory
public String[] getBeanNamesForType(Class<?> type) {
	return getBeanNamesForType(type, true, true);
}

/**
 * 判读是否是Handler。
 */
location：RequestMappingHandlerMapping
protected boolean isHandler(Class<?> beanType) {
	return (AnnotatedElementUtils.hasAnnotation(beanType, Controller.class) ||
			AnnotatedElementUtils.hasAnnotation(beanType, RequestMapping.class));
}


protected void detectHandlerMethods(final Object handler) {
	// 获取Handler的类型。
	Class<?> handlerType = (handler instanceof String ? getApplicationContext().getType((String) handler) : handler.getClass());
	
	// 获取使用的类型，也就是Controller的类。
	// ClassUtils.getUserClass(handlerType):如果handlerType是一个内部类，会找到他的父类。
	final Class<?> userType = ClassUtils.getUserClass(handlerType);

	// 获取所有的方法。
	Map<Method, T> methods = MethodIntrospector.selectMethods(userType,
			new MethodIntrospector.MetadataLookup<T>() {
				@Override
				public T inspect(Method method) {
					try {
						return getMappingForMethod(method, userType);
					}
					catch (Throwable ex) {
						throw new IllegalStateException("Invalid mapping on handler class [" + userType.getName() + "]: " + method, ex);
					}
				}
			});

	if (logger.isDebugEnabled()) {
		logger.debug(methods.size() + " request handler methods found on " + userType + ": " + methods);
	}
	
	// 遍历所有的方法。
	for (Map.Entry<Method, T> entry : methods.entrySet()) {
		// 获取调动的方法。
		Method invocableMethod = AopUtils.selectInvocableMethod(entry.getKey(), userType);
		
		// 获取注解的value值。
		T mapping = entry.getValue();
		
		registerHandlerMethod(handler, invocableMethod, mapping);
	}
}

/**
 *
 */
location：MethodIntrospector
public static <T> Map<Method, T> selectMethods(Class<?> targetType, final MetadataLookup<T> metadataLookup) {

	final Map<Method, T> methodMap = new LinkedHashMap<Method, T>();
	Set<Class<?>> handlerTypes = new LinkedHashSet<Class<?>>();
	Class<?> specificHandlerType = null;

	// 判断targetType是否是Proxy类。
	if (!Proxy.isProxyClass(targetType)) {
		handlerTypes.add(targetType);
		specificHandlerType = targetType;
	}
	
	// handlerTypes保存着targetType的类信息以及接口信息。
	handlerTypes.addAll(Arrays.asList(targetType.getInterfaces()));

	for (Class<?> currentHandlerType : handlerTypes) {
		// 获取目标类的Class。
		final Class<?> targetClass = (specificHandlerType != null ? specificHandlerType : currentHandlerType);

		ReflectionUtils.doWithMethods(currentHandlerType, new ReflectionUtils.MethodCallback() {
			@Override
			public void doWith(Method method) {
				// 获取特别的方法。
				Method specificMethod = ClassUtils.getMostSpecificMethod(method, targetClass);
				
				// 获取MappingForMethod对象。
				T result = metadataLookup.inspect(specificMethod);
				
				if (result != null) {
					// 处理桥接方法。
					Method bridgedMethod = BridgeMethodResolver.findBridgedMethod(specificMethod);

					if (bridgedMethod == specificMethod || metadataLookup.inspect(bridgedMethod) == null) {
						methodMap.put(specificMethod, result);
					}
				}
			}
		}, ReflectionUtils.USER_DECLARED_METHODS);
	}

	return methodMap;
}

/**
 * 判断是否是Proxy类。
 */
location：Proxy
public static boolean isProxyClass(Class<?> cl) {
	// Class的isAssignableFrom(..)方法解析。
	// A.isAssignableFrom(B);	
	// 		A对象所对应类信息是B对象所对应的类信息的父类或者是父接口，简单理解即A是B的父类或接口;   	返回true。
	// 		A对象所对应类信息与B对象所对应的类信息相同，简单理解即A和B为同一个类或同一个接口			返回true。
	return Proxy.class.isAssignableFrom(cl) && proxyClassCache.containsValue(cl);
}


/**
 *  mf是ReflectionUtils.USER_DECLARED_METHODS：当method不是桥接方法并且不是Object方法是，返回true。
 */
location：ReflectionUtils
public static void doWithMethods(Class<?> clazz, MethodCallback mc, MethodFilter mf) {
	// 获取Class对象的所有方法。
	Method[] methods = getDeclaredMethods(clazz);
	
	for (Method method : methods) {
	
		// mf.matches(method)：当method不是桥接方法【并且】不是Object方法是，返回true。
		if (mf != null && !mf.matches(method)) {
			continue;
		}
		
		try {
			mc.doWith(method);
		} catch (IllegalAccessException ex) {
			throw new IllegalStateException("Not allowed to access method '" + method.getName() + "': " + ex);
		}
	}
	
	if (clazz.getSuperclass() != null) {
		doWithMethods(clazz.getSuperclass(), mc, mf);
	} else if (clazz.isInterface()) {
		for (Class<?> superIfc : clazz.getInterfaces()) {
			doWithMethods(superIfc, mc, mf);
		}
	}
}

/**
 * 获取更多的特殊的方法。
 */
location：ClassUtils
public static Method getMostSpecificMethod(Method method, Class<?> targetClass) {

	// 如果被Overridable，并且方法不是target类中的，也就是说是父类中的方法。
	if (method != null && isOverridable(method, targetClass) && targetClass != null && targetClass != method.getDeclaringClass()) {
		try {
			// 判断是否为public。
			if (Modifier.isPublic(method.getModifiers())) {
				try {
					return targetClass.getMethod(method.getName(), method.getParameterTypes());
				} catch (NoSuchMethodException ex) {
					return method;
				}
			} else {
				Method specificMethod = ReflectionUtils.findMethod(targetClass, method.getName(), method.getParameterTypes());
				return (specificMethod != null ? specificMethod : method);
			}
		} catch (SecurityException ex) {
			
		}
	}
	return method;
}

/**
 * 
 */
location：上面方法中
public T inspect(Method method) {
	try {
		return getMappingForMethod(method, userType);
	} catch (Throwable ex) {
		throw new IllegalStateException("Invalid mapping on handler class [" + userType.getName() + "]: " + method, ex);
	}
}

/**
 * 
 */
location：RequestMappingHandlerMapping
protected RequestMappingInfo getMappingForMethod(Method method, Class<?> handlerType) {
	// 创建方法的RequestMappingInfo
	RequestMappingInfo info = createRequestMappingInfo(method);
	
	if (info != null) {
		// 创建类的。
		RequestMappingInfo typeInfo = createRequestMappingInfo(handlerType);
		
		if (typeInfo != null) {
			info = typeInfo.combine(info);
		}
	}
	return info;
}

/**
 * 创建RequestMappingInfo
 */
location：RequestMappingHandlerMapping
private RequestMappingInfo createRequestMappingInfo(AnnotatedElement element) {
	// 获取方法@RequestMapping注解。
	RequestMapping requestMapping = AnnotatedElementUtils.findMergedAnnotation(element, RequestMapping.class);
	
	RequestCondition<?> condition = (element instanceof Class ? getCustomTypeCondition((Class<?>) element) : getCustomMethodCondition((Method) element));
	return (requestMapping != null ? createRequestMappingInfo(requestMapping, condition) : null);
}

/**
 * 创建RequestMappingInfo
 */
location：RequestMappingHandlerMapping
protected RequestMappingInfo createRequestMappingInfo(RequestMapping requestMapping, RequestCondition<?> customCondition) {

	return RequestMappingInfo
			.paths(resolveEmbeddedValuesInPatterns(requestMapping.path()))
			.methods(requestMapping.method())
			.params(requestMapping.params())
			.headers(requestMapping.headers())
			.consumes(requestMapping.consumes())
			.produces(requestMapping.produces())
			.mappingName(requestMapping.name())
			.customCondition(customCondition)
			.options(this.config)
			.build();
}




/**
 * 获取符合条件的方法。
 */
location：AopUtils
public static Method selectInvocableMethod(Method method, Class<?> targetType) {
	Method methodToUse = MethodIntrospector.selectInvocableMethod(method, targetType);
	
	// 不能是private 不能是static  
	if (Modifier.isPrivate(methodToUse.getModifiers()) && !Modifier.isStatic(methodToUse.getModifiers()) &&
			SpringProxy.class.isAssignableFrom(targetType)) {
		throw new IllegalStateException(String.format("Need to invoke method '%s' found on proxy for target class '%s' but cannot " +
				"be delegated to target bean. Switch its visibility to package or protected.", method.getName(), method.getDeclaringClass().getSimpleName()));
	}
	
	return methodToUse;
}



/**
 * 注册过程。MappingRegistry
 */
location：AbstractHandlerMethodMapping
protected void registerHandlerMethod(Object handler, Method method, T mapping) {
	this.mappingRegistry.register(mapping, handler, method);
}

/**
 * 具体的注册过程。
 * mapping  --> @RequestMapping的value值。
 */
location：AbstractHandlerMethodMapping.MappingRegistry
public void register(T mapping, Object handler, Method method) {
	this.readWriteLock.writeLock().lock();
	try {
		// 创建HandlerMethod
		HandlerMethod handlerMethod = createHandlerMethod(handler, method);
		
		// 判读是否唯一。
		assertUniqueMethodMapping(handlerMethod, mapping);

		if (logger.isInfoEnabled()) {
			logger.info("Mapped \"" + mapping + "\" onto " + handlerMethod);
		}
		
		// private final Map<T, HandlerMethod> mappingLookup = new LinkedHashMap<T, HandlerMethod>();
		this.mappingLookup.put(mapping, handlerMethod);

		List<String> directUrls = getDirectUrls(mapping);
		for (String url : directUrls) {
			// MultiValueMap<String, T> urlLookup = new LinkedMultiValueMap<String, T>();
			this.urlLookup.add(url, mapping);
		}

		String name = null;
		
		if (getNamingStrategy() != null) {
			// 首字母加大写字母 + "#" + mapping。
			name = getNamingStrategy().getName(handlerMethod, mapping);
			addMappingName(name, handlerMethod);
		}

		CorsConfiguration corsConfig = initCorsConfiguration(handler, method, mapping);
		if (corsConfig != null) {
			this.corsLookup.put(handlerMethod, corsConfig);
		}
		
		// Map<T, MappingRegistration<T>> registry = new HashMap<T, MappingRegistration<T>>();
		this.registry.put(mapping, new MappingRegistration<T>(mapping, handlerMethod, directUrls, name));
	} finally {
		this.readWriteLock.writeLock().unlock();
	}
}

/**
 * 创建HandlerMethod。
 */
location：AbstractHandlerMethodMapping.MappingRegistry
protected HandlerMethod createHandlerMethod(Object handler, Method method) {
	HandlerMethod handlerMethod;
	if (handler instanceof String) {
		String beanName = (String) handler;
		handlerMethod = new HandlerMethod(beanName, getApplicationContext().getAutowireCapableBeanFactory(), method);
	} else {
		handlerMethod = new HandlerMethod(handler, method);
	}
	return handlerMethod;
}

/**
 * 
 */
location：AbstractHandlerMethodMapping.MappingRegistry
private List<String> getDirectUrls(T mapping) {
	List<String> urls = new ArrayList<String>(1);
	for (String path : getMappingPathPatterns(mapping)) {
		if (!getPathMatcher().isPattern(path)) {
			urls.add(path);
		}
	}
	return urls;
}

/**
 * 这里是RequestMappingInfoHandlerMethodMappingNamingStrategy
 */
location：AbstractHandlerMethodMapping.MappingRegistry
public HandlerMethodMappingNamingStrategy<T> getNamingStrategy() {
	return this.namingStrategy;
}

/**
 * 获取名称。
 */
location：RequestMappingInfoHandlerMethodMappingNamingStrategy
public String getName(HandlerMethod handlerMethod, RequestMappingInfo mapping) {
	if (mapping.getName() != null) {
		return mapping.getName();
	}
	StringBuilder sb = new StringBuilder();
	String simpleTypeName = handlerMethod.getBeanType().getSimpleName();
	
	// 首字母加大写字母。
	for (int i = 0 ; i < simpleTypeName.length(); i++) {
		if (Character.isUpperCase(simpleTypeName.charAt(i))) {
			sb.append(simpleTypeName.charAt(i));
		}
	}
	
	// SEPARATOR = "#"
	sb.append(SEPARATOR).append(handlerMethod.getMethod().getName());
	return sb.toString();
}