public Socket(String host, int port) throws UnknownHostException, IOException {
	this(host != null ? new InetSocketAddress(host, port) : new InetSocketAddress(InetAddress.getByName(null), port), (SocketAddress) null, true);
}

private Socket(SocketAddress address, SocketAddress localAddr, boolean stream) throws IOException {
	// 将impl设置为SocketImpl的系统默认类型
	setImpl();

	if (address == null) {
		throw new NullPointerException();
	}

	try {
		// 这时stream为true。
		createImpl(stream);
		
		if (localAddr != null) {
			bind(localAddr);
		}
		
		connect(address);
		
	} catch (IOException | IllegalArgumentException | SecurityException e) {
		try {
			close();
		} catch (IOException ce) {
			e.addSuppressed(ce);
		}
		throw e;
	}
}

// 将impl设置为SocketImpl的系统默认类型。
void setImpl() {

	// 如果SocketImplFactory factory不为null，使用SocketImplFactory进行创建。
	if (factory != null) {
		impl = factory.createSocketImpl();
		checkOldImpl();
		
	// 设置为SocksSocketImpl
	} else {
		impl = new SocksSocketImpl();
	}
	
	if (impl != null) {
		impl.setSocket(this);
	}
}

void createImpl(boolean stream) throws SocketException {
	if (impl == null) {
		setImpl();
	}
	
	try {
		// SocksSocketImpl extends PlainSocketImpl
		impl.create(stream);
		created = true;
	} catch (IOException e) {
		throw new SocketException(e.getMessage());
	}
}


location：PlainSocketImpl
protected synchronized void create(boolean stream) throws IOException {
	impl.create(stream);
	this.fd = impl.fd;
}


// 一般情况下impl是：DualStackPlainSocketImpl
location：PlainSocketImpl
PlainSocketImpl() {
	if (useDualStackImpl) {
		impl = new DualStackPlainSocketImpl(exclusiveBind);
	} else {
		impl = new TwoStacksPlainSocketImpl(exclusiveBind);
	}
}


// 注意：这个方法是同步的。
location：PlainSocketImpl
protected synchronized void create(boolean stream) throws IOException {
	this.stream = stream;
	
	if (!stream) {
		ResourceManager.beforeUdpCreate();
		fd = new FileDescriptor();
		try {
			socketCreate(false);
		} catch (IOException ioe) {
			ResourceManager.afterUdpClose();
			fd = null;
			throw ioe;
		}
		
	} else {
		fd = new FileDescriptor();
		socketCreate(true);
	}
	
	if (socket != null) {
		socket.setCreated();
	}
	
	if (serverSocket != null) {
		serverSocket.setCreated();
	}
}


location：PlainSocketImpl
void socketCreate(boolean isServer) throws IOException {
	// 一般情况下impl = new DualStackPlainSocketImpl(exclusiveBind);
	impl.socketCreate(isServer);
}


location：c
void socketCreate(boolean stream) throws IOException {
	if (fd == null) {
		throw new SocketException("Socket closed");
	}

	// socket0：这个是一个native方法。
	int newfd = socket0(stream, false);

	fdAccess.set(fd, newfd);
}

