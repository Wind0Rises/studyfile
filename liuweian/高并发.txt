1、常用的线程池。
	单个线程的线程池【newSingleThreadExecutor】：核心线程数和最大线程数都是1。
	固定线程的线程池【newFixedThreadPool】：核心线程数等于最大线程数量。
	批量线程池【newScheduleThreadPool】：堵塞队里使用的是DelayedWorkQueue。
	缓存线程池【newCacheThreadPool】：核心线程数量为0。所有的线程进来以后就会放入SynchronousQueue中，然后再处理。
	forkjoin框架使用的线程池【ForkJoinPool】：
	
	常用的拒绝策略有哪些【都是实现RejectedExecutionHandler】：AbortPolicy、CallerRunsPolicy、DiscardPolicy、DiscardOldestPolicy
		AbortPolicy：直接抛出异常。
		CallerRunsPolic：运行当前的。
		DiscardPolicy：直接抛弃。
		DiscardOldestPolicy：删除等待队列中队尾的一个，然后把新的添加进入。
		
	
2、fork/join框架：
	

3、高并发常用类：
	CountDownLatch：
	CyclicBarrier：
	Semaphore：
	Condition：
	Phaser：
	原子类：
	各种锁：
	各种集合：
	线程池：
	
	
4、乐观锁与悲观锁。
	乐观锁：每次拿数据时都认为别人不会修改数据，所以不会上锁，但是在更新的时候会判断一下在此期间别人有没有更新这个数据。
			常常使用CAS算法实现。
	悲观锁：次去拿数据的时候都认为别人会修改，所以每次在拿数据的时候都会上锁，这样别人想拿这个数据就会阻塞直到它拿到锁。
			常常使用Synchronize实现。
			
5、锁的种类：
	ReetrantLock：默认是非公平锁，可以修改为公平锁。非公平锁的优点在于吞吐量比公平锁大。
	Synchronized：是一种非公平锁。

6、concurrent包下的集合类：
	LinkedBlockingQueue：内部由单链表实现，只能从head取元素，从tail添加元素。添加元素和获取元素都有独立的锁，也就是说LinkedBlockingQueue是读写分离的，读写操作可以并行执行。
						 LinkedBlockingQueue采用可重入锁(ReentrantLock)来保证在并发情况下的线程安全。
							常用的方法：
								put()：首选。队满是阻塞。
								offer(E e, long timeout, TimeUnit unit)、offer(E e)：队满时返回false。
								
								take()：首选。当队列为空时阻塞
								poll()：弹出队顶元素，队列为空时，返回空
								peek()：和poll烈性，返回队队顶元素，但顶元素不弹出。队列为空时返回null
								remove(Object o)：移除某个元素，队列为空时抛出异常。成功移除返回true
	LinkedBlockingDeque：是一个由链表结构组成的双向阻塞队列，即可以从队列的两端插入和移除元素。						
	
6、ReentrantReadWriteLock：
	获得写锁以后在获取读锁：当写获取锁的时候，如果还没有释放写锁时，读操作将被堵塞住，直到写释放锁。
	获得读锁以后在获取写锁：当读获取读锁时候，如果还没有释放读锁时，写操作将被堵塞住，直到读释放锁。
	多个读锁：当一个读锁获取锁以后，但是没有释放锁，这个时候是有其他读操作可以继续过来获取锁。
	多个写锁：当一个写获取到锁以后，如果没有释放锁，其他写在过来获取锁时无法获取到锁的，直到前一个写释放锁以后，后续的写才能获取到锁。
	
	
	
	
具体类：
	ScheduledExecutorService：
		scheduleAtFixedRate(Runnable command, long initialDelay, long period, TimeUnit unit):等待initialDelay时间后开始执行任务，每隔period时间执行一次。
			这个下一次开始时间是从上一次任务开始时就算起，不加执行时间
			
			》initialDelay》period》period》period》period》
						  |       |  	  |
						  第一次 第二次  第三次
		
		scheduleWithFixedDelay(Runnable command, long initialDelay, long delay, TimeUnit unit);
			这个下一次开始时间是从上一次执行任务接收时间算起的。
		
			》initialDelay》period》			  period》			  period》
						  |         |-> 执行中 <-|		|-> 执行中 <-|
						  |						 |					 |
						 第一次 				第二次 				第三次
						 
		schedule(Runnable command, long delay, TimeUnit unit):带延迟时间的调度，只执行一次。调度之后可通过Future.get()阻塞直至任务执行完毕。
		
		schedule(Callable<V> callable, long delay, TimeUnit unit):带延迟时间的调度，只执行一次。调度之后可通过Future.get()阻塞直至任务执行完毕，并且可以获取执行结果
		