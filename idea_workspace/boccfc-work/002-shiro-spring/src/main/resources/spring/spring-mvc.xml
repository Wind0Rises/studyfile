<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
		     http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd
		     http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
		     http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.2.xsd
		     http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.1.xsd">



    <!-- 配置spring扫描的包 -->
    <context:component-scan base-package="com.liu.shiro.basis.controller"/>

    <mvc:annotation-driven />

    <mvc:default-servlet-handler />


    <!-- ############### 视图配置器 start ################# -->
    <!--<bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
        <property name="messageConverters">
            <list>
                <ref bean="mappingJackson2HttpMessageConverter" />
            </list>
        </property>
    </bean>-->


    <!--
    <bean id="mappingJackson2HttpMessageConverter" class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
        <property name="supportedMediaTypes">
            <list>
                <value>text/json;charset=UTF-8</value>
                <value>application/json;charset=UTF-8</value>
            </list>
        </property>
    </bean>
    -->


    <!-- html视图解析器 必须先配置freemarkerConfig,注意html是没有prefix前缀属性的 -->
    <!--
    <bean id="freemarkerConfig" class="org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer">
        <property name="templateLoaderPath">
            <value>/WEB-INF/views/</value>
        </property>
    </bean>
    -->



    <!-- 配置JSP视图 -->
    <!--<bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        &lt;!&ndash; 前缀 &ndash;&gt;
        <property name="prefix" value="/WEB-INF/views/"></property>
        &lt;!&ndash; 后缀 &ndash;&gt;
        <property name="suffix" value=".jsp" />
        &lt;!&ndash; 内容类型 &ndash;&gt;
        <property name="contentType" value="text/html;charset=UTF-8" />
        &lt;!&ndash; viewClass &ndash;&gt;
        <property name="viewClass" value="org.springframework.web.servlet.view.JstlView" />
    </bean>-->
    <!-- ############### 视图配置器 end ################# -->



    <!--
        使用ContentNegotiatingViewResolver配置多个视图解析器。
    -->
    <!-- ############### 多个视图解析器 ################# -->
    <!-- 使用ContentNegotiatingViewResolver配置多个视图解析器。 -->
    <bean id="freemarkerConfig" class="org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer" >
        <property name="templateLoaderPath">
            <value>/WEB-INF/views/</value>
        </property>
    </bean>

    <bean class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean" id="contentNegotiationManager">
        <property name="mediaTypes">
            <map>
                <entry key="json" value="application/json"/>
            </map>
        </property>
        <!-- 设置默认的MIME类型，如果没有指定拓展名或请求参数，则使用此默认MIME类型解析视图 -->
        <property name="defaultContentType" value="text/html" />
        <!-- 是否不适用请求头确定MIME类型 -->
        <property name="ignoreAcceptHeader" value="true" />
        <!-- 是否根据路径拓展名确定MIME类型 -->
        <property name="favorPathExtension" value="true" />
        <!-- 是否使用参数来确定MIME类型 -->
        <property name="favorParameter" value="false" />
    </bean>

    <bean class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">
        <property name="order" value="1" />
        <property name="contentNegotiationManager" ref="contentNegotiationManager"/>
        <property name="viewResolvers">
            <list>
                <bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
                    <!-- 从0开始  越小优先级越高。 -->
                    <property name="order" value="0" />
                    <!-- 前缀 -->
                    <property name="prefix" value="/WEB-INF/views/"/>
                    <!-- 后缀 -->
                    <property name="suffix" value=".jsp" />
                    <!-- 内容类型 -->
                    <property name="contentType" value="text/html;charset=UTF-8" />
                    <!-- viewClass -->
                    <property name="viewClass" value="org.springframework.web.servlet.view.JstlView" />
                </bean>

                <bean id="htmlviewResolver" class="org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver">
                    <property name="order" value="1" />
                    <property name="contentType" value="text/html;charset=UTF-8"/>
                    <property name="suffix" value=".html"/>
                </bean>
            </list>
        </property>
        <property name="defaultViews">
            <list>
                <!-- json 视图解析 -->
                <bean class="org.springframework.web.servlet.view.json.MappingJackson2JsonView" ></bean>
            </list>
        </property>
    </bean>
    <!-- ############### 多个视图解析器 ################# -->






    <bean id="/ac" class="com.liu.shiro.basis.controller.TestAbstractController"/>





    <!-- ############### 静态资源过滤 start ################# -->
    <mvc:resources location="/assets/image/" mapping="/assets/image/**" />
    <mvc:resources location="/assets/css/" mapping="/assets/css/**" />
    <mvc:resources location="/assets/js/" mapping="/assets/js/**" />
    <mvc:resources location="/assets/file/" mapping="/assets/file/**" />
    <!-- ############### 静态资源过滤 end ################# -->

    <aop:config proxy-target-class="true"></aop:config>

</beans>



